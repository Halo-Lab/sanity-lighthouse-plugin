var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// dist/index.js
var require_dist = __commonJS({
  "dist/index.js"(exports) {
    "use strict";
    var _templateObject90;
    var _templateObject91;
    var _templateObject92;
    var _templateObject93;
    var _templateObject94;
    var _templateObject95;
    var _templateObject96;
    var _templateObject97;
    var _templateObject98;
    var _templateObject99;
    var _templateObject100;
    var _templateObject101;
    var _templateObject102;
    var _templateObject103;
    var _templateObject104;
    var _templateObject105;
    var _templateObject106;
    var _templateObject107;
    var _templateObject108;
    var _templateObject109;
    var _templateObject110;
    var _templateObject111;
    var _templateObject112;
    var _templateObject113;
    var _templateObject114;
    var _templateObject115;
    var _templateObject116;
    var _templateObject117;
    var _templateObject118;
    var _templateObject119;
    var _templateObject120;
    var _templateObject121;
    var _templateObject122;
    var _templateObject123;
    var _templateObject124;
    var _templateObject125;
    var _templateObject126;
    var _templateObject127;
    var _templateObject128;
    var _templateObject129;
    var _templateObject130;
    var _templateObject131;
    function _taggedTemplateLiteral2(strings, raw) {
      if (!raw) {
        raw = strings.slice(0);
      }
      return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    var sanity = require("sanity");
    var React$2 = require("react");
    var jsxRuntime = require("react/jsx-runtime");
    var router = require("sanity/router");
    var validator = require("validator");
    var axios = require("axios");
    var reactMinimalPieChart = require("react-minimal-pie-chart");
    var chart_js = require("chart.js");
    var reactChartjs2 = require("react-chartjs-2");
    var DateRangePicker = require("@wojtekmaj/react-daterange-picker");
    function _interopDefaultCompat(e) {
      return e && typeof e === "object" && "default" in e ? e : { default: e };
    }
    function _interopNamespaceCompat(e) {
      if (e && typeof e === "object" && "default" in e)
        return e;
      var n = /* @__PURE__ */ Object.create(null);
      if (e) {
        Object.keys(e).forEach(function(k2) {
          if (k2 !== "default") {
            var d = Object.getOwnPropertyDescriptor(e, k2);
            Object.defineProperty(n, k2, d.get ? d : { enumerable: true, get: function() {
              return e[k2];
            } });
          }
        });
      }
      n.default = e;
      return Object.freeze(n);
    }
    var React__namespace = /* @__PURE__ */ _interopNamespaceCompat(React$2);
    var validator__default = /* @__PURE__ */ _interopDefaultCompat(validator);
    var axios__default = /* @__PURE__ */ _interopDefaultCompat(axios);
    var DateRangePicker__default = /* @__PURE__ */ _interopDefaultCompat(DateRangePicker);
    var _excluded = ["symbol"];
    function _objectWithoutProperties(source, excluded) {
      if (source == null)
        return {};
      var target2 = _objectWithoutPropertiesLoose(source, excluded);
      var key2, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key2 = sourceSymbolKeys[i];
          if (excluded.indexOf(key2) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key2))
            continue;
          target2[key2] = source[key2];
        }
      }
      return target2;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target2 = {};
      var sourceKeys = Object.keys(source);
      var key2, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key2 = sourceKeys[i];
        if (excluded.indexOf(key2) >= 0)
          continue;
        target2[key2] = source[key2];
      }
      return target2;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target2) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key2) {
          _defineProperty(target2, key2, source[key2]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key2) {
          Object.defineProperty(target2, key2, Object.getOwnPropertyDescriptor(source, key2));
        });
      }
      return target2;
    }
    function _defineProperty(obj, key2, value) {
      if (key2 in obj) {
        Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key2] = value;
      }
      return obj;
    }
    var AccessDeniedIcon$1 = React$2.forwardRef(function AccessDeniedIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "access-denied", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M18.1569 6.84315C21.281 9.96734 21.281 15.0327 18.1569 18.1569C15.0327 21.281 9.96734 21.281 6.84314 18.1569C3.71895 15.0327 3.71895 9.96734 6.84314 6.84315C9.96734 3.71895 15.0327 3.71895 18.1569 6.84315ZM18.1569 6.84315L6.84401 18.156", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var ActivityIcon$1 = React$2.forwardRef(function ActivityIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "activity", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M21 15H19L15.5 7L11 18L8 12L6 15H4", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var AddCircleIcon$1 = React$2.forwardRef(function AddCircleIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "add-circle", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8 12.4H17M12.5 8V17M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var AddIcon$1 = React$2.forwardRef(function AddIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "add", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 5V20M5 12.5H20", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var ApiIcon$1 = React$2.forwardRef(function ApiIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "api", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5.93047 13.2107L6.66782 10.3728H6.73089L7.45854 13.2107H5.93047ZM8.17164 16H9.66089L7.56041 9H5.93047L3.82999 16H5.20767L5.65396 14.2876H7.73505L8.17164 16Z", fill: "currentColor" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5389 9V16H11.9166V13.7782H13.0323C14.541 13.7782 15.5015 12.8517 15.5015 11.3964C15.5015 9.92654 14.5701 9 13.1003 9H10.5389ZM11.9166 10.1303H12.751C13.6533 10.1303 14.1044 10.5475 14.1044 11.3867C14.1044 12.2308 13.6533 12.6431 12.751 12.6431H11.9166V10.1303Z", fill: "currentColor" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M21.1675 16V14.8164H19.717V10.1836H21.1675V9H16.8889V10.1836H18.3393V14.8164H16.8889V16H21.1675Z", fill: "currentColor" })] }));
    });
    var ArchiveIcon$1 = React$2.forwardRef(function ArchiveIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "archive", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16 14L12.5 17.5L9 14M4.5 7.5V20.5H20.5V7.5L18.5 4.5H6.5L4.5 7.5Z", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 10.5V17", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M4.5 7.5H20.5", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var ArrowDownIcon$1 = React$2.forwardRef(function ArrowDownIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "arrow-down", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 18.5V6M12.5 18.5L18 13M12.5 18.5L7 13", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var ArrowLeftIcon$1 = React$2.forwardRef(function ArrowLeftIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "arrow-left", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12 18L6.5 12.5L12 7M6.5 12.5H19", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var ArrowRightIcon$1 = React$2.forwardRef(function ArrowRightIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "arrow-right", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M13 7L18.5 12.5L13 18M18.5 12.5H6", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var ArrowTopRightIcon$1 = React$2.forwardRef(function ArrowTopRightIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "arrow-top-right", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9 8.5H16.5V16", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16.5 8.5L7 18", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var ArrowUpIcon$1 = React$2.forwardRef(function ArrowUpIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "arrow-up", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 6V18.5M7 11.5L12.5 6L18 11.5", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var BarChartIcon$1 = React$2.forwardRef(function BarChartIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "bar-chart", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5.5 5V19.5H20M8.5 18V13M11.5 18V9M14.5 18V11M17.5 18V7", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var BasketIcon$1 = React$2.forwardRef(function BasketIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "basket", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8.5 10.5H5L6.5 19.5H18.5L20 10.5H16.5M8.5 10.5L10.2721 5.18377C10.4082 4.77543 10.7903 4.5 11.2208 4.5H13.7792C14.2097 4.5 14.5918 4.77543 14.7279 5.18377L16.5 10.5M8.5 10.5H16.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 10.5V19.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9.5 19.5L8.5 10.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M15.5 19.5L16.5 10.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M19.5 13.5H5.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M19 16.5H6", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var BellIcon$1 = React$2.forwardRef(function BellIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "bell", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 17.5V18.5C10.5 20 11.5 20.5 12.5 20.5C13.5 20.5 14.5 20 14.5 18.5V17.5M5.5 17C6.5 15.5 6.5 15 6.5 12C6.5 8 8.5 5.5 12.5 5.5C16.5 5.5 18.5 8 18.5 12C18.5 15 18.5 15.5 19.5 17V17.5H5.5V17Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var BillIcon$1 = React$2.forwardRef(function BillIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "bill", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M6.50001 5.5C8.50003 5.5 8.50003 8 8.50003 8V9.5M6.50001 5.5C4.5 5.5 4.5 8 4.5 8L4.50001 9.5H8.50003M6.50001 5.5C6.50001 5.5 15.8333 5.5 17.6667 5.5C19.5 5.5 19.5 8.5 19.5 8.5V20L17.6667 19L15.8333 20L14 19L12.1667 20L10.3334 19L8.50003 20V9.5M11 12.5H15M11 9.5H16M11 15.5H16", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var BinaryDocumentIcon$1 = React$2.forwardRef(function BinaryDocumentIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "binary-document", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9.5 11.5V16.5M10.5 4.5H18.5V20.5H6.5V8.5L10.5 4.5ZM12.5 11.5V16.5H15.5V11.5H12.5Z", stroke: "currentColor", strokeWidth: 1.2, strokeLinecap: "square" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 4.5V8.5H6.5", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var BlockElementIcon$1 = React$2.forwardRef(function BlockElementIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "block-element", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M6.5 8.5V7.9H5.9V8.5H6.5ZM18.5 8.5H19.1V7.9H18.5V8.5ZM6.5 16.5H5.9V17.1H6.5V16.5ZM18.5 16.5V17.1H19.1V16.5H18.5ZM6.5 9.1H18.5V7.9H6.5V9.1ZM7.1 16.5V8.5H5.9V16.5H7.1ZM18.5 15.9H6.5V17.1H18.5V15.9ZM17.9 8.5V16.5H19.1V8.5H17.9ZM5 20.1H20V18.9H5V20.1ZM5 6.1H20V4.9H5V6.1Z", fill: "currentColor" }) }));
    });
    var BlockquoteIcon$1 = React$2.forwardRef(function BlockquoteIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "blockquote", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10 17.5H19M6 7.5H19M10 12.5H17M6.5 12V18", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var BoldIcon$1 = React$2.forwardRef(function BoldIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "bold", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M13.2087 18C15.5322 18 16.9731 16.793 16.9731 14.8844C16.9731 13.4812 15.9245 12.3949 14.4836 12.2892V12.1534C15.6001 11.9875 16.4526 10.9841 16.4526 9.82991C16.4526 8.14761 15.1927 7.11409 13.0804 7.11409H8.32019V18H13.2087ZM10.5985 8.85674H12.4995C13.5859 8.85674 14.212 9.37727 14.212 10.2448C14.212 11.1199 13.5406 11.6254 12.3109 11.6254H10.5985V8.85674ZM10.5985 16.2574V13.1643H12.575C13.9178 13.1643 14.6496 13.6924 14.6496 14.6882C14.6496 15.7066 13.9404 16.2574 12.6278 16.2574H10.5985Z", fill: "currentColor" }) }));
    });
    var BookIcon$1 = React$2.forwardRef(function BookIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "book", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 18.5L4.5 19.5V18.5M12.5 18.5L20.5 19.5V18.5M12.5 18.5V6.5M12.5 18.5H4.5M12.5 18.5H20.5M4.5 18.5V17.5M20.5 18.5V17.5M4.5 5.5V17.5L12.5 18.5L20.5 17.5V5.5L12.5 6.5L4.5 5.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var BottleIcon$1 = React$2.forwardRef(function BottleIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "bottle", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M7.5 17.5L17.5 17.5M17.5 13C17.5 12.087 17.5 11.3518 17.5 11C17.5 8.5 14.5 9 14.5 7.37494L14.5 5.5M17.5 13C17.5 15.1229 17.5 18.7543 17.5 20.5022C17.5 21.0545 17.0523 21.5 16.5 21.5L8.5 21.5C7.94771 21.5 7.5 21.0547 7.5 20.5024C7.5 18.8157 7.5 15.3546 7.5 13M17.5 13L7.5 13M7.5 13C7.5 12.2538 7.5 11.5648 7.5 11C7.5 8.5 10.5 9 10.5 7.37494L10.5 5.5M10.5 5.5L10.5 3.99999C10.5 3.72385 10.7239 3.49999 11 3.49999L14 3.49999C14.2761 3.49999 14.5 3.72385 14.5 3.99999L14.5 5.5M10.5 5.5L14.5 5.5", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var BulbFilledIcon$1 = React$2.forwardRef(function BulbFilledIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "bulb-filled", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M16.4272 14.3368C15.8273 15.1773 15.5 16.1794 15.5 17.212V18.5C15.5 19.0523 15.0523 19.5 14.5 19.5H14V20.5C14 21.0523 13.5523 21.5 13 21.5H12C11.4477 21.5 11 21.0523 11 20.5V19.5H10.5C9.94772 19.5 9.5 19.0523 9.5 18.5V17.212C9.5 16.1794 9.17266 15.1773 8.57284 14.3368C7.60216 12.9767 7 11.94 7 10C7 7 9.5 4.5 12.5 4.5C15.5 4.5 18 7 18 10C18 11.94 17.3978 12.9767 16.4272 14.3368Z", fill: "currentColor" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16.4272 14.3368L15.9388 13.9883L16.4272 14.3368ZM14 19.5V18.9H13.4V19.5H14ZM11 19.5H11.6V18.9H11V19.5ZM8.57284 14.3368L9.06122 13.9883H9.06122L8.57284 14.3368ZM16.1 17.212C16.1 16.3069 16.3868 15.4261 16.9155 14.6853L15.9388 13.9883C15.2678 14.9284 14.9 16.0519 14.9 17.212H16.1ZM16.1 18.5V17.212H14.9V18.5H16.1ZM14.5 20.1C15.3837 20.1 16.1 19.3837 16.1 18.5H14.9C14.9 18.7209 14.7209 18.9 14.5 18.9V20.1ZM14 20.1H14.5V18.9H14V20.1ZM13.4 19.5V20.5H14.6V19.5H13.4ZM13.4 20.5C13.4 20.7209 13.2209 20.9 13 20.9V22.1C13.8837 22.1 14.6 21.3837 14.6 20.5H13.4ZM13 20.9H12V22.1H13V20.9ZM12 20.9C11.7791 20.9 11.6 20.7209 11.6 20.5H10.4C10.4 21.3837 11.1163 22.1 12 22.1V20.9ZM11.6 20.5V19.5H10.4V20.5H11.6ZM10.5 20.1H11V18.9H10.5V20.1ZM8.9 18.5C8.9 19.3837 9.61634 20.1 10.5 20.1V18.9C10.2791 18.9 10.1 18.7209 10.1 18.5H8.9ZM8.9 17.212V18.5H10.1V17.212H8.9ZM8.08446 14.6853C8.61315 15.4261 8.9 16.3069 8.9 17.212H10.1C10.1 16.0519 9.73217 14.9284 9.06122 13.9883L8.08446 14.6853ZM6.4 10C6.4 11.0377 6.56208 11.8595 6.86624 12.611C7.16624 13.3521 7.59495 13.9995 8.08446 14.6853L9.06122 13.9883C8.58004 13.314 8.22233 12.7629 7.97858 12.1607C7.739 11.5688 7.6 10.9023 7.6 10H6.4ZM12.5 3.9C9.16863 3.9 6.4 6.66863 6.4 10H7.6C7.6 7.33137 9.83137 5.1 12.5 5.1V3.9ZM18.6 10C18.6 6.66863 15.8314 3.9 12.5 3.9V5.1C15.1686 5.1 17.4 7.33137 17.4 10H18.6ZM16.9155 14.6853C17.4051 13.9995 17.8338 13.3521 18.1338 12.611C18.4379 11.8595 18.6 11.0377 18.6 10H17.4C17.4 10.9023 17.261 11.5688 17.0214 12.1607C16.7777 12.7629 16.42 13.314 15.9388 13.9883L16.9155 14.6853Z", fill: "currentColor" })] }));
    });
    var BulbOutlineIcon$1 = React$2.forwardRef(function BulbOutlineIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "bulb-outline", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9.5 16.5H15.5M11 20V20.5C11 21.0523 11.4477 21.5 12 21.5H13C13.5523 21.5 14 21.0523 14 20.5V20M18 10C18 11.94 17.3978 12.9767 16.4272 14.3368C15.8273 15.1773 15.5 16.1794 15.5 17.212V18.5C15.5 19.0523 15.0523 19.5 14.5 19.5H10.5C9.94772 19.5 9.5 19.0523 9.5 18.5V17.212C9.5 16.1794 9.17266 15.1773 8.57284 14.3368C7.60216 12.9767 7 11.94 7 10C7 7 9.5 4.5 12.5 4.5C15.5 4.5 18 7 18 10Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var CalendarIcon$2 = React$2.forwardRef(function CalendarIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "calendar", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M4.5 10.5V19.5H20.5V10.5M4.5 10.5V5.5H20.5V10.5M4.5 10.5H12.5H20.5M20.5 13.5H16.5M16.5 13.5H12.5M16.5 13.5V10.5M16.5 13.5V16.5M12.5 13.5H8.5M12.5 13.5V16.5M12.5 13.5V10.5M8.5 13.5H4.5M8.5 13.5V10.5M8.5 13.5V16.5M20.5 16.5H16.5M16.5 16.5H12.5M16.5 16.5V19.5M12.5 16.5H8.5M12.5 16.5V19.5M8.5 16.5H4.5M8.5 16.5V19.5M17.5 8V3M7.5 8V3", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var CaseIcon$1 = React$2.forwardRef(function CaseIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "case", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9 8.5122V6C9 5.44772 9.44772 5 10 5H15C15.5523 5 16 5.44772 16 6V8.5122M4.5 12V18.5C4.5 19.0523 4.94772 19.5 5.5 19.5H19.5C20.0523 19.5 20.5 19.0523 20.5 18.5V12M4.5 12V9.5122C4.5 8.95991 4.94772 8.5122 5.5 8.5122H19.5C20.0523 8.5122 20.5 8.95991 20.5 9.5122V12M4.5 12L11.7978 14.7367C12.2505 14.9064 12.7495 14.9064 13.2022 14.7367L20.5 12", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var ChartUpwardIcon$1 = React$2.forwardRef(function ChartUpwardIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "chart-upward", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5.5 5V19.5H20M7.5 16L11.5 11.5L15.5 14L19.5 8.5", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var CheckmarkCircleIcon$1 = React$2.forwardRef(function CheckmarkCircleIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "checkmark-circle", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9.5 12.1316L11.7414 14.5L16 10M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var CheckmarkIcon$1 = React$2.forwardRef(function CheckmarkIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "checkmark", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5.5 11.5L10.5 16.5L19.5 7.60001", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var ChevronDownIcon$1 = React$2.forwardRef(function ChevronDownIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "chevron-down", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M17 10.5L12.5 15L8 10.5", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var ChevronLeftIcon$1 = React$2.forwardRef(function ChevronLeftIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "chevron-left", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M14.5 17L10 12.5L14.5 8", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var ChevronRightIcon$1 = React$2.forwardRef(function ChevronRightIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "chevron-right", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 8L15 12.5L10.5 17", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var ChevronUpIcon$1 = React$2.forwardRef(function ChevronUpIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "chevron-up", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8 14.5L12.5 10L17 14.5", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var CircleIcon$2 = React$2.forwardRef(function CircleIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "circle", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("circle", { cx: 12.5, cy: 12.5, r: 8, stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var ClipboardIcon$1 = React$2.forwardRef(function ClipboardIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "clipboard", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8 5.5H6.5V19.5H18.5V5.5H17M12.5 3C11.5 3 11.5 4.5 11 4.5C10 4.5 9.5 5 9.5 6.5H15.6C15.6 5 15 4.5 14 4.5C13.5 4.5 13.5 3 12.5 3Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var ClipboardImageIcon$1 = React$2.forwardRef(function ClipboardImageIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "clipboard-image", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8 5.5H6.5V19.5H10.5M17 5.5H18.5V11.5M10.5 18.5L12.73 15.8983C13.1327 15.4285 13.8613 15.4335 14.2575 15.909L15.299 17.1588C15.6754 17.6105 16.3585 17.6415 16.7743 17.2257L16.9903 17.0097C17.2947 16.7053 17.7597 16.6298 18.1447 16.8223L20.5 18M10.5 11.5H20.5V21.5H10.5V11.5ZM12.5 3C11.5 3 11.5 4.5 11 4.5C10 4.5 9.5 5 9.5 6.5H15.6C15.6 5 15 4.5 14 4.5C13.5 4.5 13.5 3 12.5 3Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var ClockIcon$1 = React$2.forwardRef(function ClockIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "clock", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 8V12.5L15.5 15.5M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var CloseCircleIcon$1 = React$2.forwardRef(function CloseCircleIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "close-circle", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9.5 15.5L12.5 12.5M12.5 12.5L15.5 9.5M12.5 12.5L9.5 9.5M12.5 12.5L15.5 15.5M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var CloseIcon$1 = React$2.forwardRef(function CloseIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "close", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M18 7L7 18M7 7L18 18", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var CodeBlockIcon$1 = React$2.forwardRef(function CodeBlockIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "code-block", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M11 15L8.5 12.5L11 10M14 10L16.5 12.5L14 15M5.5 6.5H19.5V18.5H5.5V6.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var CodeIcon$1 = React$2.forwardRef(function CodeIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "code", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M7.5 12.5L7.07574 12.0757L6.65147 12.5L7.07574 12.9243L7.5 12.5ZM17.5 12.5L17.9243 12.9243L18.3485 12.5L17.9243 12.0757L17.5 12.5ZM11.4243 15.5757L7.92426 12.0757L7.07574 12.9243L10.5757 16.4243L11.4243 15.5757ZM7.92426 12.9243L11.4243 9.42426L10.5757 8.57574L7.07574 12.0757L7.92426 12.9243ZM13.5757 9.42426L17.0757 12.9243L17.9243 12.0757L14.4243 8.57574L13.5757 9.42426ZM17.0757 12.0757L13.5757 15.5757L14.4243 16.4243L17.9243 12.9243L17.0757 12.0757Z", fill: "currentColor" }) }));
    });
    var CogIcon$1 = React$2.forwardRef(function CogIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "cog", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M14.2624 5.40607L13.8714 4.42848C13.6471 3.86771 13.104 3.5 12.5 3.5C11.896 3.5 11.3529 3.86771 11.1286 4.42848L10.7376 5.40607C10.5857 5.78585 10.2869 6.08826 9.90901 6.2448C9.53111 6.40133 9.10603 6.39874 8.73006 6.23761L7.76229 5.82285C7.20716 5.58494 6.56311 5.70897 6.13604 6.13604C5.70897 6.56311 5.58494 7.20716 5.82285 7.76229L6.23761 8.73006C6.39874 9.10602 6.40133 9.53111 6.2448 9.90901C6.08826 10.2869 5.78585 10.5857 5.40607 10.7376L4.42848 11.1286C3.86771 11.3529 3.5 11.896 3.5 12.5C3.5 13.104 3.86771 13.6471 4.42848 13.8714L5.40607 14.2624C5.78585 14.4143 6.08826 14.7131 6.2448 15.091C6.40133 15.4689 6.39874 15.894 6.23761 16.2699L5.82285 17.2377C5.58494 17.7928 5.70897 18.4369 6.13604 18.864C6.56311 19.291 7.20716 19.4151 7.76229 19.1772L8.73006 18.7624C9.10603 18.6013 9.53111 18.5987 9.90901 18.7552C10.2869 18.9117 10.5857 19.2141 10.7376 19.5939L11.1286 20.5715C11.3529 21.1323 11.896 21.5 12.5 21.5C13.104 21.5 13.6471 21.1323 13.8714 20.5715L14.2624 19.5939C14.4143 19.2141 14.7131 18.9117 15.091 18.7552C15.4689 18.5987 15.894 18.6013 16.2699 18.7624L17.2377 19.1771C17.7928 19.4151 18.4369 19.291 18.864 18.864C19.291 18.4369 19.4151 17.7928 19.1771 17.2377L18.7624 16.2699C18.6013 15.894 18.5987 15.4689 18.7552 15.091C18.9117 14.7131 19.2141 14.4143 19.5939 14.2624L20.5715 13.8714C21.1323 13.6471 21.5 13.104 21.5 12.5C21.5 11.896 21.1323 11.3529 20.5715 11.1286L19.5939 10.7376C19.2141 10.5857 18.9117 10.2869 18.7552 9.90901C18.5987 9.53111 18.6013 9.10602 18.7624 8.73006L19.1772 7.76229C19.4151 7.20716 19.291 6.56311 18.864 6.13604C18.4369 5.70897 17.7928 5.58494 17.2377 5.82285L16.2699 6.23761C15.894 6.39874 15.4689 6.40133 15.091 6.2448C14.7131 6.08826 14.4143 5.78585 14.2624 5.40607Z", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16.5 12.5C16.5 14.7091 14.7091 16.5 12.5 16.5C10.2909 16.5 8.5 14.7091 8.5 12.5C8.5 10.2909 10.2909 8.5 12.5 8.5C14.7091 8.5 16.5 10.2909 16.5 12.5Z", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var CollapseIcon$1 = React$2.forwardRef(function CollapseIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "collapse", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M6 14.5L10.5 14.5V19M19 10.5H14.5L14.5 6", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 14.5L6 19", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M14.5 10.5L19 6", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var CommentIcon$1 = React$2.forwardRef(function CommentIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "comment", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M7.5 16.5H9.5V20.5L13.5 16.5H17.5C18.6046 16.5 19.5 15.6046 19.5 14.5V8.5C19.5 7.39543 18.6046 6.5 17.5 6.5H7.5C6.39543 6.5 5.5 7.39543 5.5 8.5V14.5C5.5 15.6046 6.39543 16.5 7.5 16.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var ComponentIcon$1 = React$2.forwardRef(function ComponentIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "component", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8.5 8.5L12.5 12.5M12.5 12.5L16.5 16.5M12.5 12.5L16.5 8.5M12.5 12.5L8.5 16.5M12.5 4L21 12.5L12.5 21L4 12.5L12.5 4Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var ComposeIcon$1 = React$2.forwardRef(function ComposeIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "compose", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M17 6L19 8M14 5.5H5.5V19.5H19.5V11M9 16L9.5 13.5L19 4L21 6L11.5 15.5L9 16Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var ControlsIcon$1 = React$2.forwardRef(function ControlsIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "controls", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M6.5 5V7.5M6.5 7.5C5.39543 7.5 4.5 8.39543 4.5 9.5C4.5 10.6046 5.39543 11.5 6.5 11.5M6.5 7.5C7.60457 7.5 8.5 8.39543 8.5 9.5C8.5 10.6046 7.60457 11.5 6.5 11.5M6.5 11.5V20M12.5 5V13.5M12.5 13.5C11.3954 13.5 10.5 14.3954 10.5 15.5C10.5 16.6046 11.3954 17.5 12.5 17.5M12.5 13.5C13.6046 13.5 14.5 14.3954 14.5 15.5C14.5 16.6046 13.6046 17.5 12.5 17.5M12.5 17.5V20M18.5 5V7.5M18.5 7.5C17.3954 7.5 16.5 8.39543 16.5 9.5C16.5 10.6046 17.3954 11.5 18.5 11.5M18.5 7.5C19.6046 7.5 20.5 8.39543 20.5 9.5C20.5 10.6046 19.6046 11.5 18.5 11.5M18.5 11.5V20", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var CopyIcon$1 = React$2.forwardRef(function CopyIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "copy", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8.5 8.5H5.5V20.5H16.5V16.5M19.5 4.5H8.5V16.5H19.5V4.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var CreditCardIcon$1 = React$2.forwardRef(function CreditCardIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "credit-card", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M4.5 10.5H20.5M4.5 9.5H20.5M4.5 11.5H20.5M7 15.5H14M5.5 18.5H19.5C20.0523 18.5 20.5 18.0523 20.5 17.5V7.5C20.5 6.94772 20.0523 6.5 19.5 6.5H5.5C4.94772 6.5 4.5 6.94772 4.5 7.5V17.5C4.5 18.0523 4.94772 18.5 5.5 18.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var CropIcon$1 = React$2.forwardRef(function CropIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "crop", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8.5 4V16.5H21M4 8.5H16.5V21", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var DashboardIcon$1 = React$2.forwardRef(function DashboardIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "dashboard", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M14.5 19.5V12.5M10.5 12.5V5.5M5.5 12.5H19.5M5.5 19.5H19.5V5.5H5.5V19.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var DatabaseIcon$1 = React$2.forwardRef(function DatabaseIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "database", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M18.5 7V17.5C18.5 19.0594 16.0504 20.5 12.5 20.5C8.9496 20.5 6.5 19.0594 6.5 17.5V7M18.5 7C18.5 8.45543 15.8137 9.5 12.5 9.5C9.18629 9.5 6.5 8.45543 6.5 7C6.5 5.54457 9.18629 4.5 12.5 4.5C15.8137 4.5 18.5 5.54457 18.5 7Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var DesktopIcon$2 = React$2.forwardRef(function DesktopIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "desktop", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M4.5 14.5V16.5C4.5 17.0523 4.94772 17.5 5.5 17.5H12.5M4.5 14.5V6.5C4.5 5.94772 4.94772 5.5 5.5 5.5H19.5C20.0523 5.5 20.5 5.94772 20.5 6.5V14.5M4.5 14.5H20.5M20.5 14.5V16.5C20.5 17.0523 20.0523 17.5 19.5 17.5H12.5M12.5 17.5V20.5M12.5 20.5H8M12.5 20.5H17", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var DocumentIcon$1 = React$2.forwardRef(function DocumentIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "document", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 4.5V8.5H6.5M10.5 4.5H18.5V20.5H6.5V8.5L10.5 4.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var DocumentPdfIcon$1 = React$2.forwardRef(function DocumentPdfIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "document-pdf", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 4.5V8.5H6.5M10.5 4.5H18.5V20.5H6.5V8.5L10.5 4.5Z", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.7414 13.14L12.749 13.1046C12.896 12.4991 13.0809 11.7442 12.9365 11.0602C12.8402 10.5206 12.4425 10.3104 12.1031 10.2952C11.7028 10.2775 11.3456 10.5054 11.2569 10.8373C11.0897 11.4453 11.2392 12.2762 11.5128 13.3351C11.1683 14.1559 10.6186 15.3491 10.2158 16.0584C9.46592 16.446 8.46022 17.0438 8.31075 17.7987C8.28036 17.9381 8.31582 18.1154 8.39942 18.275C8.49315 18.4523 8.64261 18.5891 8.81741 18.655C8.89341 18.6828 8.9846 18.7056 9.091 18.7056C9.53686 18.7056 10.2588 18.3459 11.2215 16.6942C11.3684 16.6461 11.5204 16.5954 11.6673 16.5448C12.3564 16.3117 13.0708 16.0685 13.7167 15.9596C14.4311 16.3421 15.2443 16.5878 15.7966 16.5878C16.3437 16.5878 16.5591 16.2636 16.6401 16.0685C16.782 15.7265 16.7136 15.2959 16.4831 15.0653C16.1487 14.736 15.3355 14.6499 14.0689 14.8069C13.4457 14.4269 13.0378 13.9102 12.7414 13.14ZM9.96245 16.9881C9.61032 17.4998 9.34433 17.7557 9.19993 17.8671C9.36966 17.5555 9.70152 17.2262 9.96245 16.9881ZM12.1816 11.0222C12.3133 11.2477 12.2956 11.9291 12.1943 12.2737C12.0701 11.7695 12.0524 11.0552 12.1259 10.9716L12.1816 11.0222ZM12.1411 14.0748C12.4121 14.5435 12.7541 14.9463 13.1316 15.2452C12.5844 15.3693 12.0853 15.5745 11.6395 15.7569C11.5331 15.8 11.4292 15.843 11.3279 15.8836C11.6648 15.2731 11.946 14.5815 12.1411 14.0748ZM16.0828 15.7341L16.0676 15.7569C16.0676 15.7569 15.8346 15.8988 14.9403 15.5466C15.9688 15.4985 16.0828 15.7341 16.0828 15.7341Z", fill: "currentColor" })] }));
    });
    var DocumentRemoveIcon$1 = React$2.forwardRef(function DocumentRemoveIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "document-remove", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M10.2515 3.9H10.5H18.5H19.1V4.5V11.9H17.9V5.1H11.1V8.5V9.1H10.5H7.09999V11.9H5.89999V8.5V8.25147L6.07573 8.07574L10.0757 4.07574L10.2515 3.9ZM17.9 19.9V14.1H19.1V20.5V21.1H18.5H6.49999H5.89999V20.5V14.1H7.09999V19.9H17.9ZM7.94852 7.9H9.89999V5.94853L7.94852 7.9ZM2 13.6H23V12.4H2V13.6Z", fill: "currentColor" }) }));
    });
    var DocumentSheetIcon$1 = React$2.forwardRef(function DocumentSheetIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "document-sheet", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 4.5V8.5H6.5M10.5 4.5H18.5V20.5H6.5V8.5L10.5 4.5Z", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("line", { x1: 10.4, y1: 19, x2: 10.4, y2: 10, stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("line", { x1: 14.4, y1: 19, x2: 14.4, y2: 10, stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("line", { x1: 8, y1: 12.4, x2: 17, y2: 12.4, stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("line", { x1: 8, y1: 16.4, x2: 17, y2: 16.4, stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var DocumentTextIcon$1 = React$2.forwardRef(function DocumentTextIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "document-text", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 4.5V8.5H6.5M10.5 4.5H18.5V20.5H6.5V8.5L10.5 4.5Z", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16 12H12.5H9", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M14 15H12.5H9", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var DocumentVideoIcon$1 = React$2.forwardRef(function DocumentVideoIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "document-video", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 4.5V8.5H6.5M10.5 4.5H18.5V20.5H6.5V8.5L10.5 4.5Z", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M11.5 15.5V12.5L14 14L11.5 15.5Z", fill: "currentColor", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var DocumentWordIcon$1 = React$2.forwardRef(function DocumentWordIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "document-word", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 4.5V8.5H6.5M10.5 4.5H18.5V20.5H6.5V8.5L10.5 4.5Z", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.4699 13.4588H12.5263L13.6328 17H14.5435L16 12H14.9952L14.0656 15.7214H14.0129L12.929 12H12.0672L10.9984 15.7214H10.9419L10.0124 12H9L10.4565 17H11.371L12.4699 13.4588Z", fill: "currentColor" })] }));
    });
    var DocumentZipIcon$1 = React$2.forwardRef(function DocumentZipIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "document-zip", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 4.5V8.5H6.5M10.5 4.5H18.5V20.5H6.5V8.5L10.5 4.5Z", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M15 4.5L13.5 5L15.5 6L13.5 7L15.5 8L13.5 9L15.5 10L13.5 11L14.5 11.5V13", stroke: "currentColor", strokeLinejoin: "round" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M13.5 13H15.5L16 17H13L13.5 13Z", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var DocumentsIcon$1 = React$2.forwardRef(function DocumentsIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "documents", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16.5 6.5H19.5V21.5H8.5V18.5M10 3.5V8H5.5M10 3.5H16.5V18.5H5.5V8L10 3.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var DotIcon$1 = React$2.forwardRef(function DotIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "dot", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("circle", { cx: 12.5, cy: 12.5, r: 1.5, fill: "currentColor", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var DoubleChevronDownIcon$1 = React$2.forwardRef(function DoubleChevronDownIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "double-chevron-down", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M17 8.5L12.5 13L8 8.5M17 12.5L12.5 17L8 12.5", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var DoubleChevronLeftIcon$1 = React$2.forwardRef(function DoubleChevronLeftIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "double-chevron-left", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 17L8 12.5L12.5 8M16.5 17L12 12.5L16.5 8", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var DoubleChevronRightIcon$1 = React$2.forwardRef(function DoubleChevronRightIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "double-chevron-right", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 8L17 12.5L12.5 17M8.5 8L13 12.5L8.5 17", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var DoubleChevronUpIcon$1 = React$2.forwardRef(function DoubleChevronUpIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "double-chevron-up", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8 12.5L12.5 8L17 12.5M8 16.5L12.5 12L17 16.5", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var DownloadIcon$1 = React$2.forwardRef(function DownloadIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "download", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M19.5 17V19.5H5.5V17M17.5 11L12.5 16L7.5 11M12.5 16V4.99998", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var DragHandleIcon$1 = React$2.forwardRef(function DragHandleIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "drag-handle", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M9.5 8C10.3284 8 11 7.32843 11 6.5C11 5.67157 10.3284 5 9.5 5C8.67157 5 8 5.67157 8 6.5C8 7.32843 8.67157 8 9.5 8ZM9.5 14C10.3284 14 11 13.3284 11 12.5C11 11.6716 10.3284 11 9.5 11C8.67157 11 8 11.6716 8 12.5C8 13.3284 8.67157 14 9.5 14ZM11 18.5C11 19.3284 10.3284 20 9.5 20C8.67157 20 8 19.3284 8 18.5C8 17.6716 8.67157 17 9.5 17C10.3284 17 11 17.6716 11 18.5ZM15.5 8C16.3284 8 17 7.32843 17 6.5C17 5.67157 16.3284 5 15.5 5C14.6716 5 14 5.67157 14 6.5C14 7.32843 14.6716 8 15.5 8ZM17 12.5C17 13.3284 16.3284 14 15.5 14C14.6716 14 14 13.3284 14 12.5C14 11.6716 14.6716 11 15.5 11C16.3284 11 17 11.6716 17 12.5ZM15.5 20C16.3284 20 17 19.3284 17 18.5C17 17.6716 16.3284 17 15.5 17C14.6716 17 14 17.6716 14 18.5C14 19.3284 14.6716 20 15.5 20Z", fill: "currentColor" }) }));
    });
    var DropIcon$1 = React$2.forwardRef(function DropIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "drop", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M18.5 14.5C18.5 18 16 20.5 12.5 20.5C9 20.5 6.5 18 6.5 14.5C6.5 11 9.5 7.50001 12.5 4.5C15.5 7.5 18.5 11 18.5 14.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var EarthAmericasIcon$1 = React$2.forwardRef(function EarthAmericasIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "earth-americas", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M9.9 19.4303V16.7515L11.5203 15.1312L8.60296 13.4642L7.6 12.2105V13L6.4382 13.2107L5.3943 10.4269C5.20272 11.0847 5.1 11.7804 5.1 12.5C5.1 15.672 7.09572 18.3778 9.9 19.4303ZM15.6 5.77866V11.4485L13.7515 9.6H11.3L10.2922 10.9437L10.7485 11.4H12.6V12.8183L13.3211 13.9H15.7172L18.7651 16.4399C19.484 15.2991 19.9 13.9481 19.9 12.5C19.9 9.52001 18.1385 6.95143 15.6 5.77866ZM15.6 4.47567C18.8178 5.71962 21.1 8.84329 21.1 12.5C21.1 17.2497 17.2496 21.1 12.5 21.1C7.75035 21.1 3.9 17.2497 3.9 12.5C3.9 7.75035 7.75035 3.9 12.5 3.9C13.5164 3.9 14.4915 4.07631 15.3966 4.4H15.6V4.47567Z", fill: "currentColor" }) }));
    });
    var EarthGlobeIcon$1 = React$2.forwardRef(function EarthGlobeIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "earth-globe", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5.5 16.5H19.5M5.5 8.5H19.5M4.5 12.5H20.5M12.5 20.5C12.5 20.5 8 18.5 8 12.5C8 6.5 12.5 4.5 12.5 4.5M12.5 4.5C12.5 4.5 17 6.5 17 12.5C17 18.5 12.5 20.5 12.5 20.5M12.5 4.5V20.5M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var EditIcon$1 = React$2.forwardRef(function EditIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "edit", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M15 7L18 10M6 19L7 15L17 5L20 8L10 18L6 19Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var EllipsisHorizontalIcon$1 = React$2.forwardRef(function EllipsisHorizontalIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "ellipsis-horizontal", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M6.5 11C7.32843 11 8 11.6716 8 12.5C8 13.3284 7.32843 14 6.5 14C5.67157 14 5 13.3284 5 12.5C5 11.6716 5.67157 11 6.5 11Z", fill: "currentColor" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 11C13.3284 11 14 11.6716 14 12.5C14 13.3284 13.3284 14 12.5 14C11.6716 14 11 13.3284 11 12.5C11 11.6716 11.6716 11 12.5 11Z", fill: "currentColor" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M18.5 11C19.3284 11 20 11.6716 20 12.5C20 13.3284 19.3284 14 18.5 14C17.6716 14 17 13.3284 17 12.5C17 11.6716 17.6716 11 18.5 11Z", fill: "currentColor" })] }));
    });
    var EllipsisVerticalIcon$1 = React$2.forwardRef(function EllipsisVerticalIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "ellipsis-vertical", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M14 6.5C14 7.32843 13.3284 8 12.5 8C11.6716 8 11 7.32843 11 6.5C11 5.67157 11.6716 5 12.5 5C13.3284 5 14 5.67157 14 6.5ZM14 12.5C14 13.3284 13.3284 14 12.5 14C11.6716 14 11 13.3284 11 12.5C11 11.6716 11.6716 11 12.5 11C13.3284 11 14 11.6716 14 12.5ZM12.5 20C13.3284 20 14 19.3284 14 18.5C14 17.6716 13.3284 17 12.5 17C11.6716 17 11 17.6716 11 18.5C11 19.3284 11.6716 20 12.5 20Z", fill: "currentColor" }) }));
    });
    var EnvelopeIcon$1 = React$2.forwardRef(function EnvelopeIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "envelope", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M20.5 18.5H4.5V6.5H20.5V18.5Z", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M20.5 18.5L17.75 15.5L15 12.5M4.5 18.5L10 12.5M20.5 6.5L12.5 15L4.5 6.5", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var EqualIcon$1 = React$2.forwardRef(function EqualIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "equal", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M7.5 4.5H3.5V20.5H7.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M17.5 20.5L21.5 20.5L21.5 4.5L17.5 4.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9 10.5H16", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9 14.5H16", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var ErrorFilledIcon$1 = React$2.forwardRef(function ErrorFilledIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "error-filled", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M4 12.5C4 7.80558 7.80558 4 12.5 4C17.1944 4 21 7.80558 21 12.5C21 17.1944 17.1944 21 12.5 21C7.80558 21 4 17.1944 4 12.5ZM13 14.5V16H12V14.5H13ZM12 9V13H13V9H12Z", fill: "currentColor" }) }));
    });
    var ErrorOutlineIcon$1 = React$2.forwardRef(function ErrorOutlineIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "error-outline", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 16V14.5M12.5 9V13M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var ExpandIcon$1 = React$2.forwardRef(function ExpandIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "expand", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M14 6.5H18.5V11M11 18.5H6.5V14", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M18.5 6.5L14 11M6.5 18.5L11 14", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var EyeClosedIcon$1 = React$2.forwardRef(function EyeClosedIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "eye-closed", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M7 15.5L5.5 17.5M20.5 12.5C19.8612 13.5647 19.041 14.6294 18.0008 15.501M18.0008 15.501C16.5985 16.676 14.7965 17.5 12.5 17.5M18.0008 15.501L18 15.5M18.0008 15.501L19.5 17.5M12.5 17.5C8.5 17.5 6 15 4.5 12.5M12.5 17.5V20M15.5 17L16.5 19.5M9.5 17L8.5 19.5", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var EyeOpenIcon$1 = React$2.forwardRef(function EyeOpenIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "eye-open", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M5.20513 12.5C6.66296 14.7936 8.9567 16.9 12.5 16.9C16.0433 16.9 18.3371 14.7936 19.7949 12.5C18.3371 10.2064 16.0433 8.1 12.5 8.1C8.9567 8.1 6.66296 10.2064 5.20513 12.5ZM3.98551 12.1913C5.53974 9.60093 8.20179 6.9 12.5 6.9C16.7982 6.9 19.4603 9.60093 21.0145 12.1913L21.1997 12.5L21.0145 12.8087C19.4603 15.3991 16.7982 18.1 12.5 18.1C8.20179 18.1 5.53974 15.3991 3.98551 12.8087L3.80029 12.5L3.98551 12.1913ZM12.5 9.4C10.7879 9.4 9.4 10.7879 9.4 12.5C9.4 14.2121 10.7879 15.6 12.5 15.6C14.2121 15.6 15.6 14.2121 15.6 12.5C15.6 10.7879 14.2121 9.4 12.5 9.4Z", fill: "currentColor" }) }));
    });
    var FilterIcon$1 = React$2.forwardRef(function FilterIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "filter", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M11 12L6 7V6L19 6L19 7L14 12V17L11 19V12Z", stroke: "currentColor", strokeWidth: 1.2, strokeLinecap: "square" }) }));
    });
    var FolderIcon$1 = React$2.forwardRef(function FolderIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "folder", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M11.5 8.5H19.5V18.5H5.5V5.5H10.5L11.5 8.5ZM11.5 8.5H5.5", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var GenerateIcon$1 = React$2.forwardRef(function GenerateIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "generate", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9 5.30423C6.33576 6.60253 4.5 9.33688 4.5 12.5C4.5 16.9183 8.08172 20.5 12.5 20.5C16.9183 20.5 20.5 16.9183 20.5 12.5C20.5 8.08172 16.9183 4.5 12.5 4.5V14.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16 11L12.5 14.5L9 11", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var HeartFilledIcon$1 = React$2.forwardRef(function HeartFilledIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "heart-filled", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M17 16C15.8 17.3235 12.5 20.5 12.5 20.5C12.5 20.5 9.2 17.3235 8 16C5.2 12.9118 4.5 11.7059 4.5 9.5C4.5 7.29412 6.1 5.5 8.5 5.5C10.5 5.5 11.7 6.82353 12.5 8.14706C13.3 6.82353 14.5 5.5 16.5 5.5C18.9 5.5 20.5 7.29412 20.5 9.5C20.5 11.7059 19.8 12.9118 17 16Z", fill: "currentColor", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var HeartIcon$1 = React$2.forwardRef(function HeartIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "heart", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M17 16C15.8 17.3235 12.5 20.5 12.5 20.5C12.5 20.5 9.2 17.3235 8 16C5.2 12.9118 4.5 11.7059 4.5 9.5C4.5 7.29412 6.1 5.5 8.5 5.5C10.5 5.5 11.7 6.82353 12.5 8.14706C13.3 6.82353 14.5 5.5 16.5 5.5C18.9 5.5 20.5 7.29412 20.5 9.5C20.5 11.7059 19.8 12.9118 17 16Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var HelpCircleIcon$1 = React$2.forwardRef(function HelpCircleIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "help-circle", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 13C12.5 11 14 11.5 14 10C14 9.34375 13.5 8.5 12.5 8.5C11.5 8.5 11 9 10.5 9.5M12.5 16V14.5M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var HomeIcon$1 = React$2.forwardRef(function HomeIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "home", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M6.5 8.75V18.5H18.5V8.75M4.5 10L12.5 5L20.5 10M14.5 18.5V11.5H10.5V18.5", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var IceCreamIcon$1 = React$2.forwardRef(function IceCreamIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "ice-cream", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9.5 13.5L12.5 20.5L15.5 13.5M12.5 8.26389C11.9692 7.78885 11.2684 7.5 10.5 7.5C8.84315 7.5 7.5 8.84315 7.5 10.5C7.5 12.1569 8.84315 13.5 10.5 13.5C11.2684 13.5 11.9692 13.2111 12.5 12.7361M9.5 7.5C9.5 5.84315 10.8431 4.5 12.5 4.5C14.1569 4.5 15.5 5.84315 15.5 7.5M17.5 10.5C17.5 12.1569 16.1569 13.5 14.5 13.5C12.8431 13.5 11.5 12.1569 11.5 10.5C11.5 8.84315 12.8431 7.5 14.5 7.5C16.1569 7.5 17.5 8.84315 17.5 10.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var ImageIcon$1 = React$2.forwardRef(function ImageIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "image", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5.5 15.5L8.79289 12.2071C9.18342 11.8166 9.81658 11.8166 10.2071 12.2071L12.8867 14.8867C13.2386 15.2386 13.7957 15.2782 14.1938 14.9796L15.1192 14.2856C15.3601 14.1049 15.6696 14.0424 15.9618 14.1154L19.5 15M5.5 6.5H19.5V18.5H5.5V6.5ZM15.5 10.5C15.5 11.0523 15.0523 11.5 14.5 11.5C13.9477 11.5 13.5 11.0523 13.5 10.5C13.5 9.94772 13.9477 9.5 14.5 9.5C15.0523 9.5 15.5 9.94772 15.5 10.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var ImageRemoveIcon$1 = React$2.forwardRef(function ImageRemoveIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "image-remove", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M4.9 5.9H5.5H19.5H20.1V6.5V11.4H18.9V7.1H6.1V11.4H4.9V6.5V5.9ZM18.9 13.7315V13.6H20.1V18.5V19.1H19.5H5.5H4.9V18.5V13.6H7.74853L6.1 15.2485V17.9H18.9V14.9685L15.8162 14.1975C15.6994 14.1683 15.5756 14.1933 15.4792 14.2656L14.5538 14.9596C13.9168 15.4374 13.0255 15.374 12.4625 14.811L11.2515 13.6H12.9485L13.311 13.9625C13.4518 14.1032 13.6746 14.1191 13.8338 13.9996L14.3667 13.6H18.3739L18.9 13.7315ZM12.9 10C12.9 10.6024 13.2329 11.1271 13.7248 11.4H15.2752C15.7671 11.1271 16.1 10.6024 16.1 10C16.1 9.11635 15.3837 8.4 14.5 8.4C13.6163 8.4 12.9 9.11635 12.9 10ZM8.25147 11.4H10.7485L10.6314 11.2828C10.0065 10.658 8.99347 10.658 8.36863 11.2828L8.25147 11.4ZM14.1 10C14.1 9.77909 14.2791 9.6 14.5 9.6C14.7209 9.6 14.9 9.77909 14.9 10C14.9 10.2209 14.7209 10.4 14.5 10.4C14.2791 10.4 14.1 10.2209 14.1 10ZM2 13.1H23V11.9H2V13.1Z", fill: "currentColor" }) }));
    });
    var ImagesIcon$1 = React$2.forwardRef(function ImagesIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "images", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M18.5 7.5H20.5V19.5H6.5V17.5M4.5 14.5L7.79289 11.2071C8.18342 10.8166 8.81658 10.8166 9.20711 11.2071L11.8867 13.8867C12.2386 14.2386 12.7957 14.2782 13.1938 13.9796L14.1192 13.2856C14.3601 13.1049 14.6696 13.0424 14.9618 13.1154L18.5 14M4.5 5.5H18.5V17.5H4.5V5.5ZM14.5 9.5C14.5 10.0523 14.0523 10.5 13.5 10.5C12.9477 10.5 12.5 10.0523 12.5 9.5C12.5 8.94772 12.9477 8.5 13.5 8.5C14.0523 8.5 14.5 8.94772 14.5 9.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var InfoFilledIcon$1 = React$2.forwardRef(function InfoFilledIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "info-filled", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M21 12.5C21 17.1944 17.1944 21 12.5 21C7.80558 21 4 17.1944 4 12.5C4 7.80558 7.80558 4 12.5 4C17.1944 4 21 7.80558 21 12.5ZM12 10.5V9H13V10.5H12ZM13 16V12H12V16H13Z", fill: "currentColor" }) }));
    });
    var InfoOutlineIcon$1 = React$2.forwardRef(function InfoOutlineIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "info-outline", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 10.5V9M12.5 12V16M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var InlineElementIcon$1 = React$2.forwardRef(function InlineElementIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "inline-element", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16.5 6.5H17.1V5.9H16.5V6.5ZM8.5 6.5V5.9H7.9V6.5H8.5ZM16.5 18.5V19.1H17.1V18.5H16.5ZM8.5 18.5H7.9V19.1H8.5V18.5ZM16.5 5.9H8.5V7.1H16.5V5.9ZM17.1 18.5V6.5H15.9V18.5H17.1ZM8.5 19.1H16.5V17.9H8.5V19.1ZM7.9 6.5V18.5H9.1V6.5H7.9ZM4.9 5V20H6.1V5H4.9ZM18.9 5V20H20.1V5H18.9Z", fill: "currentColor" }) }));
    });
    var InlineIcon$1 = React$2.forwardRef(function InlineIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "inline", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 6.5H19.5V18.5H12.5M12.5 6.5H5.5V18.5H12.5M12.5 6.5V18.5", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var InsertAboveIcon$1 = React$2.forwardRef(function InsertAboveIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "insert-above", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M14.5 10.5556L10.5 10.5556M12.5 12.5L12.5 8.50001M18.5 5.50001L6.5 5.50001M18.5 19.5L6.5 19.5L6.5 15.5L18.5 15.5L18.5 19.5Z", stroke: "currentColor", strokeWidth: 1.2, strokeLinecap: "square" }) }));
    });
    var InsertBelowIcon$1 = React$2.forwardRef(function InsertBelowIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "insert-below", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 14.5H14.5M12.5 12.5V16.5M6.5 19.5H18.5M6.5 5.5H18.5V9.5H6.5V5.5Z", stroke: "currentColor", strokeWidth: 1.2, strokeLinecap: "square" }) }));
    });
    var ItalicIcon$1 = React$2.forwardRef(function ItalicIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "italic", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.43 18H11.7276L13.4551 9.86763H12.1576L10.43 18ZM13.3043 8.29848C13.8022 8.29848 14.2095 7.89111 14.2095 7.39321C14.2095 6.89531 13.8022 6.48794 13.3043 6.48794C12.8064 6.48794 12.399 6.89531 12.399 7.39321C12.399 7.89111 12.8064 8.29848 13.3043 8.29848Z", fill: "currentColor" }) }));
    });
    var JoystickIcon$1 = React$2.forwardRef(function JoystickIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "joystick", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9.5 16V14.5H15.5V16M13.5 10.5V14.5M11.5 10.5V14.5M15.5 7.5C15.5 9.15685 14.1569 10.5 12.5 10.5C10.8431 10.5 9.5 9.15685 9.5 7.5C9.5 5.84315 10.8431 4.5 12.5 4.5C14.1569 4.5 15.5 5.84315 15.5 7.5ZM18.5 19.5H6.5C5.94772 19.5 5.5 19.0523 5.5 18.5V17.5C5.5 16.9477 5.94772 16.5 6.5 16.5H18.5C19.0523 16.5 19.5 16.9477 19.5 17.5V18.5C19.5 19.0523 19.0523 19.5 18.5 19.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var LaunchIcon$1 = React$2.forwardRef(function LaunchIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "launch", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M14 6.5H5.5V19.5H18.5V11M20.5 4.5L10.5 14.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16 4.5H20.5V9", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var LeaveIcon$1 = React$2.forwardRef(function LeaveIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "leave", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16.5 15V19.5H5.5V5.5H16.5V10M10 12.5H22.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M20 10L22.5 12.5L20 15", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var LemonIcon$1 = React$2.forwardRef(function LemonIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "lemon", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.6569 10.3431L6.41422 14.5858C7.58579 15.7574 9.12132 16.3431 10.6569 16.3431M10.6569 10.3431L14.8995 6.1005C16.0711 7.27208 16.6569 8.80761 16.6569 10.3431M10.6569 10.3431L10.6569 16.3431M10.6569 10.3431L16.6569 10.3431M10.6569 10.3431L14.8995 14.5858M14.8995 14.5858C13.7279 15.7574 12.1924 16.3431 10.6569 16.3431M14.8995 14.5858C16.0711 13.4142 16.6569 11.8787 16.6569 10.3431M16.3137 4.68629C19.4379 7.81049 19.4379 12.8758 16.3137 16C13.1895 19.1242 8.12419 19.1242 5 16L16.3137 4.68629Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var LinkIcon$2 = React$2.forwardRef(function LinkIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "link", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M11 12.5L12.5 14C13.281 14.7811 14.719 14.7811 15.5 14L18.5 11C19.281 10.219 19.281 8.78105 18.5 8L18 7.50001C17.2189 6.71896 15.781 6.71896 15 7.5L13 9.5M12 15.5L10 17.5C9.21895 18.281 7.78105 18.281 7 17.5L6.5 17C5.71895 16.219 5.71896 14.7811 6.5 14L9.50001 11C10.2811 10.219 11.719 10.219 12.5 11L14 12.5", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var LinkRemovedIcon$1 = React$2.forwardRef(function LinkRemovedIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "link-removed", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M18.4243 7.07574C17.9038 6.55531 17.1875 6.31422 16.5 6.31422C15.8125 6.31422 15.0962 6.55531 14.5757 7.07574L12.5757 9.07574L13.4243 9.92427L15.4243 7.92427C15.6849 7.66365 16.078 7.51422 16.5 7.51422C16.922 7.51422 17.3151 7.66365 17.5757 7.92427L17.9983 7.50165L17.5757 7.92427L18.0757 8.42427C18.3363 8.68488 18.4858 9.07799 18.4858 9.5C18.4858 9.92201 18.3363 10.3151 18.0757 10.5757L16.7515 11.9H18.4485L18.9243 11.4243C19.4447 10.9038 19.6858 10.1875 19.6858 9.5C19.6858 8.81253 19.4447 8.09617 18.9243 7.57574L18.5 8L18.9243 7.57574L18.4243 7.07574ZM12.0757 11.4243L12.5515 11.9H14.2485L12.9243 10.5757C12.4038 10.0553 11.6875 9.81421 11 9.81421C10.3125 9.81421 9.59617 10.0553 9.07574 10.5757L7.75147 11.9H9.44853L9.92427 11.4243C10.1849 11.1636 10.578 11.0142 11 11.0142C11.422 11.0142 11.8151 11.1636 12.0757 11.4243ZM7.24853 14.1H5.67654C5.43071 14.5303 5.31421 15.0221 5.31421 15.5C5.31421 16.1875 5.55529 16.9038 6.07573 17.4243L6.4965 17.0035L6.07573 17.4243L6.57573 17.9243C7.09616 18.4447 7.81252 18.6858 8.49999 18.6858C9.18746 18.6858 9.90382 18.4447 10.4243 17.9243L12.4243 15.9243L11.5757 15.0757L9.57573 17.0757C9.31511 17.3363 8.922 17.4858 8.49999 17.4858C8.07798 17.4858 7.68487 17.3363 7.42426 17.0757L6.99999 17.5L7.42425 17.0757L6.92426 16.5757C6.66364 16.3151 6.51421 15.922 6.51421 15.5C6.51421 15.078 6.66365 14.6849 6.92426 14.4243L7.24853 14.1ZM16.2485 14.1H11.7515L12.0757 14.4243C12.5962 14.9447 13.3125 15.1858 14 15.1858C14.6875 15.1858 15.4038 14.9447 15.9243 14.4243L16.2485 14.1ZM2 13.6H23V12.4H2V13.6Z", fill: "currentColor" }) }));
    });
    var LockIcon$1 = React$2.forwardRef(function LockIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "lock", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M15.5 11.5V8.5C15.5 6.5 14 5.5 12.5 5.5C11 5.5 9.5 6.5 9.5 8.5V11.5M7.5 11.5H17.5V19.5H7.5V11.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var LogoJsIcon$1 = React$2.forwardRef(function LogoJsIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "logo-js", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M20 5H5V20H20V5ZM12.5254 16.1572C12.5254 17.4189 11.7742 18.1536 10.4792 18.1536C9.24243 18.1536 8.49121 17.4189 8.45801 16.2942V16.261H9.67407V16.2859C9.69897 16.7466 9.9729 17.0703 10.4626 17.0703C10.9939 17.0703 11.272 16.7507 11.272 16.1489V12.011H12.5254V16.1572ZM18.2893 16.2153C18.2893 17.4023 17.3679 18.1536 15.8738 18.1536C14.4419 18.1536 13.5371 17.4688 13.4666 16.4062L13.4624 16.3398H14.6702L14.6743 16.3813C14.72 16.8296 15.2056 17.1326 15.907 17.1326C16.5752 17.1326 17.0359 16.813 17.0359 16.3523V16.3481C17.0359 15.9539 16.7412 15.7339 15.9983 15.5803L15.3674 15.4517C14.1223 15.1985 13.5869 14.6174 13.5869 13.7085V13.7043C13.5869 12.592 14.5415 11.8574 15.8696 11.8574C17.2683 11.8574 18.0901 12.5962 18.1689 13.5964L18.1731 13.6504H16.9944L16.9861 13.6006C16.9155 13.1731 16.5005 12.8743 15.8696 12.8743C15.2512 12.8784 14.8403 13.1606 14.8403 13.6089V13.613C14.8403 14.0032 15.1309 14.2356 15.8364 14.3809L16.4714 14.5095C17.7373 14.771 18.2893 15.2773 18.2893 16.2112V16.2153Z", fill: "currentColor" }) }));
    });
    var LogoTsIcon$1 = React$2.forwardRef(function LogoTsIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "logo-ts", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M20 5H5V20H20V5ZM11.0769 18H9.82349V13.0444H8.02637V12.011H12.874V13.0444H11.0769V18ZM18.2893 16.2153C18.2893 17.4023 17.3679 18.1536 15.8738 18.1536C14.4419 18.1536 13.5371 17.4688 13.4666 16.4062L13.4624 16.3398H14.6702L14.6743 16.3813C14.72 16.8296 15.2056 17.1326 15.907 17.1326C16.5752 17.1326 17.0359 16.813 17.0359 16.3523V16.3481C17.0359 15.9539 16.7412 15.7339 15.9983 15.5803L15.3674 15.4517C14.1223 15.1985 13.5869 14.6174 13.5869 13.7085V13.7043C13.5869 12.592 14.5415 11.8574 15.8696 11.8574C17.2683 11.8574 18.0901 12.5962 18.1689 13.5964L18.1731 13.6504H16.9944L16.9861 13.6006C16.9155 13.1731 16.5005 12.8743 15.8696 12.8743C15.2512 12.8784 14.8403 13.1606 14.8403 13.6089V13.613C14.8403 14.0032 15.1309 14.2356 15.8364 14.3809L16.4714 14.5095C17.7373 14.771 18.2893 15.2773 18.2893 16.2112V16.2153Z", fill: "currentColor" }) }));
    });
    var MasterDetailIcon$1 = React$2.forwardRef(function MasterDetailIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "master-detail", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M6 8.5H9M10.5 5.5V19.5M6 11.5H9M13 8.5H18M6 14.5H9M4.5 5.5H20.5V19.5H4.5V5.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var MenuIcon$1 = React$2.forwardRef(function MenuIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "menu", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M6 8.1H19V6.9H6V8.1ZM6 18.1H19V16.9H6V18.1ZM6 13.1H19V11.9H6V13.1Z", fill: "currentColor" }) }));
    });
    var MobileDeviceIcon$1 = React$2.forwardRef(function MobileDeviceIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "mobile-device", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8.1 6.5C8.1 5.7268 8.7268 5.1 9.5 5.1V3.9C8.06406 3.9 6.9 5.06406 6.9 6.5H8.1ZM8.1 18.5V6.5H6.9V18.5H8.1ZM9.5 19.9C8.7268 19.9 8.1 19.2732 8.1 18.5H6.9C6.9 19.9359 8.06406 21.1 9.5 21.1V19.9ZM15.5 19.9H9.5V21.1H15.5V19.9ZM16.9 18.5C16.9 19.2732 16.2732 19.9 15.5 19.9V21.1C16.9359 21.1 18.1 19.9359 18.1 18.5H16.9ZM16.9 6.5V18.5H18.1V6.5H16.9ZM15.5 5.1C16.2732 5.1 16.9 5.7268 16.9 6.5H18.1C18.1 5.06406 16.9359 3.9 15.5 3.9V5.1ZM9.5 5.1H15.5V3.9H9.5V5.1ZM12.9 17.5C12.9 17.7209 12.7209 17.9 12.5 17.9V19.1C13.3837 19.1 14.1 18.3837 14.1 17.5H12.9ZM12.5 17.1C12.7209 17.1 12.9 17.2791 12.9 17.5H14.1C14.1 16.6163 13.3837 15.9 12.5 15.9V17.1ZM12.1 17.5C12.1 17.2791 12.2791 17.1 12.5 17.1V15.9C11.6163 15.9 10.9 16.6163 10.9 17.5H12.1ZM12.5 17.9C12.2791 17.9 12.1 17.7209 12.1 17.5H10.9C10.9 18.3837 11.6163 19.1 12.5 19.1V17.9Z", fill: "currentColor" }) }));
    });
    var MoonIcon$1 = React$2.forwardRef(function MoonIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "moon", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M19.6065 16.1775C18.9417 16.387 18.234 16.5 17.5 16.5C13.634 16.5 10.5 13.366 10.5 9.5C10.5 7.54163 11.3042 5.77109 12.6004 4.50062C12.567 4.50021 12.5335 4.5 12.5 4.5C8.08172 4.5 4.5 8.08172 4.5 12.5C4.5 16.9183 8.08172 20.5 12.5 20.5C15.5924 20.5 18.275 18.7454 19.6065 16.1775Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var OkHandIcon$1 = React$2.forwardRef(function OkHandIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "ok-hand", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M15.9957 11.5C14.8197 10.912 11.9957 9 10.4957 9C8.9957 9 5.17825 11.7674 6 13C7 14.5 9.15134 11.7256 10.4957 12C11.8401 12.2744 13 13.5 13 14.5C13 15.5 11.8401 16.939 10.4957 16.5C9.15134 16.061 8.58665 14.3415 7.4957 14C6.21272 13.5984 5.05843 14.6168 5.5 15.5C5.94157 16.3832 7.10688 17.6006 8.4957 19C9.74229 20.2561 11.9957 21.5 14.9957 20C17.9957 18.5 18.5 16.2498 18.5 13C18.5 11.5 13.7332 5.36875 11.9957 4.5C10.9957 4 10 5 10.9957 6.5C11.614 7.43149 13.5 9.27705 14 10.3751M15.5 8C15.5 8 15.3707 7.5 14.9957 6C14.4957 4 15.9957 3.5 16.4957 4.5C17.1281 5.76491 18.2872 10.9147 18.4957 13", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var OlistIcon$1 = React$2.forwardRef(function OlistIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "olist", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M7.5 18.5V19H8.30902L7.94721 18.2764L7.5 18.5ZM7.5 16.5L7.94721 16.7236L8.30902 16H7.5V16.5ZM7 17.5L6.55279 17.2764L6.44098 17.5L6.55279 17.7236L7 17.5ZM6.5 6.5H7V6H6.5V6.5ZM6 13.5L5.55279 13.2764L5.19098 14H6V13.5ZM7 11.5L7.44721 11.7236L7.80902 11H7V11.5ZM10 8H19V7H10V8ZM10 13H19V12H10V13ZM10 18H19V17H10V18ZM5 19H7.5V18H5V19ZM7.5 16H5V17H7.5V16ZM7.94721 18.2764L7.44721 17.2764L6.55279 17.7236L7.05279 18.7236L7.94721 18.2764ZM7.44721 17.7236L7.94721 16.7236L7.05279 16.2764L6.55279 17.2764L7.44721 17.7236ZM5 7H6.5V6H5V7ZM5 9H6.5V8H5V9ZM6.5 9H8V8H6.5V9ZM6 6.5V8.5H7V6.5H6ZM8 13H6V14H8V13ZM6.44721 13.7236L7.44721 11.7236L6.55279 11.2764L5.55279 13.2764L6.44721 13.7236ZM7 11H5V12H7V11Z", fill: "currentColor" }) }));
    });
    var OverageIcon$1 = React$2.forwardRef(function OverageIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "overage", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M14 5.9H18.5H19.1V6.5V11H17.9V7.94853L12.8485 13H11.1515L17.0515 7.1H14V5.9ZM10.2515 13.9H11.9485H22V15.1L12.95 15.1H7.95L3 15.1V13.9H10.2515ZM8.15148 16L6.07574 18.0757L6.92426 18.9243L9.84853 16H8.15148Z", fill: "currentColor" }) }));
    });
    var PackageIcon$1 = React$2.forwardRef(function PackageIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "package", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 13V22M12.5 13L4.5 8M12.5 13L20.5 8M8.5 5.5L16.5 10.5M4.5 8L12.5 3L20.5 8V17L12.5 22L4.5 17V8Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var PauseIcon$1 = React$2.forwardRef(function PauseIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "pause", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M10.5 7.5H8.5V17.5H10.5V7.5ZM16.5 7.5H14.5V17.5H16.5V7.5Z", fill: "currentColor" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8.5 7.5V6.9H7.9V7.5H8.5ZM10.5 7.5H11.1V6.9H10.5V7.5ZM8.5 17.5H7.9V18.1H8.5V17.5ZM10.5 17.5V18.1H11.1V17.5H10.5ZM14.5 7.5V6.9H13.9V7.5H14.5ZM16.5 7.5H17.1V6.9H16.5V7.5ZM14.5 17.5H13.9V18.1H14.5V17.5ZM16.5 17.5V18.1H17.1V17.5H16.5ZM8.5 8.1H10.5V6.9H8.5V8.1ZM9.1 17.5V7.5H7.9V17.5H9.1ZM10.5 16.9H8.5V18.1H10.5V16.9ZM9.9 7.5V17.5H11.1V7.5H9.9ZM14.5 8.1H16.5V6.9H14.5V8.1ZM15.1 17.5V7.5H13.9V17.5H15.1ZM16.5 16.9H14.5V18.1H16.5V16.9ZM15.9 7.5V17.5H17.1V7.5H15.9Z", fill: "currentColor" })] }));
    });
    var PinIcon$1 = React$2.forwardRef(function PinIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "pin", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M6.5 10.5C6.5 7 9 4.5 12.5 4.5C16 4.5 18.5 7 18.5 10.5C18.5 14 15.5 17.5 12.5 20.5C9.5 17.5 6.5 14 6.5 10.5Z", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M14 10.5C14 11.3284 13.3284 12 12.5 12C11.6716 12 11 11.3284 11 10.5C11 9.67157 11.6716 9 12.5 9C13.3284 9 14 9.67157 14 10.5Z", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var PinRemovedIcon$1 = React$2.forwardRef(function PinRemovedIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "pin-removed", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M12.0757 20.9243L12.5 21.3485L12.9243 20.9243C14.4315 19.417 15.9655 17.7584 17.1242 16.0203C17.5402 15.3963 17.9127 14.7549 18.2192 14.1H16.8785C16.6575 14.5172 16.4051 14.9356 16.1258 15.3547C15.1381 16.8362 13.8436 18.2803 12.5 19.6478C11.1564 18.2803 9.86189 16.8362 8.87423 15.3547C8.59486 14.9356 8.34249 14.5172 8.12154 14.1H6.78084C7.08725 14.7549 7.45976 15.3963 7.87577 16.0203C9.03448 17.7584 10.5685 19.417 12.0757 20.9243ZM19.1 10.5C19.1 10.9701 19.0508 11.4372 18.9594 11.9H17.732C17.8418 11.4297 17.9 10.9627 17.9 10.5C17.9 7.33137 15.6686 5.1 12.5 5.1C9.33137 5.1 7.1 7.33137 7.1 10.5C7.1 10.9627 7.15822 11.4297 7.26799 11.9H6.04056C5.94923 11.4372 5.9 10.9701 5.9 10.5C5.9 6.66863 8.66863 3.9 12.5 3.9C16.3314 3.9 19.1 6.66863 19.1 10.5ZM14.6 10.5C14.6 11.0379 14.3978 11.5285 14.0653 11.9H10.9347C10.6022 11.5285 10.4 11.0379 10.4 10.5C10.4 9.3402 11.3402 8.4 12.5 8.4C13.6598 8.4 14.6 9.3402 14.6 10.5ZM11.6 10.5C11.6 10.0029 12.0029 9.6 12.5 9.6C12.9971 9.6 13.4 10.0029 13.4 10.5C13.4 10.9971 12.9971 11.4 12.5 11.4C12.0029 11.4 11.6 10.9971 11.6 10.5ZM2 13.6H23V12.4H2V13.6Z", fill: "currentColor" }) }));
    });
    var PlayIcon$1 = React$2.forwardRef(function PlayIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "play", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M7.5 18.5V6.5L17.5 12.5L7.5 18.5Z", fill: "currentColor", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var PlugIcon$1 = React$2.forwardRef(function PlugIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "plug", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M13.25 8.5L16.75 5M16.25 11.5L19.75 8M9.25 15.5L5.25 19.5M7.75 14L9.75 12C8.25 10 8.75 9 9.75 8C10.15 7.6 11.25 6.5 11.25 6.5L18.25 13.5C18.25 13.5 17.3825 14.3675 16.75 15C15.75 16 14.75 16.5 12.75 15L10.75 17L7.75 14Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var PresentationIcon$1 = React$2.forwardRef(function PresentationIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "presentation", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 18H5.5V8.5H19.5V18H14.5M10.5 18L9 22M10.5 18H14.5M14.5 18L16 22M4.5 8.5H20.5V6.5H4.5V8.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var PublishIcon$1 = React$2.forwardRef(function PublishIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "publish", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M4.99997 5.50005H20M7.5 14L12.5 9.00003L17.5 14", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 9.00003V20", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var ReadOnlyIcon$1 = React$2.forwardRef(function ReadOnlyIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "read-only", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M15 7L18 10M10 12L7 15L6 19L10 18L13 15M12 10L17 5L20 8L15 13M19 19L5 5", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var RemoveCircleIcon$1 = React$2.forwardRef(function RemoveCircleIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "remove-circle", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8 12.4H17M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var RemoveIcon$1 = React$2.forwardRef(function RemoveIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "remove", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5 12.5H20", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var ResetIcon$1 = React$2.forwardRef(function ResetIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "reset", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M4.56189 13.5L4.14285 13.9294L4.5724 14.3486L4.99144 13.9189L4.56189 13.5ZM9.92427 15.9243L15.9243 9.92427L15.0757 9.07574L9.07574 15.0757L9.92427 15.9243ZM9.07574 9.92426L15.0757 15.9243L15.9243 15.0757L9.92426 9.07574L9.07574 9.92426ZM19.9 12.5C19.9 16.5869 16.5869 19.9 12.5 19.9V21.1C17.2496 21.1 21.1 17.2496 21.1 12.5H19.9ZM5.1 12.5C5.1 8.41309 8.41309 5.1 12.5 5.1V3.9C7.75035 3.9 3.9 7.75035 3.9 12.5H5.1ZM12.5 5.1C16.5869 5.1 19.9 8.41309 19.9 12.5H21.1C21.1 7.75035 17.2496 3.9 12.5 3.9V5.1ZM5.15728 13.4258C5.1195 13.1227 5.1 12.8138 5.1 12.5H3.9C3.9 12.8635 3.92259 13.2221 3.9665 13.5742L5.15728 13.4258ZM12.5 19.9C9.9571 19.9 7.71347 18.6179 6.38048 16.6621L5.38888 17.3379C6.93584 19.6076 9.54355 21.1 12.5 21.1V19.9ZM4.99144 13.9189L7.42955 11.4189L6.57045 10.5811L4.13235 13.0811L4.99144 13.9189ZM4.98094 13.0706L2.41905 10.5706L1.58095 11.4294L4.14285 13.9294L4.98094 13.0706Z", fill: "currentColor" }) }));
    });
    var RestoreIcon$1 = React$2.forwardRef(function RestoreIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "restore", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5.88468 17C7.32466 19.1128 9.75033 20.5 12.5 20.5C16.9183 20.5 20.5 16.9183 20.5 12.5C20.5 8.08172 16.9183 4.5 12.5 4.5C8.08172 4.5 4.5 8.08172 4.5 12.5V13.5M12.5 8V12.5L15.5 15.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M7 11L4.5 13.5L2 11", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var RetrieveIcon$1 = React$2.forwardRef(function RetrieveIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "retrieve", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 10.5L12.5 17.5M4.5 7.5V20.5H20.5V7.5L18.5 4.5H6.5L4.5 7.5Z", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9 14L12.5 10.5L16 14", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M4.5 7.5H20.5", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var RevertIcon$1 = React$2.forwardRef(function RevertIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "revert", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5 9L14.5 9C16.9853 9 19 11.0147 19 13.5C19 15.9853 16.9853 18 14.5 18H5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9 13L5 9L9 5", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var RobotIcon$1 = React$2.forwardRef(function RobotIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "robot", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 15.5V17.5M12.5 8.5V6.5M12.5 6.5C13.3284 6.5 14 5.82843 14 5C14 4.17157 13.3284 3.5 12.5 3.5C11.6716 3.5 11 4.17157 11 5C11 5.82843 11.6716 6.5 12.5 6.5ZM20.5 20.5V19.5C20.5 18.3954 19.6046 17.5 18.5 17.5H6.5C5.39543 17.5 4.5 18.3954 4.5 19.5V20.5H20.5ZM11.5 12C11.5 12.5523 11.0523 13 10.5 13C9.94772 13 9.5 12.5523 9.5 12C9.5 11.4477 9.94772 11 10.5 11C11.0523 11 11.5 11.4477 11.5 12ZM15.5 12C15.5 12.5523 15.0523 13 14.5 13C13.9477 13 13.5 12.5523 13.5 12C13.5 11.4477 13.9477 11 14.5 11C15.0523 11 15.5 11.4477 15.5 12ZM8.5 15.5H16.5C17.6046 15.5 18.5 14.6046 18.5 13.5V10.5C18.5 9.39543 17.6046 8.5 16.5 8.5H8.5C7.39543 8.5 6.5 9.39543 6.5 10.5V13.5C6.5 14.6046 7.39543 15.5 8.5 15.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var RocketIcon$1 = React$2.forwardRef(function RocketIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "rocket", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 20.5L15.5 14M11 9.5L4.5 12.5M9 14C9 14 7.54688 14.9531 6.5 16C5.5 17 4.5 20.5 4.5 20.5C4.5 20.5 8 19.5 9 18.5C10 17.5 11 16 11 16M9 14C9 14 10.1 9.90001 12.5 7.50001C15.5 4.50001 20.5 4.50001 20.5 4.50001C20.5 4.50001 20.5 9.5 17.5 12.5C15.7492 14.2508 11 16 11 16L9 14ZM16.5 10C16.5 10.8284 15.8284 11.5 15 11.5C14.1716 11.5 13.5 10.8284 13.5 10C13.5 9.17157 14.1716 8.5 15 8.5C15.8284 8.5 16.5 9.17157 16.5 10Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var SearchIcon$1 = React$2.forwardRef(function SearchIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "search", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M14.0355 14.0355L20 20M15.5 10.5C15.5 13.2614 13.2614 15.5 10.5 15.5C7.73858 15.5 5.5 13.2614 5.5 10.5C5.5 7.73858 7.73858 5.5 10.5 5.5C13.2614 5.5 15.5 7.73858 15.5 10.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var SelectIcon$1 = React$2.forwardRef(function SelectIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "select", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16.5 15.5L12.5 19.5L8.5 15.5M8.5 9.5L12.5 5.5L16.5 9.5", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var SortIcon$1 = React$2.forwardRef(function SortIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "sort", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8.5 18.5V6M16.5 19V6.5M12 15L8.5 18.5L5 15M13 10L16.5 6.5L20 10", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var SpinnerIcon$1 = React$2.forwardRef(function SpinnerIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "spinner", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M4.5 12.5C4.5 16.9183 8.08172 20.5 12.5 20.5C16.9183 20.5 20.5 16.9183 20.5 12.5C20.5 8.08172 16.9183 4.5 12.5 4.5", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var SplitHorizontalIcon$1 = React$2.forwardRef(function SplitHorizontalIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "split-horizontal", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M19.5 10.5V20.5H5.5V10.5M19.5 10.5H5.5M19.5 10.5V4.5H5.5V10.5M12.5 13V15.5M12.5 18V15.5M12.5 15.5H15M12.5 15.5H10", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var SplitVerticalIcon$1 = React$2.forwardRef(function SplitVerticalIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "split-vertical", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 5.5V19.5M13 12.5H15.5M18 12.5H15.5M15.5 12.5V15M15.5 12.5V10M4.5 5.5H20.5V19.5H4.5V5.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var SquareIcon$2 = React$2.forwardRef(function SquareIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "square", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("rect", { x: 5.5, y: 5.5, width: 14, height: 14, stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var StackCompactIcon$1 = React$2.forwardRef(function StackCompactIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "stack-compact", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5.5 15.5V18.5H19.5V15.5M5.5 15.5H19.5M5.5 15.5V9.5M19.5 15.5V9.5M5.5 9.5V6.5H19.5V9.5M5.5 9.5H19.5M5.5 12.5H19.5", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var StackIcon$1 = React$2.forwardRef(function StackIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "stack", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5.5 12.5H19.5M5.5 18.5H19.5V6.5H5.5V18.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var StarIcon$1 = React$2.forwardRef(function StarIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "star", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M13 4L15.2747 9.8691L21.5595 10.2188L16.6806 14.1959L18.2901 20.2812L13 16.87L7.70993 20.2812L9.31941 14.1959L4.44049 10.2188L10.7253 9.8691L13 4Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var StopIcon$1 = React$2.forwardRef(function StopIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "stop", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("rect", { x: 7.5, y: 7.5, width: 10, height: 10, fill: "currentColor", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var StrikethroughIcon$1 = React$2.forwardRef(function StrikethroughIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "strikethrough", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M12.5656 7.73438C11.0656 7.73438 10.0734 8.48438 10.0734 9.625C10.0734 10.2317 10.3649 10.6613 11.0519 11H8.90358C8.71703 10.6199 8.62813 10.1801 8.62813 9.67188C8.62813 7.75781 10.2297 6.46094 12.6125 6.46094C14.7922 6.46094 16.4172 7.75781 16.5344 9.57812H15.1203C14.925 8.42188 13.9719 7.73438 12.5656 7.73438ZM12.4875 18.2656C10.0969 18.2656 8.44844 17 8.3 15.0547H9.72188C9.89375 16.2344 11.0188 16.9844 12.6203 16.9844C14.1359 16.9844 15.2531 16.1641 15.2531 15.0469C15.2531 14.6375 15.1255 14.292 14.8589 14H16.5912C16.6638 14.266 16.6984 14.5566 16.6984 14.875C16.6984 16.9453 15.0656 18.2656 12.4875 18.2656ZM7 13.1H18V11.9H7V13.1Z", fill: "currentColor" }) }));
    });
    var SunIcon$1 = React$2.forwardRef(function SunIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "sun", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M19 12.5H22M3 12.5H6M12.5 6V3M12.5 22V19M17.3891 7.61091L19.5104 5.48959M5.48959 19.5104L7.61091 17.3891M7.61091 7.61091L5.48959 5.48959M19.5104 19.5104L17.3891 17.3891M16 12.5C16 14.433 14.433 16 12.5 16C10.567 16 9 14.433 9 12.5C9 10.567 10.567 9 12.5 9C14.433 9 16 10.567 16 12.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var SyncIcon$1 = React$2.forwardRef(function SyncIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "sync", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M13.5 4.5H12.5C8.08172 4.5 4.5 8.08172 4.5 12.5C4.5 15.6631 6.33576 18.3975 9 19.6958M11.5 20.5H12.5C16.9183 20.5 20.5 16.9183 20.5 12.5C20.5 9.33688 18.6642 6.60253 16 5.30423", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M14 17.5619L11.5 20.5L14.5 23.0619M11 7.43811L13.5 4.50001L10.5 1.93811", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var TagIcon$1 = React$2.forwardRef(function TagIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "tag", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 20L5 20L5 12.5L12.5 5L20 12.5L12.5 20Z", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M11 15.5C11 16.3284 10.3284 17 9.5 17C8.67157 17 8 16.3284 8 15.5C8 14.6716 8.67157 14 9.5 14C10.3284 14 11 14.6716 11 15.5Z", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var TerminalIcon$1 = React$2.forwardRef(function TerminalIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "terminal", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8.5 9.5L11.5 12.5L8.5 15.5M13 15.5H17M5.5 6.5H19.5V18.5H5.5V6.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var ThLargeIcon$1 = React$2.forwardRef(function ThLargeIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "th-large", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 6.5V12.5M12.5 12.5V18.5M12.5 12.5H20.5M12.5 12.5H4.5M4.5 6.5H20.5V18.5H4.5V6.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var ThListIcon$1 = React$2.forwardRef(function ThListIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "th-list", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9.5 6.5V10.5M9.5 10.5V14.5M9.5 10.5H20.5M9.5 10.5H4.5M9.5 14.5V18.5M9.5 14.5H20.5M9.5 14.5H4.5M4.5 6.5H20.5V18.5H4.5V6.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var TiersIcon$1 = React$2.forwardRef(function TiersIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "tiers", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16.5 14.5L20.5 16.5L12.5 20.5L4.5 16.5L8.5 14.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16.5 10.5L20.5 12.5L12.5 16.5L4.5 12.5L8.5 10.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M20.5 8.5L12.5 12.5L4.5 8.5L12.5 4.5L20.5 8.5Z", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var ToggleArrowRightIcon$1 = React$2.forwardRef(function ToggleArrowRightIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "toggle-arrow-right", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10 16.5V8.5L16 12.5L10 16.5Z", fill: "currentColor" }) }));
    });
    var TokenIcon$1 = React$2.forwardRef(function TokenIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "token", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M17.5711 12.5C17.5711 15.2614 15.3325 17.5 12.5711 17.5M7.57107 12.5C7.57107 9.73858 9.80964 7.5 12.5711 7.5M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var TransferIcon$1 = React$2.forwardRef(function TransferIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "transfer", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M19.5 16.5H6M5.5 8.5L19 8.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16 13L19.5 16.5L16 20M9 12L5.5 8.5L9 5", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var TranslateIcon$1 = React$2.forwardRef(function TranslateIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "translate", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M9.4 5.4H4V6.6H13.2189C13.1612 6.78478 13.0895 6.99578 13.0025 7.22211C12.7032 8.00031 12.2402 8.91125 11.5757 9.57574L10 11.1515L9.42426 10.5757C8.72102 9.8725 8.25297 9.16987 7.96199 8.64611C7.81668 8.38455 7.71617 8.16874 7.65305 8.02146C7.62151 7.94787 7.59937 7.89154 7.5857 7.85534C7.57886 7.83725 7.57415 7.8242 7.57144 7.81657L7.56886 7.80922C7.56886 7.80922 7.56921 7.81026 7 8C6.43079 8.18974 6.43091 8.19009 6.43091 8.19009L6.43133 8.19135L6.43206 8.19351L6.4341 8.19948L6.44052 8.21786C6.44587 8.23292 6.45336 8.25357 6.46313 8.27942C6.48266 8.33112 6.5113 8.40369 6.55008 8.49416C6.62758 8.67501 6.74582 8.92795 6.91301 9.22889C7.24703 9.83013 7.77898 10.6275 8.57574 11.4243L9.15147 12L4.57964 16.5718L4.57655 16.5749L4.57577 16.5757L5.4243 17.4242L5.42688 17.4216L10.0368 12.8117L12.6159 14.9609L13.3841 14.0391L10.8888 11.9597L12.4243 10.4243C13.2598 9.58875 13.7968 8.49969 14.1225 7.65289C14.2818 7.23863 14.395 6.87072 14.4696 6.6H16V5.4H10.6V4H9.4V5.4ZM17.4405 10L21.553 19.7672H20.2509L19.1279 17.1H14.8721L13.7491 19.7672H12.447L16.5595 10H17.4405ZM15.3773 15.9H18.6227L17 12.0462L15.3773 15.9Z", fill: "currentColor" }) }));
    });
    var TrashIcon$2 = React$2.forwardRef(function TrashIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "trash", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5 6.5H20M10 6.5V4.5C10 3.94772 10.4477 3.5 11 3.5H14C14.5523 3.5 15 3.94772 15 4.5V6.5M12.5 9V17M15.5 9L15 17M9.5 9L10 17M18.5 6.5L17.571 18.5767C17.5309 19.0977 17.0965 19.5 16.574 19.5H8.42603C7.90349 19.5 7.46905 19.0977 7.42898 18.5767L6.5 6.5H18.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var TrendUpwardIcon$1 = React$2.forwardRef(function TrendUpwardIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "trend-upward", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M4.5 18.5L11.5 10.5L13.5 14.5L20.5 6.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M20.5 11V6.5H16", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var TriangleOutlineIcon$1 = React$2.forwardRef(function TriangleOutlineIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "triangle-outline", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M20.5 18.5H4.5L12.5 5.5L20.5 18.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var TrolleyIcon$1 = React$2.forwardRef(function TrolleyIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "trolley", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8 17.5L5.81763 6.26772C5.71013 5.81757 5.30779 5.5 4.84498 5.5H3M8 17.5H17M8 17.5C8.82843 17.5 9.5 18.1716 9.5 19C9.5 19.8284 8.82843 20.5 8 20.5C7.17157 20.5 6.5 19.8284 6.5 19C6.5 18.1716 7.17157 17.5 8 17.5ZM17 17.5C17.8284 17.5 18.5 18.1716 18.5 19C18.5 19.8284 17.8284 20.5 17 20.5C16.1716 20.5 15.5 19.8284 15.5 19C15.5 18.1716 16.1716 17.5 17 17.5ZM7.78357 14.5H17.5L19 7.5H6", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var TruncateIcon$1 = React$2.forwardRef(function TruncateIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "truncate", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5 12.5H20M8.5 19.5L12.5 15.5L16.5 19.5M16.5 5.5L12.5 9.5L8.5 5.5", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var UlistIcon$1 = React$2.forwardRef(function UlistIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "ulist", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10 7.5H19M10 17.5H19M10 12.5H19M7.10153 17.5001C7.10153 17.8323 6.83221 18.1016 6.5 18.1016C6.16778 18.1016 5.89847 17.8323 5.89847 17.5001C5.89847 17.1678 6.16778 16.8985 6.5 16.8985C6.83221 16.8985 7.10153 17.1678 7.10153 17.5001ZM7.10153 7.5C7.10153 7.83221 6.83221 8.10153 6.5 8.10153C6.16778 8.10153 5.89847 7.83221 5.89847 7.5C5.89847 7.16778 6.16778 6.89847 6.5 6.89847C6.83221 6.89847 7.10153 7.16778 7.10153 7.5ZM7.10153 12.5C7.10153 12.8322 6.83221 13.1015 6.5 13.1015C6.16778 13.1015 5.89847 12.8322 5.89847 12.5C5.89847 12.1678 6.16778 11.8985 6.5 11.8985C6.83221 11.8985 7.10153 12.1678 7.10153 12.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var UnderlineIcon$1 = React$2.forwardRef(function UnderlineIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "underline", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M8.17 7.11409H9.52791V14.1677C9.52791 15.8123 10.6067 17.0042 12.4927 17.0042C14.3787 17.0042 15.4574 15.8123 15.4574 14.1677V7.11409H16.8154V14.2582C16.8154 16.5817 15.1934 18.2565 12.4927 18.2565C9.79195 18.2565 8.17 16.5817 8.17 14.2582V7.11409ZM7 21.1H18V19.9H7V21.1Z", fill: "currentColor" }) }));
    });
    var UndoIcon$1 = React$2.forwardRef(function UndoIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "undo", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5.88468 17C7.32466 19.1128 9.75033 20.5 12.5 20.5C16.9183 20.5 20.5 16.9183 20.5 12.5C20.5 8.08172 16.9183 4.5 12.5 4.5C8.08172 4.5 4.5 8.08172 4.5 12.5V13.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M7 11L4.5 13.5L2 11", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var UnknownIcon$1 = React$2.forwardRef(function UnknownIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "unknown", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 13C12.5 11 14 11.5 14 10C14 9.34375 13.5 8.5 12.5 8.5C11.5 8.5 11 9 10.5 9.5M12.5 16V14.5M5.5 5.5H19.5V19.5H5.5V5.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var UnlockIcon$1 = React$2.forwardRef(function UnlockIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "unlock", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M7.5 11.5H17.5V19.5H7.5V11.5Z", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M3.5 11.5V8.5C3.5 6.5 5 5.5 6.5 5.5C8 5.5 9.5 6.5 9.5 8.5V11.5", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var UnpublishIcon$1 = React$2.forwardRef(function UnpublishIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "unpublish", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5 19.5H20M12.5 16V4.99998", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M17.5 11L12.5 16L7.5 11", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var UploadIcon$1 = React$2.forwardRef(function UploadIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "upload", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 6.00003V15.5M5.5 15.5H19.5V19.5H5.5V15.5Z", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M7.5 11L12.5 6.00003L17.5 11", stroke: "currentColor", strokeWidth: 1.2 })] }));
    });
    var UserIcon$1 = React$2.forwardRef(function UserIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "user", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8 14.5C7 15 5.5 16 5.5 19.5H19.5C19.5 16 18.3416 15.1708 17 14.5C16 14 14 14 14 12.5C14 11 15 10.25 15 8.25C15 6.25 14 5.25 12.5 5.25C11 5.25 10 6.25 10 8.25C10 10.25 11 11 11 12.5C11 14 9 14 8 14.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var UsersIcon$1 = React$2.forwardRef(function UsersIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "users", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M17.5 18.5H21.5C21.5 15 20.8416 14.1708 19.5 13.5C18.5 13 16.5 12.5 16.5 11C16.5 9.5 17.5 9 17.5 7C17.5 5 16.5 4 15 4C13.6628 4 12.723 4.79472 12.5347 6.38415M4.5 20.5C4.5 17 5.5 16 6.5 15.5C7.5 15 9.5 14.5 9.5 13C9.5 11.5 8.5 11 8.5 9C8.5 7 9.5 6 11 6C12.5 6 13.5 7 13.5 9C13.5 11 12.5 11.5 12.5 13C12.5 14.5 14.5 15 15.5 15.5C16.8416 16.1708 17.5 17 17.5 20.5H4.5Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var WarningFilledIcon$1 = React$2.forwardRef(function WarningFilledIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "warning-filled", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M14.7728 5.35558C13.7822 3.57248 11.2178 3.57247 10.2272 5.35558L3.62622 17.2373C2.66345 18.9703 3.91657 21.1 5.89903 21.1H19.101C21.0834 21.1 22.3365 18.9703 21.3738 17.2373L14.7728 5.35558ZM13 16V17.5H12V16H13ZM12 10.4999V14.5H13V10.4999H12Z", fill: "currentColor" }) }));
    });
    var WarningOutlineIcon$1 = React$2.forwardRef(function WarningOutlineIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", _objectSpread(_objectSpread({ "data-sanity-icon": "warning-outline", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref }, props), {}, { children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 10V14M12.5 17V15.5M14.2483 5.64697L20.8493 17.5287C21.5899 18.8618 20.6259 20.5 19.101 20.5H5.89903C4.37406 20.5 3.41013 18.8618 4.15072 17.5287L10.7517 5.64697C11.5137 4.27535 13.4863 4.27535 14.2483 5.64697Z", stroke: "currentColor", strokeWidth: 1.2 }) }));
    });
    var icons$1 = { "access-denied": AccessDeniedIcon$1, activity: ActivityIcon$1, "add-circle": AddCircleIcon$1, add: AddIcon$1, api: ApiIcon$1, archive: ArchiveIcon$1, "arrow-down": ArrowDownIcon$1, "arrow-left": ArrowLeftIcon$1, "arrow-right": ArrowRightIcon$1, "arrow-top-right": ArrowTopRightIcon$1, "arrow-up": ArrowUpIcon$1, "bar-chart": BarChartIcon$1, basket: BasketIcon$1, bell: BellIcon$1, bill: BillIcon$1, "binary-document": BinaryDocumentIcon$1, "block-element": BlockElementIcon$1, blockquote: BlockquoteIcon$1, bold: BoldIcon$1, book: BookIcon$1, bottle: BottleIcon$1, "bulb-filled": BulbFilledIcon$1, "bulb-outline": BulbOutlineIcon$1, calendar: CalendarIcon$2, case: CaseIcon$1, "chart-upward": ChartUpwardIcon$1, "checkmark-circle": CheckmarkCircleIcon$1, checkmark: CheckmarkIcon$1, "chevron-down": ChevronDownIcon$1, "chevron-left": ChevronLeftIcon$1, "chevron-right": ChevronRightIcon$1, "chevron-up": ChevronUpIcon$1, circle: CircleIcon$2, clipboard: ClipboardIcon$1, "clipboard-image": ClipboardImageIcon$1, clock: ClockIcon$1, "close-circle": CloseCircleIcon$1, close: CloseIcon$1, "code-block": CodeBlockIcon$1, code: CodeIcon$1, cog: CogIcon$1, collapse: CollapseIcon$1, comment: CommentIcon$1, component: ComponentIcon$1, compose: ComposeIcon$1, controls: ControlsIcon$1, copy: CopyIcon$1, "credit-card": CreditCardIcon$1, crop: CropIcon$1, dashboard: DashboardIcon$1, database: DatabaseIcon$1, desktop: DesktopIcon$2, document: DocumentIcon$1, "document-pdf": DocumentPdfIcon$1, "document-remove": DocumentRemoveIcon$1, "document-sheet": DocumentSheetIcon$1, "document-text": DocumentTextIcon$1, "document-video": DocumentVideoIcon$1, "document-word": DocumentWordIcon$1, "document-zip": DocumentZipIcon$1, documents: DocumentsIcon$1, dot: DotIcon$1, "double-chevron-down": DoubleChevronDownIcon$1, "double-chevron-left": DoubleChevronLeftIcon$1, "double-chevron-right": DoubleChevronRightIcon$1, "double-chevron-up": DoubleChevronUpIcon$1, download: DownloadIcon$1, "drag-handle": DragHandleIcon$1, drop: DropIcon$1, "earth-americas": EarthAmericasIcon$1, "earth-globe": EarthGlobeIcon$1, edit: EditIcon$1, "ellipsis-horizontal": EllipsisHorizontalIcon$1, "ellipsis-vertical": EllipsisVerticalIcon$1, envelope: EnvelopeIcon$1, equal: EqualIcon$1, "error-filled": ErrorFilledIcon$1, "error-outline": ErrorOutlineIcon$1, expand: ExpandIcon$1, "eye-closed": EyeClosedIcon$1, "eye-open": EyeOpenIcon$1, filter: FilterIcon$1, folder: FolderIcon$1, generate: GenerateIcon$1, "heart-filled": HeartFilledIcon$1, heart: HeartIcon$1, "help-circle": HelpCircleIcon$1, home: HomeIcon$1, "ice-cream": IceCreamIcon$1, image: ImageIcon$1, "image-remove": ImageRemoveIcon$1, images: ImagesIcon$1, "info-filled": InfoFilledIcon$1, "info-outline": InfoOutlineIcon$1, "inline-element": InlineElementIcon$1, inline: InlineIcon$1, "insert-above": InsertAboveIcon$1, "insert-below": InsertBelowIcon$1, italic: ItalicIcon$1, joystick: JoystickIcon$1, launch: LaunchIcon$1, leave: LeaveIcon$1, lemon: LemonIcon$1, link: LinkIcon$2, "link-removed": LinkRemovedIcon$1, lock: LockIcon$1, "logo-js": LogoJsIcon$1, "logo-ts": LogoTsIcon$1, "master-detail": MasterDetailIcon$1, menu: MenuIcon$1, "mobile-device": MobileDeviceIcon$1, moon: MoonIcon$1, "ok-hand": OkHandIcon$1, olist: OlistIcon$1, overage: OverageIcon$1, package: PackageIcon$1, pause: PauseIcon$1, pin: PinIcon$1, "pin-removed": PinRemovedIcon$1, play: PlayIcon$1, plug: PlugIcon$1, presentation: PresentationIcon$1, publish: PublishIcon$1, "read-only": ReadOnlyIcon$1, "remove-circle": RemoveCircleIcon$1, remove: RemoveIcon$1, reset: ResetIcon$1, restore: RestoreIcon$1, retrieve: RetrieveIcon$1, revert: RevertIcon$1, robot: RobotIcon$1, rocket: RocketIcon$1, search: SearchIcon$1, select: SelectIcon$1, sort: SortIcon$1, spinner: SpinnerIcon$1, "split-horizontal": SplitHorizontalIcon$1, "split-vertical": SplitVerticalIcon$1, square: SquareIcon$2, "stack-compact": StackCompactIcon$1, stack: StackIcon$1, star: StarIcon$1, stop: StopIcon$1, strikethrough: StrikethroughIcon$1, sun: SunIcon$1, sync: SyncIcon$1, tag: TagIcon$1, terminal: TerminalIcon$1, "th-large": ThLargeIcon$1, "th-list": ThListIcon$1, tiers: TiersIcon$1, "toggle-arrow-right": ToggleArrowRightIcon$1, token: TokenIcon$1, transfer: TransferIcon$1, translate: TranslateIcon$1, trash: TrashIcon$2, "trend-upward": TrendUpwardIcon$1, "triangle-outline": TriangleOutlineIcon$1, trolley: TrolleyIcon$1, truncate: TruncateIcon$1, ulist: UlistIcon$1, underline: UnderlineIcon$1, undo: UndoIcon$1, unknown: UnknownIcon$1, unlock: UnlockIcon$1, unpublish: UnpublishIcon$1, upload: UploadIcon$1, user: UserIcon$1, users: UsersIcon$1, "warning-filled": WarningFilledIcon$1, "warning-outline": WarningOutlineIcon$1 };
    React$2.forwardRef(function Icon2(props, ref) {
      const { symbol } = props, restProps = _objectWithoutProperties(props, _excluded);
      const iconComponent = icons$1[symbol];
      if (!iconComponent) {
        return null;
      }
      return React$2.createElement(iconComponent, _objectSpread(_objectSpread({}, restProps), {}, { ref }));
    });
    var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
    function getDefaultExportFromCjs(x2) {
      return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
    }
    var reactIs$3 = { exports: {} };
    var reactIs_production_min$2 = {};
    var hasRequiredReactIs_production_min$2;
    function requireReactIs_production_min$2() {
      if (hasRequiredReactIs_production_min$2)
        return reactIs_production_min$2;
      hasRequiredReactIs_production_min$2 = 1;
      var b2 = Symbol.for("react.element"), c = Symbol.for("react.portal"), d = Symbol.for("react.fragment"), e = Symbol.for("react.strict_mode"), f = Symbol.for("react.profiler"), g2 = Symbol.for("react.provider"), h2 = Symbol.for("react.context"), k2 = Symbol.for("react.server_context"), l2 = Symbol.for("react.forward_ref"), m2 = Symbol.for("react.suspense"), n = Symbol.for("react.suspense_list"), p = Symbol.for("react.memo"), q2 = Symbol.for("react.lazy"), t = Symbol.for("react.offscreen"), u;
      u = Symbol.for("react.module.reference");
      function v2(a) {
        if ("object" === typeof a && null !== a) {
          var r = a.$$typeof;
          switch (r) {
            case b2:
              switch (a = a.type, a) {
                case d:
                case f:
                case e:
                case m2:
                case n:
                  return a;
                default:
                  switch (a = a && a.$$typeof, a) {
                    case k2:
                    case h2:
                    case l2:
                    case q2:
                    case p:
                    case g2:
                      return a;
                    default:
                      return r;
                  }
              }
            case c:
              return r;
          }
        }
      }
      reactIs_production_min$2.ContextConsumer = h2;
      reactIs_production_min$2.ContextProvider = g2;
      reactIs_production_min$2.Element = b2;
      reactIs_production_min$2.ForwardRef = l2;
      reactIs_production_min$2.Fragment = d;
      reactIs_production_min$2.Lazy = q2;
      reactIs_production_min$2.Memo = p;
      reactIs_production_min$2.Portal = c;
      reactIs_production_min$2.Profiler = f;
      reactIs_production_min$2.StrictMode = e;
      reactIs_production_min$2.Suspense = m2;
      reactIs_production_min$2.SuspenseList = n;
      reactIs_production_min$2.isAsyncMode = function() {
        return false;
      };
      reactIs_production_min$2.isConcurrentMode = function() {
        return false;
      };
      reactIs_production_min$2.isContextConsumer = function(a) {
        return v2(a) === h2;
      };
      reactIs_production_min$2.isContextProvider = function(a) {
        return v2(a) === g2;
      };
      reactIs_production_min$2.isElement = function(a) {
        return "object" === typeof a && null !== a && a.$$typeof === b2;
      };
      reactIs_production_min$2.isForwardRef = function(a) {
        return v2(a) === l2;
      };
      reactIs_production_min$2.isFragment = function(a) {
        return v2(a) === d;
      };
      reactIs_production_min$2.isLazy = function(a) {
        return v2(a) === q2;
      };
      reactIs_production_min$2.isMemo = function(a) {
        return v2(a) === p;
      };
      reactIs_production_min$2.isPortal = function(a) {
        return v2(a) === c;
      };
      reactIs_production_min$2.isProfiler = function(a) {
        return v2(a) === f;
      };
      reactIs_production_min$2.isStrictMode = function(a) {
        return v2(a) === e;
      };
      reactIs_production_min$2.isSuspense = function(a) {
        return v2(a) === m2;
      };
      reactIs_production_min$2.isSuspenseList = function(a) {
        return v2(a) === n;
      };
      reactIs_production_min$2.isValidElementType = function(a) {
        return "string" === typeof a || "function" === typeof a || a === d || a === f || a === e || a === m2 || a === n || a === t || "object" === typeof a && null !== a && (a.$$typeof === q2 || a.$$typeof === p || a.$$typeof === g2 || a.$$typeof === h2 || a.$$typeof === l2 || a.$$typeof === u || void 0 !== a.getModuleId) ? true : false;
      };
      reactIs_production_min$2.typeOf = v2;
      return reactIs_production_min$2;
    }
    var reactIs_development$2 = {};
    var hasRequiredReactIs_development$2;
    function requireReactIs_development$2() {
      if (hasRequiredReactIs_development$2)
        return reactIs_development$2;
      hasRequiredReactIs_development$2 = 1;
      if (process.env.NODE_ENV !== "production") {
        (function() {
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                    case REACT_SUSPENSE_LIST_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_SERVER_CONTEXT_TYPE:
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal2 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          var hasWarnedAboutDeprecatedIsConcurrentMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isConcurrentMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                hasWarnedAboutDeprecatedIsConcurrentMode = true;
                console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement2(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          function isSuspenseList(object) {
            return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
          }
          reactIs_development$2.ContextConsumer = ContextConsumer;
          reactIs_development$2.ContextProvider = ContextProvider;
          reactIs_development$2.Element = Element2;
          reactIs_development$2.ForwardRef = ForwardRef;
          reactIs_development$2.Fragment = Fragment;
          reactIs_development$2.Lazy = Lazy;
          reactIs_development$2.Memo = Memo;
          reactIs_development$2.Portal = Portal2;
          reactIs_development$2.Profiler = Profiler;
          reactIs_development$2.StrictMode = StrictMode;
          reactIs_development$2.Suspense = Suspense;
          reactIs_development$2.SuspenseList = SuspenseList;
          reactIs_development$2.isAsyncMode = isAsyncMode;
          reactIs_development$2.isConcurrentMode = isConcurrentMode;
          reactIs_development$2.isContextConsumer = isContextConsumer;
          reactIs_development$2.isContextProvider = isContextProvider;
          reactIs_development$2.isElement = isElement2;
          reactIs_development$2.isForwardRef = isForwardRef;
          reactIs_development$2.isFragment = isFragment;
          reactIs_development$2.isLazy = isLazy;
          reactIs_development$2.isMemo = isMemo;
          reactIs_development$2.isPortal = isPortal;
          reactIs_development$2.isProfiler = isProfiler;
          reactIs_development$2.isStrictMode = isStrictMode;
          reactIs_development$2.isSuspense = isSuspense;
          reactIs_development$2.isSuspenseList = isSuspenseList;
          reactIs_development$2.isValidElementType = isValidElementType;
          reactIs_development$2.typeOf = typeOf;
        })();
      }
      return reactIs_development$2;
    }
    if (process.env.NODE_ENV === "production") {
      reactIs$3.exports = requireReactIs_production_min$2();
    } else {
      reactIs$3.exports = requireReactIs_development$2();
    }
    var reactIsExports$1 = reactIs$3.exports;
    var ReactIs$1 = /* @__PURE__ */ getDefaultExportFromCjs(reactIsExports$1);
    function stylis_min(W2) {
      function M2(d, c, e, h2, a) {
        for (var m2 = 0, b2 = 0, v2 = 0, n = 0, q2, g2, x2 = 0, K2 = 0, k2, u = k2 = q2 = 0, l2 = 0, r = 0, I2 = 0, t = 0, B3 = e.length, J2 = B3 - 1, y2, f = "", p = "", F3 = "", G3 = "", C2; l2 < B3; ) {
          g2 = e.charCodeAt(l2);
          l2 === J2 && 0 !== b2 + n + v2 + m2 && (0 !== b2 && (g2 = 47 === b2 ? 10 : 47), n = v2 = m2 = 0, B3++, J2++);
          if (0 === b2 + n + v2 + m2) {
            if (l2 === J2 && (0 < r && (f = f.replace(N2, "")), 0 < f.trim().length)) {
              switch (g2) {
                case 32:
                case 9:
                case 59:
                case 13:
                case 10:
                  break;
                default:
                  f += e.charAt(l2);
              }
              g2 = 59;
            }
            switch (g2) {
              case 123:
                f = f.trim();
                q2 = f.charCodeAt(0);
                k2 = 1;
                for (t = ++l2; l2 < B3; ) {
                  switch (g2 = e.charCodeAt(l2)) {
                    case 123:
                      k2++;
                      break;
                    case 125:
                      k2--;
                      break;
                    case 47:
                      switch (g2 = e.charCodeAt(l2 + 1)) {
                        case 42:
                        case 47:
                          a: {
                            for (u = l2 + 1; u < J2; ++u) {
                              switch (e.charCodeAt(u)) {
                                case 47:
                                  if (42 === g2 && 42 === e.charCodeAt(u - 1) && l2 + 2 !== u) {
                                    l2 = u + 1;
                                    break a;
                                  }
                                  break;
                                case 10:
                                  if (47 === g2) {
                                    l2 = u + 1;
                                    break a;
                                  }
                              }
                            }
                            l2 = u;
                          }
                      }
                      break;
                    case 91:
                      g2++;
                    case 40:
                      g2++;
                    case 34:
                    case 39:
                      for (; l2++ < J2 && e.charCodeAt(l2) !== g2; ) {
                      }
                  }
                  if (0 === k2)
                    break;
                  l2++;
                }
                k2 = e.substring(t, l2);
                0 === q2 && (q2 = (f = f.replace(ca, "").trim()).charCodeAt(0));
                switch (q2) {
                  case 64:
                    0 < r && (f = f.replace(N2, ""));
                    g2 = f.charCodeAt(1);
                    switch (g2) {
                      case 100:
                      case 109:
                      case 115:
                      case 45:
                        r = c;
                        break;
                      default:
                        r = O2;
                    }
                    k2 = M2(c, r, k2, g2, a + 1);
                    t = k2.length;
                    0 < A && (r = X2(O2, f, I2), C2 = H2(3, k2, r, c, D2, z2, t, g2, a, h2), f = r.join(""), void 0 !== C2 && 0 === (t = (k2 = C2.trim()).length) && (g2 = 0, k2 = ""));
                    if (0 < t)
                      switch (g2) {
                        case 115:
                          f = f.replace(da, ea);
                        case 100:
                        case 109:
                        case 45:
                          k2 = f + "{" + k2 + "}";
                          break;
                        case 107:
                          f = f.replace(fa, "$1 $2");
                          k2 = f + "{" + k2 + "}";
                          k2 = 1 === w2 || 2 === w2 && L2("@" + k2, 3) ? "@-webkit-" + k2 + "@" + k2 : "@" + k2;
                          break;
                        default:
                          k2 = f + k2, 112 === h2 && (k2 = (p += k2, ""));
                      }
                    else
                      k2 = "";
                    break;
                  default:
                    k2 = M2(c, X2(c, f, I2), k2, h2, a + 1);
                }
                F3 += k2;
                k2 = I2 = r = u = q2 = 0;
                f = "";
                g2 = e.charCodeAt(++l2);
                break;
              case 125:
              case 59:
                f = (0 < r ? f.replace(N2, "") : f).trim();
                if (1 < (t = f.length))
                  switch (0 === u && (q2 = f.charCodeAt(0), 45 === q2 || 96 < q2 && 123 > q2) && (t = (f = f.replace(" ", ":")).length), 0 < A && void 0 !== (C2 = H2(1, f, c, d, D2, z2, p.length, h2, a, h2)) && 0 === (t = (f = C2.trim()).length) && (f = "\0\0"), q2 = f.charCodeAt(0), g2 = f.charCodeAt(1), q2) {
                    case 0:
                      break;
                    case 64:
                      if (105 === g2 || 99 === g2) {
                        G3 += f + e.charAt(l2);
                        break;
                      }
                    default:
                      58 !== f.charCodeAt(t - 1) && (p += P2(f, q2, g2, f.charCodeAt(2)));
                  }
                I2 = r = u = q2 = 0;
                f = "";
                g2 = e.charCodeAt(++l2);
            }
          }
          switch (g2) {
            case 13:
            case 10:
              47 === b2 ? b2 = 0 : 0 === 1 + q2 && 107 !== h2 && 0 < f.length && (r = 1, f += "\0");
              0 < A * Y2 && H2(0, f, c, d, D2, z2, p.length, h2, a, h2);
              z2 = 1;
              D2++;
              break;
            case 59:
            case 125:
              if (0 === b2 + n + v2 + m2) {
                z2++;
                break;
              }
            default:
              z2++;
              y2 = e.charAt(l2);
              switch (g2) {
                case 9:
                case 32:
                  if (0 === n + m2 + b2)
                    switch (x2) {
                      case 44:
                      case 58:
                      case 9:
                      case 32:
                        y2 = "";
                        break;
                      default:
                        32 !== g2 && (y2 = " ");
                    }
                  break;
                case 0:
                  y2 = "\\0";
                  break;
                case 12:
                  y2 = "\\f";
                  break;
                case 11:
                  y2 = "\\v";
                  break;
                case 38:
                  0 === n + b2 + m2 && (r = I2 = 1, y2 = "\f" + y2);
                  break;
                case 108:
                  if (0 === n + b2 + m2 + E2 && 0 < u)
                    switch (l2 - u) {
                      case 2:
                        112 === x2 && 58 === e.charCodeAt(l2 - 3) && (E2 = x2);
                      case 8:
                        111 === K2 && (E2 = K2);
                    }
                  break;
                case 58:
                  0 === n + b2 + m2 && (u = l2);
                  break;
                case 44:
                  0 === b2 + v2 + n + m2 && (r = 1, y2 += "\r");
                  break;
                case 34:
                case 39:
                  0 === b2 && (n = n === g2 ? 0 : 0 === n ? g2 : n);
                  break;
                case 91:
                  0 === n + b2 + v2 && m2++;
                  break;
                case 93:
                  0 === n + b2 + v2 && m2--;
                  break;
                case 41:
                  0 === n + b2 + m2 && v2--;
                  break;
                case 40:
                  if (0 === n + b2 + m2) {
                    if (0 === q2)
                      switch (2 * x2 + 3 * K2) {
                        case 533:
                          break;
                        default:
                          q2 = 1;
                      }
                    v2++;
                  }
                  break;
                case 64:
                  0 === b2 + v2 + n + m2 + u + k2 && (k2 = 1);
                  break;
                case 42:
                case 47:
                  if (!(0 < n + m2 + v2))
                    switch (b2) {
                      case 0:
                        switch (2 * g2 + 3 * e.charCodeAt(l2 + 1)) {
                          case 235:
                            b2 = 47;
                            break;
                          case 220:
                            t = l2, b2 = 42;
                        }
                        break;
                      case 42:
                        47 === g2 && 42 === x2 && t + 2 !== l2 && (33 === e.charCodeAt(t + 2) && (p += e.substring(t, l2 + 1)), y2 = "", b2 = 0);
                    }
              }
              0 === b2 && (f += y2);
          }
          K2 = x2;
          x2 = g2;
          l2++;
        }
        t = p.length;
        if (0 < t) {
          r = c;
          if (0 < A && (C2 = H2(2, p, r, d, D2, z2, t, h2, a, h2), void 0 !== C2 && 0 === (p = C2).length))
            return G3 + p + F3;
          p = r.join(",") + "{" + p + "}";
          if (0 !== w2 * E2) {
            2 !== w2 || L2(p, 2) || (E2 = 0);
            switch (E2) {
              case 111:
                p = p.replace(ha, ":-moz-$1") + p;
                break;
              case 112:
                p = p.replace(Q2, "::-webkit-input-$1") + p.replace(Q2, "::-moz-$1") + p.replace(Q2, ":-ms-input-$1") + p;
            }
            E2 = 0;
          }
        }
        return G3 + p + F3;
      }
      function X2(d, c, e) {
        var h2 = c.trim().split(ia);
        c = h2;
        var a = h2.length, m2 = d.length;
        switch (m2) {
          case 0:
          case 1:
            var b2 = 0;
            for (d = 0 === m2 ? "" : d[0] + " "; b2 < a; ++b2) {
              c[b2] = Z2(d, c[b2], e).trim();
            }
            break;
          default:
            var v2 = b2 = 0;
            for (c = []; b2 < a; ++b2) {
              for (var n = 0; n < m2; ++n) {
                c[v2++] = Z2(d[n] + " ", h2[b2], e).trim();
              }
            }
        }
        return c;
      }
      function Z2(d, c, e) {
        var h2 = c.charCodeAt(0);
        33 > h2 && (h2 = (c = c.trim()).charCodeAt(0));
        switch (h2) {
          case 38:
            return c.replace(F2, "$1" + d.trim());
          case 58:
            return d.trim() + c.replace(F2, "$1" + d.trim());
          default:
            if (0 < 1 * e && 0 < c.indexOf("\f"))
              return c.replace(F2, (58 === d.charCodeAt(0) ? "" : "$1") + d.trim());
        }
        return d + c;
      }
      function P2(d, c, e, h2) {
        var a = d + ";", m2 = 2 * c + 3 * e + 4 * h2;
        if (944 === m2) {
          d = a.indexOf(":", 9) + 1;
          var b2 = a.substring(d, a.length - 1).trim();
          b2 = a.substring(0, d).trim() + b2 + ";";
          return 1 === w2 || 2 === w2 && L2(b2, 1) ? "-webkit-" + b2 + b2 : b2;
        }
        if (0 === w2 || 2 === w2 && !L2(a, 1))
          return a;
        switch (m2) {
          case 1015:
            return 97 === a.charCodeAt(10) ? "-webkit-" + a + a : a;
          case 951:
            return 116 === a.charCodeAt(3) ? "-webkit-" + a + a : a;
          case 963:
            return 110 === a.charCodeAt(5) ? "-webkit-" + a + a : a;
          case 1009:
            if (100 !== a.charCodeAt(4))
              break;
          case 969:
          case 942:
            return "-webkit-" + a + a;
          case 978:
            return "-webkit-" + a + "-moz-" + a + a;
          case 1019:
          case 983:
            return "-webkit-" + a + "-moz-" + a + "-ms-" + a + a;
          case 883:
            if (45 === a.charCodeAt(8))
              return "-webkit-" + a + a;
            if (0 < a.indexOf("image-set(", 11))
              return a.replace(ja, "$1-webkit-$2") + a;
            break;
          case 932:
            if (45 === a.charCodeAt(4))
              switch (a.charCodeAt(5)) {
                case 103:
                  return "-webkit-box-" + a.replace("-grow", "") + "-webkit-" + a + "-ms-" + a.replace("grow", "positive") + a;
                case 115:
                  return "-webkit-" + a + "-ms-" + a.replace("shrink", "negative") + a;
                case 98:
                  return "-webkit-" + a + "-ms-" + a.replace("basis", "preferred-size") + a;
              }
            return "-webkit-" + a + "-ms-" + a + a;
          case 964:
            return "-webkit-" + a + "-ms-flex-" + a + a;
          case 1023:
            if (99 !== a.charCodeAt(8))
              break;
            b2 = a.substring(a.indexOf(":", 15)).replace("flex-", "").replace("space-between", "justify");
            return "-webkit-box-pack" + b2 + "-webkit-" + a + "-ms-flex-pack" + b2 + a;
          case 1005:
            return ka.test(a) ? a.replace(aa, ":-webkit-") + a.replace(aa, ":-moz-") + a : a;
          case 1e3:
            b2 = a.substring(13).trim();
            c = b2.indexOf("-") + 1;
            switch (b2.charCodeAt(0) + b2.charCodeAt(c)) {
              case 226:
                b2 = a.replace(G2, "tb");
                break;
              case 232:
                b2 = a.replace(G2, "tb-rl");
                break;
              case 220:
                b2 = a.replace(G2, "lr");
                break;
              default:
                return a;
            }
            return "-webkit-" + a + "-ms-" + b2 + a;
          case 1017:
            if (-1 === a.indexOf("sticky", 9))
              break;
          case 975:
            c = (a = d).length - 10;
            b2 = (33 === a.charCodeAt(c) ? a.substring(0, c) : a).substring(d.indexOf(":", 7) + 1).trim();
            switch (m2 = b2.charCodeAt(0) + (b2.charCodeAt(7) | 0)) {
              case 203:
                if (111 > b2.charCodeAt(8))
                  break;
              case 115:
                a = a.replace(b2, "-webkit-" + b2) + ";" + a;
                break;
              case 207:
              case 102:
                a = a.replace(b2, "-webkit-" + (102 < m2 ? "inline-" : "") + "box") + ";" + a.replace(b2, "-webkit-" + b2) + ";" + a.replace(b2, "-ms-" + b2 + "box") + ";" + a;
            }
            return a + ";";
          case 938:
            if (45 === a.charCodeAt(5))
              switch (a.charCodeAt(6)) {
                case 105:
                  return b2 = a.replace("-items", ""), "-webkit-" + a + "-webkit-box-" + b2 + "-ms-flex-" + b2 + a;
                case 115:
                  return "-webkit-" + a + "-ms-flex-item-" + a.replace(ba, "") + a;
                default:
                  return "-webkit-" + a + "-ms-flex-line-pack" + a.replace("align-content", "").replace(ba, "") + a;
              }
            break;
          case 973:
          case 989:
            if (45 !== a.charCodeAt(3) || 122 === a.charCodeAt(4))
              break;
          case 931:
          case 953:
            if (true === la.test(d))
              return 115 === (b2 = d.substring(d.indexOf(":") + 1)).charCodeAt(0) ? P2(d.replace("stretch", "fill-available"), c, e, h2).replace(":fill-available", ":stretch") : a.replace(b2, "-webkit-" + b2) + a.replace(b2, "-moz-" + b2.replace("fill-", "")) + a;
            break;
          case 962:
            if (a = "-webkit-" + a + (102 === a.charCodeAt(5) ? "-ms-" + a : "") + a, 211 === e + h2 && 105 === a.charCodeAt(13) && 0 < a.indexOf("transform", 10))
              return a.substring(0, a.indexOf(";", 27) + 1).replace(ma, "$1-webkit-$2") + a;
        }
        return a;
      }
      function L2(d, c) {
        var e = d.indexOf(1 === c ? ":" : "{"), h2 = d.substring(0, 3 !== c ? e : 10);
        e = d.substring(e + 1, d.length - 1);
        return R2(2 !== c ? h2 : h2.replace(na, "$1"), e, c);
      }
      function ea(d, c) {
        var e = P2(c, c.charCodeAt(0), c.charCodeAt(1), c.charCodeAt(2));
        return e !== c + ";" ? e.replace(oa, " or ($1)").substring(4) : "(" + c + ")";
      }
      function H2(d, c, e, h2, a, m2, b2, v2, n, q2) {
        for (var g2 = 0, x2 = c, w3; g2 < A; ++g2) {
          switch (w3 = S2[g2].call(B2, d, x2, e, h2, a, m2, b2, v2, n, q2)) {
            case void 0:
            case false:
            case true:
            case null:
              break;
            default:
              x2 = w3;
          }
        }
        if (x2 !== c)
          return x2;
      }
      function T2(d) {
        switch (d) {
          case void 0:
          case null:
            A = S2.length = 0;
            break;
          default:
            if ("function" === typeof d)
              S2[A++] = d;
            else if ("object" === typeof d)
              for (var c = 0, e = d.length; c < e; ++c) {
                T2(d[c]);
              }
            else
              Y2 = !!d | 0;
        }
        return T2;
      }
      function U2(d) {
        d = d.prefix;
        void 0 !== d && (R2 = null, d ? "function" !== typeof d ? w2 = 1 : (w2 = 2, R2 = d) : w2 = 0);
        return U2;
      }
      function B2(d, c) {
        var e = d;
        33 > e.charCodeAt(0) && (e = e.trim());
        V2 = e;
        e = [V2];
        if (0 < A) {
          var h2 = H2(-1, c, e, e, D2, z2, 0, 0, 0, 0);
          void 0 !== h2 && "string" === typeof h2 && (c = h2);
        }
        var a = M2(O2, e, c, 0, 0);
        0 < A && (h2 = H2(-2, a, e, e, D2, z2, a.length, 0, 0, 0), void 0 !== h2 && (a = h2));
        V2 = "";
        E2 = 0;
        z2 = D2 = 1;
        return a;
      }
      var ca = /^\0+/g, N2 = /[\0\r\f]/g, aa = /: */g, ka = /zoo|gra/, ma = /([,: ])(transform)/g, ia = /,\r+?/g, F2 = /([\t\r\n ])*\f?&/g, fa = /@(k\w+)\s*(\S*)\s*/, Q2 = /::(place)/g, ha = /:(read-only)/g, G2 = /[svh]\w+-[tblr]{2}/, da = /\(\s*(.*)\s*\)/g, oa = /([\s\S]*?);/g, ba = /-self|flex-/g, na = /[^]*?(:[rp][el]a[\w-]+)[^]*/, la = /stretch|:\s*\w+\-(?:conte|avail)/, ja = /([^-])(image-set\()/, z2 = 1, D2 = 1, E2 = 0, w2 = 1, O2 = [], S2 = [], A = 0, R2 = null, Y2 = 0, V2 = "";
      B2.use = T2;
      B2.set = U2;
      void 0 !== W2 && U2(W2);
      return B2;
    }
    var unitlessKeys = {
      animationIterationCount: 1,
      borderImageOutset: 1,
      borderImageSlice: 1,
      borderImageWidth: 1,
      boxFlex: 1,
      boxFlexGroup: 1,
      boxOrdinalGroup: 1,
      columnCount: 1,
      columns: 1,
      flex: 1,
      flexGrow: 1,
      flexPositive: 1,
      flexShrink: 1,
      flexNegative: 1,
      flexOrder: 1,
      gridRow: 1,
      gridRowEnd: 1,
      gridRowSpan: 1,
      gridRowStart: 1,
      gridColumn: 1,
      gridColumnEnd: 1,
      gridColumnSpan: 1,
      gridColumnStart: 1,
      msGridRow: 1,
      msGridRowSpan: 1,
      msGridColumn: 1,
      msGridColumnSpan: 1,
      fontWeight: 1,
      lineHeight: 1,
      opacity: 1,
      order: 1,
      orphans: 1,
      tabSize: 1,
      widows: 1,
      zIndex: 1,
      zoom: 1,
      WebkitLineClamp: 1,
      // SVG-related properties
      fillOpacity: 1,
      floodOpacity: 1,
      stopOpacity: 1,
      strokeDasharray: 1,
      strokeDashoffset: 1,
      strokeMiterlimit: 1,
      strokeOpacity: 1,
      strokeWidth: 1
    };
    function memoize(fn) {
      var cache2 = /* @__PURE__ */ Object.create(null);
      return function(arg) {
        if (cache2[arg] === void 0)
          cache2[arg] = fn(arg);
        return cache2[arg];
      };
    }
    var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
    var isPropValid = /* @__PURE__ */ memoize(
      function(prop2) {
        return reactPropsRegex.test(prop2) || prop2.charCodeAt(0) === 111 && prop2.charCodeAt(1) === 110 && prop2.charCodeAt(2) < 91;
      }
      /* Z+1 */
    );
    var reactIs$2 = { exports: {} };
    var reactIs_production_min$1 = {};
    var hasRequiredReactIs_production_min$1;
    function requireReactIs_production_min$1() {
      if (hasRequiredReactIs_production_min$1)
        return reactIs_production_min$1;
      hasRequiredReactIs_production_min$1 = 1;
      var b2 = "function" === typeof Symbol && Symbol.for, c = b2 ? Symbol.for("react.element") : 60103, d = b2 ? Symbol.for("react.portal") : 60106, e = b2 ? Symbol.for("react.fragment") : 60107, f = b2 ? Symbol.for("react.strict_mode") : 60108, g2 = b2 ? Symbol.for("react.profiler") : 60114, h2 = b2 ? Symbol.for("react.provider") : 60109, k2 = b2 ? Symbol.for("react.context") : 60110, l2 = b2 ? Symbol.for("react.async_mode") : 60111, m2 = b2 ? Symbol.for("react.concurrent_mode") : 60111, n = b2 ? Symbol.for("react.forward_ref") : 60112, p = b2 ? Symbol.for("react.suspense") : 60113, q2 = b2 ? Symbol.for("react.suspense_list") : 60120, r = b2 ? Symbol.for("react.memo") : 60115, t = b2 ? Symbol.for("react.lazy") : 60116, v2 = b2 ? Symbol.for("react.block") : 60121, w2 = b2 ? Symbol.for("react.fundamental") : 60117, x2 = b2 ? Symbol.for("react.responder") : 60118, y2 = b2 ? Symbol.for("react.scope") : 60119;
      function z2(a) {
        if ("object" === typeof a && null !== a) {
          var u = a.$$typeof;
          switch (u) {
            case c:
              switch (a = a.type, a) {
                case l2:
                case m2:
                case e:
                case g2:
                case f:
                case p:
                  return a;
                default:
                  switch (a = a && a.$$typeof, a) {
                    case k2:
                    case n:
                    case t:
                    case r:
                    case h2:
                      return a;
                    default:
                      return u;
                  }
              }
            case d:
              return u;
          }
        }
      }
      function A(a) {
        return z2(a) === m2;
      }
      reactIs_production_min$1.AsyncMode = l2;
      reactIs_production_min$1.ConcurrentMode = m2;
      reactIs_production_min$1.ContextConsumer = k2;
      reactIs_production_min$1.ContextProvider = h2;
      reactIs_production_min$1.Element = c;
      reactIs_production_min$1.ForwardRef = n;
      reactIs_production_min$1.Fragment = e;
      reactIs_production_min$1.Lazy = t;
      reactIs_production_min$1.Memo = r;
      reactIs_production_min$1.Portal = d;
      reactIs_production_min$1.Profiler = g2;
      reactIs_production_min$1.StrictMode = f;
      reactIs_production_min$1.Suspense = p;
      reactIs_production_min$1.isAsyncMode = function(a) {
        return A(a) || z2(a) === l2;
      };
      reactIs_production_min$1.isConcurrentMode = A;
      reactIs_production_min$1.isContextConsumer = function(a) {
        return z2(a) === k2;
      };
      reactIs_production_min$1.isContextProvider = function(a) {
        return z2(a) === h2;
      };
      reactIs_production_min$1.isElement = function(a) {
        return "object" === typeof a && null !== a && a.$$typeof === c;
      };
      reactIs_production_min$1.isForwardRef = function(a) {
        return z2(a) === n;
      };
      reactIs_production_min$1.isFragment = function(a) {
        return z2(a) === e;
      };
      reactIs_production_min$1.isLazy = function(a) {
        return z2(a) === t;
      };
      reactIs_production_min$1.isMemo = function(a) {
        return z2(a) === r;
      };
      reactIs_production_min$1.isPortal = function(a) {
        return z2(a) === d;
      };
      reactIs_production_min$1.isProfiler = function(a) {
        return z2(a) === g2;
      };
      reactIs_production_min$1.isStrictMode = function(a) {
        return z2(a) === f;
      };
      reactIs_production_min$1.isSuspense = function(a) {
        return z2(a) === p;
      };
      reactIs_production_min$1.isValidElementType = function(a) {
        return "string" === typeof a || "function" === typeof a || a === e || a === m2 || a === g2 || a === f || a === p || a === q2 || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h2 || a.$$typeof === k2 || a.$$typeof === n || a.$$typeof === w2 || a.$$typeof === x2 || a.$$typeof === y2 || a.$$typeof === v2);
      };
      reactIs_production_min$1.typeOf = z2;
      return reactIs_production_min$1;
    }
    var reactIs_development$1 = {};
    var hasRequiredReactIs_development$1;
    function requireReactIs_development$1() {
      if (hasRequiredReactIs_development$1)
        return reactIs_development$1;
      hasRequiredReactIs_development$1 = 1;
      if (process.env.NODE_ENV !== "production") {
        (function() {
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal2 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement2(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          reactIs_development$1.AsyncMode = AsyncMode;
          reactIs_development$1.ConcurrentMode = ConcurrentMode;
          reactIs_development$1.ContextConsumer = ContextConsumer;
          reactIs_development$1.ContextProvider = ContextProvider;
          reactIs_development$1.Element = Element2;
          reactIs_development$1.ForwardRef = ForwardRef;
          reactIs_development$1.Fragment = Fragment;
          reactIs_development$1.Lazy = Lazy;
          reactIs_development$1.Memo = Memo;
          reactIs_development$1.Portal = Portal2;
          reactIs_development$1.Profiler = Profiler;
          reactIs_development$1.StrictMode = StrictMode;
          reactIs_development$1.Suspense = Suspense;
          reactIs_development$1.isAsyncMode = isAsyncMode;
          reactIs_development$1.isConcurrentMode = isConcurrentMode;
          reactIs_development$1.isContextConsumer = isContextConsumer;
          reactIs_development$1.isContextProvider = isContextProvider;
          reactIs_development$1.isElement = isElement2;
          reactIs_development$1.isForwardRef = isForwardRef;
          reactIs_development$1.isFragment = isFragment;
          reactIs_development$1.isLazy = isLazy;
          reactIs_development$1.isMemo = isMemo;
          reactIs_development$1.isPortal = isPortal;
          reactIs_development$1.isProfiler = isProfiler;
          reactIs_development$1.isStrictMode = isStrictMode;
          reactIs_development$1.isSuspense = isSuspense;
          reactIs_development$1.isValidElementType = isValidElementType;
          reactIs_development$1.typeOf = typeOf;
        })();
      }
      return reactIs_development$1;
    }
    if (process.env.NODE_ENV === "production") {
      reactIs$2.exports = requireReactIs_production_min$1();
    } else {
      reactIs$2.exports = requireReactIs_development$1();
    }
    var reactIsExports = reactIs$2.exports;
    var reactIs$1 = reactIsExports;
    var REACT_STATICS = { childContextTypes: true, contextType: true, contextTypes: true, defaultProps: true, displayName: true, getDefaultProps: true, getDerivedStateFromError: true, getDerivedStateFromProps: true, mixins: true, propTypes: true, type: true };
    var KNOWN_STATICS = { name: true, length: true, prototype: true, caller: true, callee: true, arguments: true, arity: true };
    var FORWARD_REF_STATICS = { "$$typeof": true, render: true, defaultProps: true, displayName: true, propTypes: true };
    var MEMO_STATICS = { "$$typeof": true, compare: true, defaultProps: true, displayName: true, propTypes: true, type: true };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs$1.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs$1.Memo] = MEMO_STATICS;
    function getStatics(component) {
      if (reactIs$1.isMemo(component)) {
        return MEMO_STATICS;
      }
      return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
    }
    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== "string") {
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);
          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
          }
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
          keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for (var i = 0; i < keys.length; ++i) {
          var key2 = keys[i];
          if (!KNOWN_STATICS[key2] && !(blacklist && blacklist[key2]) && !(sourceStatics && sourceStatics[key2]) && !(targetStatics && targetStatics[key2])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key2);
            try {
              defineProperty(targetComponent, key2, descriptor);
            } catch (e) {
            }
          }
        }
      }
      return targetComponent;
    }
    var hoistNonReactStatics_cjs = hoistNonReactStatics;
    var m = /* @__PURE__ */ getDefaultExportFromCjs(hoistNonReactStatics_cjs);
    function v() {
      return (v = Object.assign || function(e) {
        for (var t = 1; t < arguments.length; t++) {
          var n = arguments[t];
          for (var r in n)
            Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
        }
        return e;
      }).apply(this, arguments);
    }
    var y = function(e, t) {
      for (var n = [e[0]], r = 0, o = t.length; r < o; r += 1)
        n.push(t[r], e[r + 1]);
      return n;
    };
    var g$1 = function(t) {
      return null !== t && "object" == typeof t && "[object Object]" === (t.toString ? t.toString() : Object.prototype.toString.call(t)) && !reactIsExports$1.typeOf(t);
    };
    var S = Object.freeze([]);
    var w = Object.freeze({});
    function E(e) {
      return "function" == typeof e;
    }
    function b(e) {
      return "production" !== process.env.NODE_ENV && "string" == typeof e && e || e.displayName || e.name || "Component";
    }
    function _(e) {
      return e && "string" == typeof e.styledComponentId;
    }
    var N = "undefined" != typeof process && void 0 !== process.env && (process.env.REACT_APP_SC_ATTR || process.env.SC_ATTR) || "data-styled";
    var C = "undefined" != typeof window && "HTMLElement" in window;
    var I = Boolean("boolean" == typeof SC_DISABLE_SPEEDY ? SC_DISABLE_SPEEDY : "undefined" != typeof process && void 0 !== process.env && (void 0 !== process.env.REACT_APP_SC_DISABLE_SPEEDY && "" !== process.env.REACT_APP_SC_DISABLE_SPEEDY ? "false" !== process.env.REACT_APP_SC_DISABLE_SPEEDY && process.env.REACT_APP_SC_DISABLE_SPEEDY : void 0 !== process.env.SC_DISABLE_SPEEDY && "" !== process.env.SC_DISABLE_SPEEDY ? "false" !== process.env.SC_DISABLE_SPEEDY && process.env.SC_DISABLE_SPEEDY : "production" !== process.env.NODE_ENV));
    var P = {};
    var O = "production" !== process.env.NODE_ENV ? { 1: "Cannot create styled-component for component: %s.\n\n", 2: "Can't collect styles once you've consumed a `ServerStyleSheet`'s styles! `ServerStyleSheet` is a one off instance for each server-side render cycle.\n\n- Are you trying to reuse it across renders?\n- Are you accidentally calling collectStyles twice?\n\n", 3: "Streaming SSR is only supported in a Node.js environment; Please do not try to call this method in the browser.\n\n", 4: "The `StyleSheetManager` expects a valid target or sheet prop!\n\n- Does this error occur on the client and is your target falsy?\n- Does this error occur on the server and is the sheet falsy?\n\n", 5: "The clone method cannot be used on the client!\n\n- Are you running in a client-like environment on the server?\n- Are you trying to run SSR on the client?\n\n", 6: "Trying to insert a new style tag, but the given Node is unmounted!\n\n- Are you using a custom target that isn't mounted?\n- Does your document not have a valid head element?\n- Have you accidentally removed a style tag manually?\n\n", 7: 'ThemeProvider: Please return an object from your "theme" prop function, e.g.\n\n```js\ntheme={() => ({})}\n```\n\n', 8: 'ThemeProvider: Please make your "theme" prop an object.\n\n', 9: "Missing document `<head>`\n\n", 10: "Cannot find a StyleSheet instance. Usually this happens if there are multiple copies of styled-components loaded at once. Check out this issue for how to troubleshoot and fix the common cases where this situation can happen: https://github.com/styled-components/styled-components/issues/1941#issuecomment-417862021\n\n", 11: "_This error was replaced with a dev-time warning, it will be deleted for v4 final._ [createGlobalStyle] received children which will not be rendered. Please use the component without passing children elements.\n\n", 12: "It seems you are interpolating a keyframe declaration (%s) into an untagged string. This was supported in styled-components v3, but is not longer supported in v4 as keyframes are now injected on-demand. Please wrap your string in the css\\`\\` helper which ensures the styles are injected correctly. See https://www.styled-components.com/docs/api#css\n\n", 13: "%s is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.\n\n", 14: 'ThemeProvider: "theme" prop is required.\n\n', 15: "A stylis plugin has been supplied that is not named. We need a name for each plugin to be able to prevent styling collisions between different stylis configurations within the same app. Before you pass your plugin to `<StyleSheetManager stylisPlugins={[]}>`, please make sure each plugin is uniquely-named, e.g.\n\n```js\nObject.defineProperty(importedPlugin, 'name', { value: 'some-unique-name' });\n```\n\n", 16: "Reached the limit of how many styled components may be created at group %s.\nYou may only create up to 1,073,741,824 components. If you're creating components dynamically,\nas for instance in your render method then you may be running into this limitation.\n\n", 17: "CSSStyleSheet could not be found on HTMLStyleElement.\nHas styled-components' style tag been unmounted or altered by another script?\n" } : {};
    function R() {
      for (var e = arguments.length <= 0 ? void 0 : arguments[0], t = [], n = 1, r = arguments.length; n < r; n += 1)
        t.push(n < 0 || arguments.length <= n ? void 0 : arguments[n]);
      return t.forEach(function(t2) {
        e = e.replace(/%[a-z]/, t2);
      }), e;
    }
    function D(e) {
      for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++)
        n[r - 1] = arguments[r];
      throw "production" === process.env.NODE_ENV ? new Error("An error occurred. See https://git.io/JUIaE#" + e + " for more information." + (n.length > 0 ? " Args: " + n.join(", ") : "")) : new Error(R.apply(void 0, [O[e]].concat(n)).trim());
    }
    var j = function() {
      function e(e2) {
        this.groupSizes = new Uint32Array(512), this.length = 512, this.tag = e2;
      }
      var t = e.prototype;
      return t.indexOfGroup = function(e2) {
        for (var t2 = 0, n = 0; n < e2; n++)
          t2 += this.groupSizes[n];
        return t2;
      }, t.insertRules = function(e2, t2) {
        if (e2 >= this.groupSizes.length) {
          for (var n = this.groupSizes, r = n.length, o = r; e2 >= o; )
            (o <<= 1) < 0 && D(16, "" + e2);
          this.groupSizes = new Uint32Array(o), this.groupSizes.set(n), this.length = o;
          for (var s = r; s < o; s++)
            this.groupSizes[s] = 0;
        }
        for (var i = this.indexOfGroup(e2 + 1), a = 0, c = t2.length; a < c; a++)
          this.tag.insertRule(i, t2[a]) && (this.groupSizes[e2]++, i++);
      }, t.clearGroup = function(e2) {
        if (e2 < this.length) {
          var t2 = this.groupSizes[e2], n = this.indexOfGroup(e2), r = n + t2;
          this.groupSizes[e2] = 0;
          for (var o = n; o < r; o++)
            this.tag.deleteRule(n);
        }
      }, t.getGroup = function(e2) {
        var t2 = "";
        if (e2 >= this.length || 0 === this.groupSizes[e2])
          return t2;
        for (var n = this.groupSizes[e2], r = this.indexOfGroup(e2), o = r + n, s = r; s < o; s++)
          t2 += this.tag.getRule(s) + "/*!sc*/\n";
        return t2;
      }, e;
    }();
    var T = /* @__PURE__ */ new Map();
    var x = /* @__PURE__ */ new Map();
    var k = 1;
    var V = function(e) {
      if (T.has(e))
        return T.get(e);
      for (; x.has(k); )
        k++;
      var t = k++;
      return "production" !== process.env.NODE_ENV && ((0 | t) < 0 || t > 1 << 30) && D(16, "" + t), T.set(e, t), x.set(t, e), t;
    };
    var z = function(e) {
      return x.get(e);
    };
    var B = function(e, t) {
      t >= k && (k = t + 1), T.set(e, t), x.set(t, e);
    };
    var M = "style[" + N + '][data-styled-version="5.3.10"]';
    var G$1 = new RegExp("^" + N + '\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)');
    var L$1 = function(e, t, n) {
      for (var r, o = n.split(","), s = 0, i = o.length; s < i; s++)
        (r = o[s]) && e.registerName(t, r);
    };
    var F = function(e, t) {
      for (var n = (t.textContent || "").split("/*!sc*/\n"), r = [], o = 0, s = n.length; o < s; o++) {
        var i = n[o].trim();
        if (i) {
          var a = i.match(G$1);
          if (a) {
            var c = 0 | parseInt(a[1], 10), u = a[2];
            0 !== c && (B(u, c), L$1(e, u, a[3]), e.getTag().insertRules(c, r)), r.length = 0;
          } else
            r.push(i);
        }
      }
    };
    var Y = function() {
      return "undefined" != typeof __webpack_nonce__ ? __webpack_nonce__ : null;
    };
    var q = function(e) {
      var t = document.head, n = e || t, r = document.createElement("style"), o = function(e2) {
        for (var t2 = e2.childNodes, n2 = t2.length; n2 >= 0; n2--) {
          var r2 = t2[n2];
          if (r2 && 1 === r2.nodeType && r2.hasAttribute(N))
            return r2;
        }
      }(n), s = void 0 !== o ? o.nextSibling : null;
      r.setAttribute(N, "active"), r.setAttribute("data-styled-version", "5.3.10");
      var i = Y();
      return i && r.setAttribute("nonce", i), n.insertBefore(r, s), r;
    };
    var H = function() {
      function e(e2) {
        var t2 = this.element = q(e2);
        t2.appendChild(document.createTextNode("")), this.sheet = function(e3) {
          if (e3.sheet)
            return e3.sheet;
          for (var t3 = document.styleSheets, n = 0, r = t3.length; n < r; n++) {
            var o = t3[n];
            if (o.ownerNode === e3)
              return o;
          }
          D(17);
        }(t2), this.length = 0;
      }
      var t = e.prototype;
      return t.insertRule = function(e2, t2) {
        try {
          return this.sheet.insertRule(t2, e2), this.length++, true;
        } catch (e3) {
          return false;
        }
      }, t.deleteRule = function(e2) {
        this.sheet.deleteRule(e2), this.length--;
      }, t.getRule = function(e2) {
        var t2 = this.sheet.cssRules[e2];
        return void 0 !== t2 && "string" == typeof t2.cssText ? t2.cssText : "";
      }, e;
    }();
    var $ = function() {
      function e(e2) {
        var t2 = this.element = q(e2);
        this.nodes = t2.childNodes, this.length = 0;
      }
      var t = e.prototype;
      return t.insertRule = function(e2, t2) {
        if (e2 <= this.length && e2 >= 0) {
          var n = document.createTextNode(t2), r = this.nodes[e2];
          return this.element.insertBefore(n, r || null), this.length++, true;
        }
        return false;
      }, t.deleteRule = function(e2) {
        this.element.removeChild(this.nodes[e2]), this.length--;
      }, t.getRule = function(e2) {
        return e2 < this.length ? this.nodes[e2].textContent : "";
      }, e;
    }();
    var W = function() {
      function e(e2) {
        this.rules = [], this.length = 0;
      }
      var t = e.prototype;
      return t.insertRule = function(e2, t2) {
        return e2 <= this.length && (this.rules.splice(e2, 0, t2), this.length++, true);
      }, t.deleteRule = function(e2) {
        this.rules.splice(e2, 1), this.length--;
      }, t.getRule = function(e2) {
        return e2 < this.length ? this.rules[e2] : "";
      }, e;
    }();
    var U = C;
    var J = { isServer: !C, useCSSOMInjection: !I };
    var X = function() {
      function e(e2, t2, n) {
        void 0 === e2 && (e2 = w), void 0 === t2 && (t2 = {}), this.options = v({}, J, {}, e2), this.gs = t2, this.names = new Map(n), this.server = !!e2.isServer, !this.server && C && U && (U = false, function(e3) {
          for (var t3 = document.querySelectorAll(M), n2 = 0, r = t3.length; n2 < r; n2++) {
            var o = t3[n2];
            o && "active" !== o.getAttribute(N) && (F(e3, o), o.parentNode && o.parentNode.removeChild(o));
          }
        }(this));
      }
      e.registerId = function(e2) {
        return V(e2);
      };
      var t = e.prototype;
      return t.reconstructWithOptions = function(t2, n) {
        return void 0 === n && (n = true), new e(v({}, this.options, {}, t2), this.gs, n && this.names || void 0);
      }, t.allocateGSInstance = function(e2) {
        return this.gs[e2] = (this.gs[e2] || 0) + 1;
      }, t.getTag = function() {
        return this.tag || (this.tag = (n = (t2 = this.options).isServer, r = t2.useCSSOMInjection, o = t2.target, e2 = n ? new W(o) : r ? new H(o) : new $(o), new j(e2)));
        var e2, t2, n, r, o;
      }, t.hasNameForId = function(e2, t2) {
        return this.names.has(e2) && this.names.get(e2).has(t2);
      }, t.registerName = function(e2, t2) {
        if (V(e2), this.names.has(e2))
          this.names.get(e2).add(t2);
        else {
          var n = /* @__PURE__ */ new Set();
          n.add(t2), this.names.set(e2, n);
        }
      }, t.insertRules = function(e2, t2, n) {
        this.registerName(e2, t2), this.getTag().insertRules(V(e2), n);
      }, t.clearNames = function(e2) {
        this.names.has(e2) && this.names.get(e2).clear();
      }, t.clearRules = function(e2) {
        this.getTag().clearGroup(V(e2)), this.clearNames(e2);
      }, t.clearTag = function() {
        this.tag = void 0;
      }, t.toString = function() {
        return function(e2) {
          for (var t2 = e2.getTag(), n = t2.length, r = "", o = 0; o < n; o++) {
            var s = z(o);
            if (void 0 !== s) {
              var i = e2.names.get(s), a = t2.getGroup(o);
              if (i && a && i.size) {
                var c = N + ".g" + o + '[id="' + s + '"]', u = "";
                void 0 !== i && i.forEach(function(e3) {
                  e3.length > 0 && (u += e3 + ",");
                }), r += "" + a + c + '{content:"' + u + '"}/*!sc*/\n';
              }
            }
          }
          return r;
        }(this);
      }, e;
    }();
    var Z = /(a)(d)/gi;
    var K = function(e) {
      return String.fromCharCode(e + (e > 25 ? 39 : 97));
    };
    function Q(e) {
      var t, n = "";
      for (t = Math.abs(e); t > 52; t = t / 52 | 0)
        n = K(t % 52) + n;
      return (K(t % 52) + n).replace(Z, "$1-$2");
    }
    var ee$1 = function(e, t) {
      for (var n = t.length; n; )
        e = 33 * e ^ t.charCodeAt(--n);
      return e;
    };
    var te = function(e) {
      return ee$1(5381, e);
    };
    function ne$1(e) {
      for (var t = 0; t < e.length; t += 1) {
        var n = e[t];
        if (E(n) && !_(n))
          return false;
      }
      return true;
    }
    var re$1 = te("5.3.10");
    var oe = function() {
      function e(e2, t, n) {
        this.rules = e2, this.staticRulesId = "", this.isStatic = "production" === process.env.NODE_ENV && (void 0 === n || n.isStatic) && ne$1(e2), this.componentId = t, this.baseHash = ee$1(re$1, t), this.baseStyle = n, X.registerId(t);
      }
      return e.prototype.generateAndInjectStyles = function(e2, t, n) {
        var r = this.componentId, o = [];
        if (this.baseStyle && o.push(this.baseStyle.generateAndInjectStyles(e2, t, n)), this.isStatic && !n.hash) {
          if (this.staticRulesId && t.hasNameForId(r, this.staticRulesId))
            o.push(this.staticRulesId);
          else {
            var s = _e(this.rules, e2, t, n).join(""), i = Q(ee$1(this.baseHash, s) >>> 0);
            if (!t.hasNameForId(r, i)) {
              var a = n(s, "." + i, void 0, r);
              t.insertRules(r, i, a);
            }
            o.push(i), this.staticRulesId = i;
          }
        } else {
          for (var c = this.rules.length, u = ee$1(this.baseHash, n.hash), l2 = "", d = 0; d < c; d++) {
            var h2 = this.rules[d];
            if ("string" == typeof h2)
              l2 += h2, "production" !== process.env.NODE_ENV && (u = ee$1(u, h2 + d));
            else if (h2) {
              var p = _e(h2, e2, t, n), f = Array.isArray(p) ? p.join("") : p;
              u = ee$1(u, f + d), l2 += f;
            }
          }
          if (l2) {
            var m2 = Q(u >>> 0);
            if (!t.hasNameForId(r, m2)) {
              var v2 = n(l2, "." + m2, void 0, r);
              t.insertRules(r, m2, v2);
            }
            o.push(m2);
          }
        }
        return o.join(" ");
      }, e;
    }();
    var se = /^\s*\/\/.*$/gm;
    var ie = [":", "[", ".", "#"];
    function ae(e) {
      var t, n, r, o, s = void 0 === e ? w : e, i = s.options, a = void 0 === i ? w : i, c = s.plugins, u = void 0 === c ? S : c, l2 = new stylis_min(a), d = [], p = function(e2) {
        function t2(t3) {
          if (t3)
            try {
              e2(t3 + "}");
            } catch (e3) {
            }
        }
        return function(n2, r2, o2, s2, i2, a2, c2, u2, l3, d2) {
          switch (n2) {
            case 1:
              if (0 === l3 && 64 === r2.charCodeAt(0))
                return e2(r2 + ";"), "";
              break;
            case 2:
              if (0 === u2)
                return r2 + "/*|*/";
              break;
            case 3:
              switch (u2) {
                case 102:
                case 112:
                  return e2(o2[0] + r2), "";
                default:
                  return r2 + (0 === d2 ? "/*|*/" : "");
              }
            case -2:
              r2.split("/*|*/}").forEach(t2);
          }
        };
      }(function(e2) {
        d.push(e2);
      }), f = function(e2, r2, s2) {
        return 0 === r2 && -1 !== ie.indexOf(s2[n.length]) || s2.match(o) ? e2 : "." + t;
      };
      function m2(e2, s2, i2, a2) {
        void 0 === a2 && (a2 = "&");
        var c2 = e2.replace(se, ""), u2 = s2 && i2 ? i2 + " " + s2 + " { " + c2 + " }" : c2;
        return t = a2, n = s2, r = new RegExp("\\" + n + "\\b", "g"), o = new RegExp("(\\" + n + "\\b){2,}"), l2(i2 || !s2 ? "" : s2, u2);
      }
      return l2.use([].concat(u, [function(e2, t2, o2) {
        2 === e2 && o2.length && o2[0].lastIndexOf(n) > 0 && (o2[0] = o2[0].replace(r, f));
      }, p, function(e2) {
        if (-2 === e2) {
          var t2 = d;
          return d = [], t2;
        }
      }])), m2.hash = u.length ? u.reduce(function(e2, t2) {
        return t2.name || D(15), ee$1(e2, t2.name);
      }, 5381).toString() : "", m2;
    }
    var ce = React__namespace.default.createContext();
    var le$1 = React__namespace.default.createContext();
    var de$1 = new X();
    var he = ae();
    function pe() {
      return React$2.useContext(ce) || de$1;
    }
    function fe() {
      return React$2.useContext(le$1) || he;
    }
    var ve = function() {
      function e(e2, t) {
        var n = this;
        this.inject = function(e3, t2) {
          void 0 === t2 && (t2 = he);
          var r = n.name + t2.hash;
          e3.hasNameForId(n.id, r) || e3.insertRules(n.id, r, t2(n.rules, r, "@keyframes"));
        }, this.toString = function() {
          return D(12, String(n.name));
        }, this.name = e2, this.id = "sc-keyframes-" + e2, this.rules = t;
      }
      return e.prototype.getName = function(e2) {
        return void 0 === e2 && (e2 = he), this.name + e2.hash;
      }, e;
    }();
    var ye$1 = /([A-Z])/;
    var ge$1 = /([A-Z])/g;
    var Se = /^ms-/;
    var we = function(e) {
      return "-" + e.toLowerCase();
    };
    function Ee(e) {
      return ye$1.test(e) ? e.replace(ge$1, we).replace(Se, "-ms-") : e;
    }
    var be = function(e) {
      return null == e || false === e || "" === e;
    };
    function _e(e, n, r, o) {
      if (Array.isArray(e)) {
        for (var s, i = [], a = 0, c = e.length; a < c; a += 1)
          "" !== (s = _e(e[a], n, r, o)) && (Array.isArray(s) ? i.push.apply(i, s) : i.push(s));
        return i;
      }
      if (be(e))
        return "";
      if (_(e))
        return "." + e.styledComponentId;
      if (E(e)) {
        if ("function" != typeof (l2 = e) || l2.prototype && l2.prototype.isReactComponent || !n)
          return e;
        var u = e(n);
        return "production" !== process.env.NODE_ENV && reactIsExports$1.isElement(u) && console.warn(b(e) + " is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details."), _e(u, n, r, o);
      }
      var l2;
      return e instanceof ve ? r ? (e.inject(r, o), e.getName(o)) : e : g$1(e) ? function e2(t, n2) {
        var r2, o2, s2 = [];
        for (var i2 in t)
          t.hasOwnProperty(i2) && !be(t[i2]) && (Array.isArray(t[i2]) && t[i2].isCss || E(t[i2]) ? s2.push(Ee(i2) + ":", t[i2], ";") : g$1(t[i2]) ? s2.push.apply(s2, e2(t[i2], i2)) : s2.push(Ee(i2) + ": " + (r2 = i2, null == (o2 = t[i2]) || "boolean" == typeof o2 || "" === o2 ? "" : "number" != typeof o2 || 0 === o2 || r2 in unitlessKeys || r2.startsWith("--") ? String(o2).trim() : o2 + "px") + ";"));
        return n2 ? [n2 + " {"].concat(s2, ["}"]) : s2;
      }(e) : e.toString();
    }
    var Ne = function(e) {
      return Array.isArray(e) && (e.isCss = true), e;
    };
    function Ae(e) {
      for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++)
        n[r - 1] = arguments[r];
      return E(e) || g$1(e) ? Ne(_e(y(S, [e].concat(n)))) : 0 === n.length && 1 === e.length && "string" == typeof e[0] ? e : Ne(_e(y(e, n)));
    }
    var Ce = /invalid hook call/i;
    var Ie = /* @__PURE__ */ new Set();
    var Pe = function(e, t) {
      if ("production" !== process.env.NODE_ENV) {
        var n = "The component " + e + (t ? ' with the id of "' + t + '"' : "") + " has been created dynamically.\nYou may see this warning because you've called styled inside another component.\nTo resolve this only create new StyledComponents outside of any render method and function component.", r = console.error;
        try {
          var o = true;
          console.error = function(e2) {
            if (Ce.test(e2))
              o = false, Ie.delete(n);
            else {
              for (var t2 = arguments.length, s = new Array(t2 > 1 ? t2 - 1 : 0), i = 1; i < t2; i++)
                s[i - 1] = arguments[i];
              r.apply(void 0, [e2].concat(s));
            }
          }, React$2.useRef(), o && !Ie.has(n) && (console.warn(n), Ie.add(n));
        } catch (e2) {
          Ce.test(e2.message) && Ie.delete(n);
        } finally {
          console.error = r;
        }
      }
    };
    var Oe = function(e, t, n) {
      return void 0 === n && (n = w), e.theme !== n.theme && e.theme || t || n.theme;
    };
    var Re$1 = /[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g;
    var De = /(^-|-$)/g;
    function je(e) {
      return e.replace(Re$1, "-").replace(De, "");
    }
    var Te = function(e) {
      return Q(te(e) >>> 0);
    };
    function xe(e) {
      return "string" == typeof e && ("production" === process.env.NODE_ENV || e.charAt(0) === e.charAt(0).toLowerCase());
    }
    var ke = function(e) {
      return "function" == typeof e || "object" == typeof e && null !== e && !Array.isArray(e);
    };
    var Ve = function(e) {
      return "__proto__" !== e && "constructor" !== e && "prototype" !== e;
    };
    function ze(e, t, n) {
      var r = e[n];
      ke(t) && ke(r) ? Be(r, t) : e[n] = t;
    }
    function Be(e) {
      for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++)
        n[r - 1] = arguments[r];
      for (var o = 0, s = n; o < s.length; o++) {
        var i = s[o];
        if (ke(i))
          for (var a in i)
            Ve(a) && ze(e, i[a], a);
      }
      return e;
    }
    var Me = React__namespace.default.createContext();
    function Le(e) {
      var t = React$2.useContext(Me), n = React$2.useMemo(function() {
        return function(e2, t2) {
          if (!e2)
            return D(14);
          if (E(e2)) {
            var n2 = e2(t2);
            return "production" === process.env.NODE_ENV || null !== n2 && !Array.isArray(n2) && "object" == typeof n2 ? n2 : D(7);
          }
          return Array.isArray(e2) || "object" != typeof e2 ? D(8) : t2 ? v({}, t2, {}, e2) : e2;
        }(e.theme, t);
      }, [e.theme, t]);
      return e.children ? React__namespace.default.createElement(Me.Provider, { value: n }, e.children) : null;
    }
    var Fe = {};
    function Ye(e, t, n) {
      var o = _(e), i = !xe(e), a = t.attrs, c = void 0 === a ? S : a, d = t.componentId, h2 = void 0 === d ? function(e2, t2) {
        var n2 = "string" != typeof e2 ? "sc" : je(e2);
        Fe[n2] = (Fe[n2] || 0) + 1;
        var r = n2 + "-" + Te("5.3.10" + n2 + Fe[n2]);
        return t2 ? t2 + "-" + r : r;
      }(t.displayName, t.parentComponentId) : d, p = t.displayName, y2 = void 0 === p ? function(e2) {
        return xe(e2) ? "styled." + e2 : "Styled(" + b(e2) + ")";
      }(e) : p, g2 = t.displayName && t.componentId ? je(t.displayName) + "-" + t.componentId : t.componentId || h2, N2 = o && e.attrs ? Array.prototype.concat(e.attrs, c).filter(Boolean) : c, A = t.shouldForwardProp;
      o && e.shouldForwardProp && (A = t.shouldForwardProp ? function(n2, r, o2) {
        return e.shouldForwardProp(n2, r, o2) && t.shouldForwardProp(n2, r, o2);
      } : e.shouldForwardProp);
      var C2, I2 = new oe(n, g2, o ? e.componentStyle : void 0), P2 = I2.isStatic && 0 === c.length, O2 = function(e2, t2) {
        return function(e3, t3, n2, r) {
          var o2 = e3.attrs, i2 = e3.componentStyle, a2 = e3.defaultProps, c2 = e3.foldedComponentIds, d2 = e3.shouldForwardProp, h3 = e3.styledComponentId, p2 = e3.target;
          "production" !== process.env.NODE_ENV && React$2.useDebugValue(h3);
          var m2 = function(e4, t4, n3) {
            void 0 === e4 && (e4 = w);
            var r2 = v({}, t4, { theme: e4 }), o3 = {};
            return n3.forEach(function(e5) {
              var t5, n4, s, i3 = e5;
              for (t5 in E(i3) && (i3 = i3(r2)), i3)
                r2[t5] = o3[t5] = "className" === t5 ? (n4 = o3[t5], s = i3[t5], n4 && s ? n4 + " " + s : n4 || s) : i3[t5];
            }), [r2, o3];
          }(Oe(t3, React$2.useContext(Me), a2) || w, t3, o2), y3 = m2[0], g3 = m2[1], S2 = function(e4, t4, n3, r2) {
            var o3 = pe(), s = fe(), i3 = t4 ? e4.generateAndInjectStyles(w, o3, s) : e4.generateAndInjectStyles(n3, o3, s);
            return "production" !== process.env.NODE_ENV && React$2.useDebugValue(i3), "production" !== process.env.NODE_ENV && !t4 && r2 && r2(i3), i3;
          }(i2, r, y3, "production" !== process.env.NODE_ENV ? e3.warnTooManyClasses : void 0), b2 = n2, _2 = g3.$as || t3.$as || g3.as || t3.as || p2, N3 = xe(_2), A2 = g3 !== t3 ? v({}, t3, {}, g3) : t3, C3 = {};
          for (var I3 in A2)
            "$" !== I3[0] && "as" !== I3 && ("forwardedAs" === I3 ? C3.as = A2[I3] : (d2 ? d2(I3, isPropValid, _2) : !N3 || isPropValid(I3)) && (C3[I3] = A2[I3]));
          return t3.style && g3.style !== t3.style && (C3.style = v({}, t3.style, {}, g3.style)), C3.className = Array.prototype.concat(c2, h3, S2 !== h3 ? S2 : null, t3.className, g3.className).filter(Boolean).join(" "), C3.ref = b2, React$2.createElement(_2, C3);
        }(C2, e2, t2, P2);
      };
      return O2.displayName = y2, (C2 = React__namespace.default.forwardRef(O2)).attrs = N2, C2.componentStyle = I2, C2.displayName = y2, C2.shouldForwardProp = A, C2.foldedComponentIds = o ? Array.prototype.concat(e.foldedComponentIds, e.styledComponentId) : S, C2.styledComponentId = g2, C2.target = o ? e.target : e, C2.withComponent = function(e2) {
        var r = t.componentId, o2 = function(e3, t2) {
          if (null == e3)
            return {};
          var n2, r2, o3 = {}, s2 = Object.keys(e3);
          for (r2 = 0; r2 < s2.length; r2++)
            n2 = s2[r2], t2.indexOf(n2) >= 0 || (o3[n2] = e3[n2]);
          return o3;
        }(t, ["componentId"]), s = r && r + "-" + (xe(e2) ? e2 : je(b(e2)));
        return Ye(e2, v({}, o2, { attrs: N2, componentId: s }), n);
      }, Object.defineProperty(C2, "defaultProps", { get: function() {
        return this._foldedDefaultProps;
      }, set: function(t2) {
        this._foldedDefaultProps = o ? Be({}, e.defaultProps, t2) : t2;
      } }), "production" !== process.env.NODE_ENV && (Pe(y2, g2), C2.warnTooManyClasses = function(e2, t2) {
        var n2 = {}, r = false;
        return function(o2) {
          if (!r && (n2[o2] = true, Object.keys(n2).length >= 200)) {
            var s = t2 ? ' with the id of "' + t2 + '"' : "";
            console.warn("Over 200 classes were generated for component " + e2 + s + ".\nConsider using the attrs method, together with a style object for frequently changed styles.\nExample:\n  const Component = styled.div.attrs(props => ({\n    style: {\n      background: props.background,\n    },\n  }))`width: 100%;`\n\n  <Component />"), r = true, n2 = {};
          }
        };
      }(y2, g2)), Object.defineProperty(C2, "toString", { value: function() {
        return "." + C2.styledComponentId;
      } }), i && m(C2, e, { attrs: true, componentStyle: true, displayName: true, foldedComponentIds: true, shouldForwardProp: true, styledComponentId: true, target: true, withComponent: true }), C2;
    }
    var qe = function(e) {
      return function e2(t, r, o) {
        if (void 0 === o && (o = w), !reactIsExports$1.isValidElementType(r))
          return D(1, String(r));
        var s = function() {
          return t(r, o, Ae.apply(void 0, arguments));
        };
        return s.withConfig = function(n) {
          return e2(t, r, v({}, o, {}, n));
        }, s.attrs = function(n) {
          return e2(t, r, v({}, o, { attrs: Array.prototype.concat(o.attrs, n).filter(Boolean) }));
        }, s;
      }(Ye, e);
    };
    ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "marquee", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "marker", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "textPath", "tspan"].forEach(function(e) {
      qe[e] = qe(e);
    });
    var He = function() {
      function e(e2, t2) {
        this.rules = e2, this.componentId = t2, this.isStatic = ne$1(e2), X.registerId(this.componentId + 1);
      }
      var t = e.prototype;
      return t.createStyles = function(e2, t2, n, r) {
        var o = r(_e(this.rules, t2, n, r).join(""), ""), s = this.componentId + e2;
        n.insertRules(s, s, o);
      }, t.removeStyles = function(e2, t2) {
        t2.clearRules(this.componentId + e2);
      }, t.renderStyles = function(e2, t2, n, r) {
        e2 > 2 && X.registerId(this.componentId + e2), this.removeStyles(e2, n), this.createStyles(e2, t2, n, r);
      }, e;
    }();
    function $e(e) {
      for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++)
        n[o - 1] = arguments[o];
      var i = Ae.apply(void 0, [e].concat(n)), a = "sc-global-" + Te(JSON.stringify(i)), u = new He(i, a);
      function l2(e2) {
        var t2 = pe(), n2 = fe(), o2 = React$2.useContext(Me), u2 = React$2.useRef(t2.allocateGSInstance(a)).current;
        return "production" !== process.env.NODE_ENV && React__namespace.default.Children.count(e2.children) && console.warn("The global style component " + a + " was given child JSX. createGlobalStyle does not render children."), "production" !== process.env.NODE_ENV && i.some(function(e3) {
          return "string" == typeof e3 && -1 !== e3.indexOf("@import");
        }) && console.warn("Please do not use @import CSS syntax in createGlobalStyle at this time, as the CSSOM APIs we use in production do not handle it well. Instead, we recommend using a library such as react-helmet to inject a typical <link> meta tag to the stylesheet, or simply embedding it manually in your index.html <head> section for a simpler app."), t2.server && d(u2, e2, t2, o2, n2), null;
      }
      function d(e2, t2, n2, r, o2) {
        if (u.isStatic)
          u.renderStyles(e2, P, n2, o2);
        else {
          var s = v({}, t2, { theme: Oe(t2, r, l2.defaultProps) });
          u.renderStyles(e2, s, n2, o2);
        }
      }
      return "production" !== process.env.NODE_ENV && Pe(a), React__namespace.default.memo(l2);
    }
    function We(e) {
      "production" !== process.env.NODE_ENV && "undefined" != typeof navigator && "ReactNative" === navigator.product && console.warn("`keyframes` cannot be used on ReactNative, only on the web. To do animation in ReactNative please use Animated.");
      for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++)
        n[r - 1] = arguments[r];
      var o = Ae.apply(void 0, [e].concat(n)).join(""), s = Te(o);
      return new ve(s, o);
    }
    var Ze = function() {
      return React$2.useContext(Me);
    };
    "production" !== process.env.NODE_ENV && "undefined" != typeof navigator && "ReactNative" === navigator.product && console.warn("It looks like you've imported 'styled-components' on React Native.\nPerhaps you're looking to import 'styled-components/native'?\nRead more about this at https://www.styled-components.com/docs/basics#react-native"), "production" !== process.env.NODE_ENV && "test" !== process.env.NODE_ENV && "undefined" != typeof window && (window["__styled-components-init__"] = window["__styled-components-init__"] || 0, 1 === window["__styled-components-init__"] && console.warn("It looks like there are several instances of 'styled-components' initialized in this application. This may cause dynamic styles to not render properly, errors during the rehydration process, a missing theme prop, and makes your application bigger without good reason.\n\nSee https://s-c.sh/2BAXzed for more info."), window["__styled-components-init__"] += 1);
    var styled = qe;
    var black$1 = "#101112";
    var white$1 = "#fff";
    var gray = { "50": { title: "Gray 50", hex: "#f2f3f5" }, "100": { title: "Gray 100", hex: "#e6e8ec" }, "200": { title: "Gray 200", hex: "#ced2d9" }, "300": { title: "Gray 300", hex: "#b6bcc6" }, "400": { title: "Gray 400", hex: "#9ea6b3" }, "500": { title: "Gray 500", hex: "#8690a0" }, "600": { title: "Gray 600", hex: "#6e7683" }, "700": { title: "Gray 700", hex: "#565d67" }, "800": { title: "Gray 800", hex: "#3f434a" }, "900": { title: "Gray 900", hex: "#272a2e" }, "950": { title: "Gray 950", hex: "#1b1d20" } };
    var blue = { "50": { title: "Blue 50", hex: "#e8f1fe" }, "100": { title: "Blue 100", hex: "#d2e3fe" }, "200": { title: "Blue 200", hex: "#a6c8fd" }, "300": { title: "Blue 300", hex: "#7aacfd" }, "400": { title: "Blue 400", hex: "#4e91fc" }, "500": { title: "Blue 500", hex: "#2276fc" }, "600": { title: "Blue 600", hex: "#1e61cd" }, "700": { title: "Blue 700", hex: "#1a4d9e" }, "800": { title: "Blue 800", hex: "#17396f" }, "900": { title: "Blue 900", hex: "#132540" }, "950": { title: "Blue 950", hex: "#111b29" } };
    var purple = { "50": { title: "Purple 50", hex: "#f8e9fe" }, "100": { title: "Purple 100", hex: "#f2d3fe" }, "200": { title: "Purple 200", hex: "#e6a7fd" }, "300": { title: "Purple 300", hex: "#d97bfd" }, "400": { title: "Purple 400", hex: "#cd4efc" }, "500": { title: "Purple 500", hex: "#c123fc" }, "600": { title: "Purple 600", hex: "#9d1fcd" }, "700": { title: "Purple 700", hex: "#7a1b9e" }, "800": { title: "Purple 800", hex: "#56186f" }, "900": { title: "Purple 900", hex: "#331440" }, "950": { title: "Purple 950", hex: "#211229" } };
    var magenta = { "50": { title: "Magenta 50", hex: "#fcebf5" }, "100": { title: "Magenta 100", hex: "#f9d7eb" }, "200": { title: "Magenta 200", hex: "#f4afd8" }, "300": { title: "Magenta 300", hex: "#ef87c4" }, "400": { title: "Magenta 400", hex: "#ea5fb1" }, "500": { title: "Magenta 500", hex: "#e5389e" }, "600": { title: "Magenta 600", hex: "#ba3082" }, "700": { title: "Magenta 700", hex: "#8f2866" }, "800": { title: "Magenta 800", hex: "#65204a" }, "900": { title: "Magenta 900", hex: "#3a182d" }, "950": { title: "Magenta 950", hex: "#25141f" } };
    var red = { "50": { title: "Red 50", hex: "#fdebea" }, "100": { title: "Red 100", hex: "#fcd8d5" }, "200": { title: "Red 200", hex: "#f9b1ab" }, "300": { title: "Red 300", hex: "#f68b82" }, "400": { title: "Red 400", hex: "#f36458" }, "500": { title: "Red 500", hex: "#f03e2f" }, "600": { title: "Red 600", hex: "#c33529" }, "700": { title: "Red 700", hex: "#962c23" }, "800": { title: "Red 800", hex: "#69231d" }, "900": { title: "Red 900", hex: "#3c1a17" }, "950": { title: "Red 950", hex: "#261514" } };
    var orange = { "50": { title: "Orange 50", hex: "#fef0e6" }, "100": { title: "Orange 100", hex: "#fee2ce" }, "200": { title: "Orange 200", hex: "#fdc59d" }, "300": { title: "Orange 300", hex: "#fca86d" }, "400": { title: "Orange 400", hex: "#fb8b3c" }, "500": { title: "Orange 500", hex: "#e57322" }, "600": { title: "Orange 600", hex: "#ba5f1f" }, "700": { title: "Orange 700", hex: "#904b1b" }, "800": { title: "Orange 800", hex: "#653818" }, "900": { title: "Orange 900", hex: "#3a2415" }, "950": { title: "Orange 950", hex: "#251a13" } };
    var yellow = { "50": { title: "Yellow 50", hex: "#fef7da" }, "100": { title: "Yellow 100", hex: "#fdefb6" }, "200": { title: "Yellow 200", hex: "#fcdf6d" }, "300": { title: "Yellow 300", hex: "#fbd024" }, "400": { title: "Yellow 400", hex: "#d9b421" }, "500": { title: "Yellow 500", hex: "#b7991e" }, "600": { title: "Yellow 600", hex: "#967e1c" }, "700": { title: "Yellow 700", hex: "#746219" }, "800": { title: "Yellow 800", hex: "#534717" }, "900": { title: "Yellow 900", hex: "#312c14" }, "950": { title: "Yellow 950", hex: "#201e13" } };
    var green = { "50": { title: "Green 50", hex: "#e7f9ed" }, "100": { title: "Green 100", hex: "#d0f4dc" }, "200": { title: "Green 200", hex: "#a1eaba" }, "300": { title: "Green 300", hex: "#72e097" }, "400": { title: "Green 400", hex: "#43d675" }, "500": { title: "Green 500", hex: "#3ab564" }, "600": { title: "Green 600", hex: "#329454" }, "700": { title: "Green 700", hex: "#297343" }, "800": { title: "Green 800", hex: "#215233" }, "900": { title: "Green 900", hex: "#183122" }, "950": { title: "Green 950", hex: "#14211a" } };
    var cyan = { "50": { title: "Cyan 50", hex: "#e3fafd" }, "100": { title: "Cyan 100", hex: "#c7f5fc" }, "200": { title: "Cyan 200", hex: "#90ecf9" }, "300": { title: "Cyan 300", hex: "#59e3f6" }, "400": { title: "Cyan 400", hex: "#22daf4" }, "500": { title: "Cyan 500", hex: "#1fb8ce" }, "600": { title: "Cyan 600", hex: "#1c97a8" }, "700": { title: "Cyan 700", hex: "#197583" }, "800": { title: "Cyan 800", hex: "#16545d" }, "900": { title: "Cyan 900", hex: "#133237" }, "950": { title: "Cyan 950", hex: "#112124" } };
    var hues = { gray, blue, purple, magenta, red, orange, yellow, green, cyan };
    var black$2 = { title: "Black", hex: black$1 };
    var white$2 = { title: "White", hex: white$1 };
    var AccessDeniedIcon = React$2.forwardRef(function AccessDeniedIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "access-denied", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M18.1569 6.84315C21.281 9.96734 21.281 15.0327 18.1569 18.1569C15.0327 21.281 9.96734 21.281 6.84314 18.1569C3.71895 15.0327 3.71895 9.96734 6.84314 6.84315C9.96734 3.71895 15.0327 3.71895 18.1569 6.84315ZM18.1569 6.84315L6.84401 18.156", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var ActivityIcon = React$2.forwardRef(function ActivityIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "activity", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M21 15H19L15.5 7L11 18L8 12L6 15H4", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var AddCircleIcon = React$2.forwardRef(function AddCircleIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "add-circle", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8 12.4H17M12.5 8V17M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var AddIcon = React$2.forwardRef(function AddIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "add", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 5V20M5 12.5H20", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var ApiIcon = React$2.forwardRef(function ApiIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "api", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5.93047 13.2107L6.66782 10.3728H6.73089L7.45854 13.2107H5.93047ZM8.17164 16H9.66089L7.56041 9H5.93047L3.82999 16H5.20767L5.65396 14.2876H7.73505L8.17164 16Z", fill: "currentColor" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5389 9V16H11.9166V13.7782H13.0323C14.541 13.7782 15.5015 12.8517 15.5015 11.3964C15.5015 9.92654 14.5701 9 13.1003 9H10.5389ZM11.9166 10.1303H12.751C13.6533 10.1303 14.1044 10.5475 14.1044 11.3867C14.1044 12.2308 13.6533 12.6431 12.751 12.6431H11.9166V10.1303Z", fill: "currentColor" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M21.1675 16V14.8164H19.717V10.1836H21.1675V9H16.8889V10.1836H18.3393V14.8164H16.8889V16H21.1675Z", fill: "currentColor" })] });
    });
    var ArchiveIcon = React$2.forwardRef(function ArchiveIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "archive", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16 14L12.5 17.5L9 14M4.5 7.5V20.5H20.5V7.5L18.5 4.5H6.5L4.5 7.5Z", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 10.5V17", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M4.5 7.5H20.5", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var ArrowDownIcon = React$2.forwardRef(function ArrowDownIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "arrow-down", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 18.5V6M12.5 18.5L18 13M12.5 18.5L7 13", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var ArrowLeftIcon = React$2.forwardRef(function ArrowLeftIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "arrow-left", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12 18L6.5 12.5L12 7M6.5 12.5H19", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var ArrowRightIcon = React$2.forwardRef(function ArrowRightIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "arrow-right", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M13 7L18.5 12.5L13 18M18.5 12.5H6", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var ArrowTopRightIcon = React$2.forwardRef(function ArrowTopRightIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "arrow-top-right", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9 8.5H16.5V16", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16.5 8.5L7 18", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var ArrowUpIcon = React$2.forwardRef(function ArrowUpIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "arrow-up", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 6V18.5M7 11.5L12.5 6L18 11.5", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var BarChartIcon = React$2.forwardRef(function BarChartIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "bar-chart", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5.5 5V19.5H20M8.5 18V13M11.5 18V9M14.5 18V11M17.5 18V7", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var BasketIcon = React$2.forwardRef(function BasketIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "basket", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8.5 10.5H5L6.5 19.5H18.5L20 10.5H16.5M8.5 10.5L10.2721 5.18377C10.4082 4.77543 10.7903 4.5 11.2208 4.5H13.7792C14.2097 4.5 14.5918 4.77543 14.7279 5.18377L16.5 10.5M8.5 10.5H16.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 10.5V19.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9.5 19.5L8.5 10.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M15.5 19.5L16.5 10.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M19.5 13.5H5.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M19 16.5H6", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var BellIcon = React$2.forwardRef(function BellIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "bell", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 17.5V18.5C10.5 20 11.5 20.5 12.5 20.5C13.5 20.5 14.5 20 14.5 18.5V17.5M5.5 17C6.5 15.5 6.5 15 6.5 12C6.5 8 8.5 5.5 12.5 5.5C16.5 5.5 18.5 8 18.5 12C18.5 15 18.5 15.5 19.5 17V17.5H5.5V17Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var BillIcon = React$2.forwardRef(function BillIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "bill", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M6.50001 5.5C8.50003 5.5 8.50003 8 8.50003 8V9.5M6.50001 5.5C4.5 5.5 4.5 8 4.5 8L4.50001 9.5H8.50003M6.50001 5.5C6.50001 5.5 15.8333 5.5 17.6667 5.5C19.5 5.5 19.5 8.5 19.5 8.5V20L17.6667 19L15.8333 20L14 19L12.1667 20L10.3334 19L8.50003 20V9.5M11 12.5H15M11 9.5H16M11 15.5H16", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var BinaryDocumentIcon = React$2.forwardRef(function BinaryDocumentIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "binary-document", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9.5 11.5V16.5M10.5 4.5H18.5V20.5H6.5V8.5L10.5 4.5ZM12.5 11.5V16.5H15.5V11.5H12.5Z", stroke: "currentColor", strokeWidth: 1.2, strokeLinecap: "square" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 4.5V8.5H6.5", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var BlockContentIcon = React$2.forwardRef(function BlockContentIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "block-content", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M21 7.59999L11 7.59999V6.39999L21 6.39999V7.59999Z", fill: "currentColor" }), /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M21 11.2667L12.4833 11.2667V10.0667L21 10.0667V11.2667Z", fill: "currentColor" }), /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M21 14.9334H13.9254V13.7334L21 13.7334V14.9334Z", fill: "currentColor" }), /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M21 18.6002H4V17.4002H21V18.6002Z", fill: "currentColor" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9.86438 15.6H11.2L8.27623 7.59999H6.92377L4 15.6H5.29072L6.0371 13.4766H9.12362L9.86438 15.6ZM7.53546 9.05252H7.63086L8.80374 12.4344H6.35698L7.53546 9.05252Z", fill: "currentColor" })] });
    });
    var BlockElementIcon = React$2.forwardRef(function BlockElementIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "block-element", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M6.5 8.5V7.9H5.9V8.5H6.5ZM18.5 8.5H19.1V7.9H18.5V8.5ZM6.5 16.5H5.9V17.1H6.5V16.5ZM18.5 16.5V17.1H19.1V16.5H18.5ZM6.5 9.1H18.5V7.9H6.5V9.1ZM7.1 16.5V8.5H5.9V16.5H7.1ZM18.5 15.9H6.5V17.1H18.5V15.9ZM17.9 8.5V16.5H19.1V8.5H17.9ZM5 20.1H20V18.9H5V20.1ZM5 6.1H20V4.9H5V6.1Z", fill: "currentColor" }) });
    });
    var BlockquoteIcon = React$2.forwardRef(function BlockquoteIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "blockquote", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10 17.5H19M6 7.5H19M10 12.5H17M6.5 12V18", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var BoldIcon = React$2.forwardRef(function BoldIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "bold", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M13.2087 18C15.5322 18 16.9731 16.793 16.9731 14.8844C16.9731 13.4812 15.9245 12.3949 14.4836 12.2892V12.1534C15.6001 11.9875 16.4526 10.9841 16.4526 9.82991C16.4526 8.14761 15.1927 7.11409 13.0804 7.11409H8.32019V18H13.2087ZM10.5985 8.85674H12.4995C13.5859 8.85674 14.212 9.37727 14.212 10.2448C14.212 11.1199 13.5406 11.6254 12.3109 11.6254H10.5985V8.85674ZM10.5985 16.2574V13.1643H12.575C13.9178 13.1643 14.6496 13.6924 14.6496 14.6882C14.6496 15.7066 13.9404 16.2574 12.6278 16.2574H10.5985Z", fill: "currentColor" }) });
    });
    var BookIcon = React$2.forwardRef(function BookIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "book", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 18.5L4.5 19.5V18.5M12.5 18.5L20.5 19.5V18.5M12.5 18.5V6.5M12.5 18.5H4.5M12.5 18.5H20.5M4.5 18.5V17.5M20.5 18.5V17.5M4.5 5.5V17.5L12.5 18.5L20.5 17.5V5.5L12.5 6.5L4.5 5.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var BottleIcon = React$2.forwardRef(function BottleIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "bottle", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M7.5 17.5L17.5 17.5M17.5 13C17.5 12.087 17.5 11.3518 17.5 11C17.5 8.5 14.5 9 14.5 7.37494L14.5 5.5M17.5 13C17.5 15.1229 17.5 18.7543 17.5 20.5022C17.5 21.0545 17.0523 21.5 16.5 21.5L8.5 21.5C7.94771 21.5 7.5 21.0547 7.5 20.5024C7.5 18.8157 7.5 15.3546 7.5 13M17.5 13L7.5 13M7.5 13C7.5 12.2538 7.5 11.5648 7.5 11C7.5 8.5 10.5 9 10.5 7.37494L10.5 5.5M10.5 5.5L10.5 3.99999C10.5 3.72385 10.7239 3.49999 11 3.49999L14 3.49999C14.2761 3.49999 14.5 3.72385 14.5 3.99999L14.5 5.5M10.5 5.5L14.5 5.5", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var BulbFilledIcon = React$2.forwardRef(function BulbFilledIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "bulb-filled", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M16.4272 14.3368C15.8273 15.1773 15.5 16.1794 15.5 17.212V18.5C15.5 19.0523 15.0523 19.5 14.5 19.5H14V20.5C14 21.0523 13.5523 21.5 13 21.5H12C11.4477 21.5 11 21.0523 11 20.5V19.5H10.5C9.94772 19.5 9.5 19.0523 9.5 18.5V17.212C9.5 16.1794 9.17266 15.1773 8.57284 14.3368C7.60216 12.9767 7 11.94 7 10C7 7 9.5 4.5 12.5 4.5C15.5 4.5 18 7 18 10C18 11.94 17.3978 12.9767 16.4272 14.3368Z", fill: "currentColor" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16.4272 14.3368L15.9388 13.9883L16.4272 14.3368ZM14 19.5V18.9H13.4V19.5H14ZM11 19.5H11.6V18.9H11V19.5ZM8.57284 14.3368L9.06122 13.9883H9.06122L8.57284 14.3368ZM16.1 17.212C16.1 16.3069 16.3868 15.4261 16.9155 14.6853L15.9388 13.9883C15.2678 14.9284 14.9 16.0519 14.9 17.212H16.1ZM16.1 18.5V17.212H14.9V18.5H16.1ZM14.5 20.1C15.3837 20.1 16.1 19.3837 16.1 18.5H14.9C14.9 18.7209 14.7209 18.9 14.5 18.9V20.1ZM14 20.1H14.5V18.9H14V20.1ZM13.4 19.5V20.5H14.6V19.5H13.4ZM13.4 20.5C13.4 20.7209 13.2209 20.9 13 20.9V22.1C13.8837 22.1 14.6 21.3837 14.6 20.5H13.4ZM13 20.9H12V22.1H13V20.9ZM12 20.9C11.7791 20.9 11.6 20.7209 11.6 20.5H10.4C10.4 21.3837 11.1163 22.1 12 22.1V20.9ZM11.6 20.5V19.5H10.4V20.5H11.6ZM10.5 20.1H11V18.9H10.5V20.1ZM8.9 18.5C8.9 19.3837 9.61634 20.1 10.5 20.1V18.9C10.2791 18.9 10.1 18.7209 10.1 18.5H8.9ZM8.9 17.212V18.5H10.1V17.212H8.9ZM8.08446 14.6853C8.61315 15.4261 8.9 16.3069 8.9 17.212H10.1C10.1 16.0519 9.73217 14.9284 9.06122 13.9883L8.08446 14.6853ZM6.4 10C6.4 11.0377 6.56208 11.8595 6.86624 12.611C7.16624 13.3521 7.59495 13.9995 8.08446 14.6853L9.06122 13.9883C8.58004 13.314 8.22233 12.7629 7.97858 12.1607C7.739 11.5688 7.6 10.9023 7.6 10H6.4ZM12.5 3.9C9.16863 3.9 6.4 6.66863 6.4 10H7.6C7.6 7.33137 9.83137 5.1 12.5 5.1V3.9ZM18.6 10C18.6 6.66863 15.8314 3.9 12.5 3.9V5.1C15.1686 5.1 17.4 7.33137 17.4 10H18.6ZM16.9155 14.6853C17.4051 13.9995 17.8338 13.3521 18.1338 12.611C18.4379 11.8595 18.6 11.0377 18.6 10H17.4C17.4 10.9023 17.261 11.5688 17.0214 12.1607C16.7777 12.7629 16.42 13.314 15.9388 13.9883L16.9155 14.6853Z", fill: "currentColor" })] });
    });
    var BulbOutlineIcon = React$2.forwardRef(function BulbOutlineIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "bulb-outline", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9.5 16.5H15.5M11 20V20.5C11 21.0523 11.4477 21.5 12 21.5H13C13.5523 21.5 14 21.0523 14 20.5V20M18 10C18 11.94 17.3978 12.9767 16.4272 14.3368C15.8273 15.1773 15.5 16.1794 15.5 17.212V18.5C15.5 19.0523 15.0523 19.5 14.5 19.5H10.5C9.94772 19.5 9.5 19.0523 9.5 18.5V17.212C9.5 16.1794 9.17266 15.1773 8.57284 14.3368C7.60216 12.9767 7 11.94 7 10C7 7 9.5 4.5 12.5 4.5C15.5 4.5 18 7 18 10Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var CalendarIcon$1 = React$2.forwardRef(function CalendarIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "calendar", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M4.5 10.5V19.5H20.5V10.5M4.5 10.5V5.5H20.5V10.5M4.5 10.5H12.5H20.5M20.5 13.5H16.5M16.5 13.5H12.5M16.5 13.5V10.5M16.5 13.5V16.5M12.5 13.5H8.5M12.5 13.5V16.5M12.5 13.5V10.5M8.5 13.5H4.5M8.5 13.5V10.5M8.5 13.5V16.5M20.5 16.5H16.5M16.5 16.5H12.5M16.5 16.5V19.5M12.5 16.5H8.5M12.5 16.5V19.5M8.5 16.5H4.5M8.5 16.5V19.5M17.5 8V3M7.5 8V3", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var CaseIcon = React$2.forwardRef(function CaseIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "case", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9 8.5122V6C9 5.44772 9.44772 5 10 5H15C15.5523 5 16 5.44772 16 6V8.5122M4.5 12V18.5C4.5 19.0523 4.94772 19.5 5.5 19.5H19.5C20.0523 19.5 20.5 19.0523 20.5 18.5V12M4.5 12V9.5122C4.5 8.95991 4.94772 8.5122 5.5 8.5122H19.5C20.0523 8.5122 20.5 8.95991 20.5 9.5122V12M4.5 12L11.7978 14.7367C12.2505 14.9064 12.7495 14.9064 13.2022 14.7367L20.5 12", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var ChartUpwardIcon = React$2.forwardRef(function ChartUpwardIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "chart-upward", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5.5 5V19.5H20M7.5 16L11.5 11.5L15.5 14L19.5 8.5", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var CheckmarkCircleIcon = React$2.forwardRef(function CheckmarkCircleIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "checkmark-circle", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9.5 12.1316L11.7414 14.5L16 10M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var CheckmarkIcon = React$2.forwardRef(function CheckmarkIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "checkmark", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5.5 11.5L10.5 16.5L19.5 7.60001", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var ChevronDownIcon = React$2.forwardRef(function ChevronDownIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "chevron-down", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M17 10.5L12.5 15L8 10.5", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var ChevronLeftIcon = React$2.forwardRef(function ChevronLeftIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "chevron-left", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M14.5 17L10 12.5L14.5 8", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var ChevronRightIcon = React$2.forwardRef(function ChevronRightIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "chevron-right", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 8L15 12.5L10.5 17", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var ChevronUpIcon = React$2.forwardRef(function ChevronUpIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "chevron-up", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8 14.5L12.5 10L17 14.5", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var CircleIcon$1 = React$2.forwardRef(function CircleIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "circle", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("circle", { cx: 12.5, cy: 12.5, r: 8, stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var ClipboardIcon = React$2.forwardRef(function ClipboardIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "clipboard", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8 5.5H6.5V19.5H18.5V5.5H17M12.5 3C11.5 3 11.5 4.5 11 4.5C10 4.5 9.5 5 9.5 6.5H15.6C15.6 5 15 4.5 14 4.5C13.5 4.5 13.5 3 12.5 3Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var ClipboardImageIcon = React$2.forwardRef(function ClipboardImageIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "clipboard-image", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8 5.5H6.5V19.5H10.5M17 5.5H18.5V11.5M10.5 18.5L12.73 15.8983C13.1327 15.4285 13.8613 15.4335 14.2575 15.909L15.299 17.1588C15.6754 17.6105 16.3585 17.6415 16.7743 17.2257L16.9903 17.0097C17.2947 16.7053 17.7597 16.6298 18.1447 16.8223L20.5 18M10.5 11.5H20.5V21.5H10.5V11.5ZM12.5 3C11.5 3 11.5 4.5 11 4.5C10 4.5 9.5 5 9.5 6.5H15.6C15.6 5 15 4.5 14 4.5C13.5 4.5 13.5 3 12.5 3Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var ClockIcon = React$2.forwardRef(function ClockIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "clock", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 8V12.5L15.5 15.5M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var CloseCircleIcon = React$2.forwardRef(function CloseCircleIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "close-circle", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9.5 15.5L12.5 12.5M12.5 12.5L15.5 9.5M12.5 12.5L9.5 9.5M12.5 12.5L15.5 15.5M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var CloseIcon = React$2.forwardRef(function CloseIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "close", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M18 7L7 18M7 7L18 18", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var CodeBlockIcon = React$2.forwardRef(function CodeBlockIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "code-block", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M11 15L8.5 12.5L11 10M14 10L16.5 12.5L14 15M5.5 6.5H19.5V18.5H5.5V6.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var CodeIcon = React$2.forwardRef(function CodeIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "code", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M7.5 12.5L7.07574 12.0757L6.65147 12.5L7.07574 12.9243L7.5 12.5ZM17.5 12.5L17.9243 12.9243L18.3485 12.5L17.9243 12.0757L17.5 12.5ZM11.4243 15.5757L7.92426 12.0757L7.07574 12.9243L10.5757 16.4243L11.4243 15.5757ZM7.92426 12.9243L11.4243 9.42426L10.5757 8.57574L7.07574 12.0757L7.92426 12.9243ZM13.5757 9.42426L17.0757 12.9243L17.9243 12.0757L14.4243 8.57574L13.5757 9.42426ZM17.0757 12.0757L13.5757 15.5757L14.4243 16.4243L17.9243 12.9243L17.0757 12.0757Z", fill: "currentColor" }) });
    });
    var CogIcon = React$2.forwardRef(function CogIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "cog", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M14.2624 5.40607L13.8714 4.42848C13.6471 3.86771 13.104 3.5 12.5 3.5C11.896 3.5 11.3529 3.86771 11.1286 4.42848L10.7376 5.40607C10.5857 5.78585 10.2869 6.08826 9.90901 6.2448C9.53111 6.40133 9.10603 6.39874 8.73006 6.23761L7.76229 5.82285C7.20716 5.58494 6.56311 5.70897 6.13604 6.13604C5.70897 6.56311 5.58494 7.20716 5.82285 7.76229L6.23761 8.73006C6.39874 9.10602 6.40133 9.53111 6.2448 9.90901C6.08826 10.2869 5.78585 10.5857 5.40607 10.7376L4.42848 11.1286C3.86771 11.3529 3.5 11.896 3.5 12.5C3.5 13.104 3.86771 13.6471 4.42848 13.8714L5.40607 14.2624C5.78585 14.4143 6.08826 14.7131 6.2448 15.091C6.40133 15.4689 6.39874 15.894 6.23761 16.2699L5.82285 17.2377C5.58494 17.7928 5.70897 18.4369 6.13604 18.864C6.56311 19.291 7.20716 19.4151 7.76229 19.1772L8.73006 18.7624C9.10603 18.6013 9.53111 18.5987 9.90901 18.7552C10.2869 18.9117 10.5857 19.2141 10.7376 19.5939L11.1286 20.5715C11.3529 21.1323 11.896 21.5 12.5 21.5C13.104 21.5 13.6471 21.1323 13.8714 20.5715L14.2624 19.5939C14.4143 19.2141 14.7131 18.9117 15.091 18.7552C15.4689 18.5987 15.894 18.6013 16.2699 18.7624L17.2377 19.1771C17.7928 19.4151 18.4369 19.291 18.864 18.864C19.291 18.4369 19.4151 17.7928 19.1771 17.2377L18.7624 16.2699C18.6013 15.894 18.5987 15.4689 18.7552 15.091C18.9117 14.7131 19.2141 14.4143 19.5939 14.2624L20.5715 13.8714C21.1323 13.6471 21.5 13.104 21.5 12.5C21.5 11.896 21.1323 11.3529 20.5715 11.1286L19.5939 10.7376C19.2141 10.5857 18.9117 10.2869 18.7552 9.90901C18.5987 9.53111 18.6013 9.10602 18.7624 8.73006L19.1772 7.76229C19.4151 7.20716 19.291 6.56311 18.864 6.13604C18.4369 5.70897 17.7928 5.58494 17.2377 5.82285L16.2699 6.23761C15.894 6.39874 15.4689 6.40133 15.091 6.2448C14.7131 6.08826 14.4143 5.78585 14.2624 5.40607Z", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16.5 12.5C16.5 14.7091 14.7091 16.5 12.5 16.5C10.2909 16.5 8.5 14.7091 8.5 12.5C8.5 10.2909 10.2909 8.5 12.5 8.5C14.7091 8.5 16.5 10.2909 16.5 12.5Z", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var CollapseIcon = React$2.forwardRef(function CollapseIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "collapse", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M6 14.5L10.5 14.5V19M19 10.5H14.5L14.5 6", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 14.5L6 19", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M14.5 10.5L19 6", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var CommentIcon = React$2.forwardRef(function CommentIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "comment", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M7.5 16.5H9.5V20.5L13.5 16.5H17.5C18.6046 16.5 19.5 15.6046 19.5 14.5V8.5C19.5 7.39543 18.6046 6.5 17.5 6.5H7.5C6.39543 6.5 5.5 7.39543 5.5 8.5V14.5C5.5 15.6046 6.39543 16.5 7.5 16.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var ComponentIcon = React$2.forwardRef(function ComponentIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "component", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8.5 8.5L12.5 12.5M12.5 12.5L16.5 16.5M12.5 12.5L16.5 8.5M12.5 12.5L8.5 16.5M12.5 4L21 12.5L12.5 21L4 12.5L12.5 4Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var ComposeIcon = React$2.forwardRef(function ComposeIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "compose", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M17 6L19 8M14 5.5H5.5V19.5H19.5V11M9 16L9.5 13.5L19 4L21 6L11.5 15.5L9 16Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var ControlsIcon = React$2.forwardRef(function ControlsIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "controls", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M6.5 5V7.5M6.5 7.5C5.39543 7.5 4.5 8.39543 4.5 9.5C4.5 10.6046 5.39543 11.5 6.5 11.5M6.5 7.5C7.60457 7.5 8.5 8.39543 8.5 9.5C8.5 10.6046 7.60457 11.5 6.5 11.5M6.5 11.5V20M12.5 5V13.5M12.5 13.5C11.3954 13.5 10.5 14.3954 10.5 15.5C10.5 16.6046 11.3954 17.5 12.5 17.5M12.5 13.5C13.6046 13.5 14.5 14.3954 14.5 15.5C14.5 16.6046 13.6046 17.5 12.5 17.5M12.5 17.5V20M18.5 5V7.5M18.5 7.5C17.3954 7.5 16.5 8.39543 16.5 9.5C16.5 10.6046 17.3954 11.5 18.5 11.5M18.5 7.5C19.6046 7.5 20.5 8.39543 20.5 9.5C20.5 10.6046 19.6046 11.5 18.5 11.5M18.5 11.5V20", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var CopyIcon = React$2.forwardRef(function CopyIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "copy", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8.5 8.5H5.5V20.5H16.5V16.5M19.5 4.5H8.5V16.5H19.5V4.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var CreditCardIcon = React$2.forwardRef(function CreditCardIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "credit-card", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M4.5 10.5H20.5M4.5 9.5H20.5M4.5 11.5H20.5M7 15.5H14M5.5 18.5H19.5C20.0523 18.5 20.5 18.0523 20.5 17.5V7.5C20.5 6.94772 20.0523 6.5 19.5 6.5H5.5C4.94772 6.5 4.5 6.94772 4.5 7.5V17.5C4.5 18.0523 4.94772 18.5 5.5 18.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var CropIcon = React$2.forwardRef(function CropIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "crop", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8.5 4V16.5H21M4 8.5H16.5V21", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var DashboardIcon = React$2.forwardRef(function DashboardIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "dashboard", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M14.5 19.5V12.5M10.5 12.5V5.5M5.5 12.5H19.5M5.5 19.5H19.5V5.5H5.5V19.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var DatabaseIcon = React$2.forwardRef(function DatabaseIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "database", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M18.5 7V17.5C18.5 19.0594 16.0504 20.5 12.5 20.5C8.9496 20.5 6.5 19.0594 6.5 17.5V7M18.5 7C18.5 8.45543 15.8137 9.5 12.5 9.5C9.18629 9.5 6.5 8.45543 6.5 7C6.5 5.54457 9.18629 4.5 12.5 4.5C15.8137 4.5 18.5 5.54457 18.5 7Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var DesktopIcon$1 = React$2.forwardRef(function DesktopIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "desktop", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M4.5 14.5V16.5C4.5 17.0523 4.94772 17.5 5.5 17.5H12.5M4.5 14.5V6.5C4.5 5.94772 4.94772 5.5 5.5 5.5H19.5C20.0523 5.5 20.5 5.94772 20.5 6.5V14.5M4.5 14.5H20.5M20.5 14.5V16.5C20.5 17.0523 20.0523 17.5 19.5 17.5H12.5M12.5 17.5V20.5M12.5 20.5H8M12.5 20.5H17", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var DocumentIcon = React$2.forwardRef(function DocumentIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "document", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 4.5V8.5H6.5M10.5 4.5H18.5V20.5H6.5V8.5L10.5 4.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var DocumentPdfIcon = React$2.forwardRef(function DocumentPdfIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "document-pdf", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 4.5V8.5H6.5M10.5 4.5H18.5V20.5H6.5V8.5L10.5 4.5Z", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.7414 13.14L12.749 13.1046C12.896 12.4991 13.0809 11.7442 12.9365 11.0602C12.8402 10.5206 12.4425 10.3104 12.1031 10.2952C11.7028 10.2775 11.3456 10.5054 11.2569 10.8373C11.0897 11.4453 11.2392 12.2762 11.5128 13.3351C11.1683 14.1559 10.6186 15.3491 10.2158 16.0584C9.46592 16.446 8.46022 17.0438 8.31075 17.7987C8.28036 17.9381 8.31582 18.1154 8.39942 18.275C8.49315 18.4523 8.64261 18.5891 8.81741 18.655C8.89341 18.6828 8.9846 18.7056 9.091 18.7056C9.53686 18.7056 10.2588 18.3459 11.2215 16.6942C11.3684 16.6461 11.5204 16.5954 11.6673 16.5448C12.3564 16.3117 13.0708 16.0685 13.7167 15.9596C14.4311 16.3421 15.2443 16.5878 15.7966 16.5878C16.3437 16.5878 16.5591 16.2636 16.6401 16.0685C16.782 15.7265 16.7136 15.2959 16.4831 15.0653C16.1487 14.736 15.3355 14.6499 14.0689 14.8069C13.4457 14.4269 13.0378 13.9102 12.7414 13.14ZM9.96245 16.9881C9.61032 17.4998 9.34433 17.7557 9.19993 17.8671C9.36966 17.5555 9.70152 17.2262 9.96245 16.9881ZM12.1816 11.0222C12.3133 11.2477 12.2956 11.9291 12.1943 12.2737C12.0701 11.7695 12.0524 11.0552 12.1259 10.9716L12.1816 11.0222ZM12.1411 14.0748C12.4121 14.5435 12.7541 14.9463 13.1316 15.2452C12.5844 15.3693 12.0853 15.5745 11.6395 15.7569C11.5331 15.8 11.4292 15.843 11.3279 15.8836C11.6648 15.2731 11.946 14.5815 12.1411 14.0748ZM16.0828 15.7341L16.0676 15.7569C16.0676 15.7569 15.8346 15.8988 14.9403 15.5466C15.9688 15.4985 16.0828 15.7341 16.0828 15.7341Z", fill: "currentColor" })] });
    });
    var DocumentRemoveIcon = React$2.forwardRef(function DocumentRemoveIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "document-remove", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M10.2515 3.9H10.5H18.5H19.1V4.5V11.9H17.9V5.1H11.1V8.5V9.1H10.5H7.09999V11.9H5.89999V8.5V8.25147L6.07573 8.07574L10.0757 4.07574L10.2515 3.9ZM17.9 19.9V14.1H19.1V20.5V21.1H18.5H6.49999H5.89999V20.5V14.1H7.09999V19.9H17.9ZM7.94852 7.9H9.89999V5.94853L7.94852 7.9ZM2 13.6H23V12.4H2V13.6Z", fill: "currentColor" }) });
    });
    var DocumentSheetIcon = React$2.forwardRef(function DocumentSheetIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "document-sheet", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 4.5V8.5H6.5M10.5 4.5H18.5V20.5H6.5V8.5L10.5 4.5Z", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("line", { x1: 10.4, y1: 19, x2: 10.4, y2: 10, stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("line", { x1: 14.4, y1: 19, x2: 14.4, y2: 10, stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("line", { x1: 8, y1: 12.4, x2: 17, y2: 12.4, stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("line", { x1: 8, y1: 16.4, x2: 17, y2: 16.4, stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var DocumentTextIcon = React$2.forwardRef(function DocumentTextIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "document-text", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 4.5V8.5H6.5M10.5 4.5H18.5V20.5H6.5V8.5L10.5 4.5Z", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16 12H12.5H9", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M14 15H12.5H9", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var DocumentVideoIcon = React$2.forwardRef(function DocumentVideoIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "document-video", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 4.5V8.5H6.5M10.5 4.5H18.5V20.5H6.5V8.5L10.5 4.5Z", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M11.5 15.5V12.5L14 14L11.5 15.5Z", fill: "currentColor", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var DocumentWordIcon = React$2.forwardRef(function DocumentWordIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "document-word", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 4.5V8.5H6.5M10.5 4.5H18.5V20.5H6.5V8.5L10.5 4.5Z", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.4699 13.4588H12.5263L13.6328 17H14.5435L16 12H14.9952L14.0656 15.7214H14.0129L12.929 12H12.0672L10.9984 15.7214H10.9419L10.0124 12H9L10.4565 17H11.371L12.4699 13.4588Z", fill: "currentColor" })] });
    });
    var DocumentZipIcon = React$2.forwardRef(function DocumentZipIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "document-zip", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 4.5V8.5H6.5M10.5 4.5H18.5V20.5H6.5V8.5L10.5 4.5Z", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M15 4.5L13.5 5L15.5 6L13.5 7L15.5 8L13.5 9L15.5 10L13.5 11L14.5 11.5V13", stroke: "currentColor", strokeLinejoin: "round" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M13.5 13H15.5L16 17H13L13.5 13Z", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var DocumentsIcon = React$2.forwardRef(function DocumentsIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "documents", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16.5 6.5H19.5V21.5H8.5V18.5M10 3.5V8H5.5M10 3.5H16.5V18.5H5.5V8L10 3.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var DotIcon = React$2.forwardRef(function DotIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "dot", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("circle", { cx: 12.5, cy: 12.5, r: 1.5, fill: "currentColor", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var DoubleChevronDownIcon = React$2.forwardRef(function DoubleChevronDownIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "double-chevron-down", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M17 8.5L12.5 13L8 8.5M17 12.5L12.5 17L8 12.5", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var DoubleChevronLeftIcon = React$2.forwardRef(function DoubleChevronLeftIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "double-chevron-left", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 17L8 12.5L12.5 8M16.5 17L12 12.5L16.5 8", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var DoubleChevronRightIcon = React$2.forwardRef(function DoubleChevronRightIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "double-chevron-right", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 8L17 12.5L12.5 17M8.5 8L13 12.5L8.5 17", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var DoubleChevronUpIcon = React$2.forwardRef(function DoubleChevronUpIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "double-chevron-up", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8 12.5L12.5 8L17 12.5M8 16.5L12.5 12L17 16.5", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var DownloadIcon = React$2.forwardRef(function DownloadIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "download", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M19.5 17V19.5H5.5V17M17.5 11L12.5 16L7.5 11M12.5 16V4.99998", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var DragHandleIcon = React$2.forwardRef(function DragHandleIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "drag-handle", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M9.5 8C10.3284 8 11 7.32843 11 6.5C11 5.67157 10.3284 5 9.5 5C8.67157 5 8 5.67157 8 6.5C8 7.32843 8.67157 8 9.5 8ZM9.5 14C10.3284 14 11 13.3284 11 12.5C11 11.6716 10.3284 11 9.5 11C8.67157 11 8 11.6716 8 12.5C8 13.3284 8.67157 14 9.5 14ZM11 18.5C11 19.3284 10.3284 20 9.5 20C8.67157 20 8 19.3284 8 18.5C8 17.6716 8.67157 17 9.5 17C10.3284 17 11 17.6716 11 18.5ZM15.5 8C16.3284 8 17 7.32843 17 6.5C17 5.67157 16.3284 5 15.5 5C14.6716 5 14 5.67157 14 6.5C14 7.32843 14.6716 8 15.5 8ZM17 12.5C17 13.3284 16.3284 14 15.5 14C14.6716 14 14 13.3284 14 12.5C14 11.6716 14.6716 11 15.5 11C16.3284 11 17 11.6716 17 12.5ZM15.5 20C16.3284 20 17 19.3284 17 18.5C17 17.6716 16.3284 17 15.5 17C14.6716 17 14 17.6716 14 18.5C14 19.3284 14.6716 20 15.5 20Z", fill: "currentColor" }) });
    });
    var DropIcon = React$2.forwardRef(function DropIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "drop", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M18.5 14.5C18.5 18 16 20.5 12.5 20.5C9 20.5 6.5 18 6.5 14.5C6.5 11 9.5 7.50001 12.5 4.5C15.5 7.5 18.5 11 18.5 14.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var EarthAmericasIcon = React$2.forwardRef(function EarthAmericasIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "earth-americas", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M9.9 19.4303V16.7515L11.5203 15.1312L8.60296 13.4642L7.6 12.2105V13L6.4382 13.2107L5.3943 10.4269C5.20272 11.0847 5.1 11.7804 5.1 12.5C5.1 15.672 7.09572 18.3778 9.9 19.4303ZM15.6 5.77866V11.4485L13.7515 9.6H11.3L10.2922 10.9437L10.7485 11.4H12.6V12.8183L13.3211 13.9H15.7172L18.7651 16.4399C19.484 15.2991 19.9 13.9481 19.9 12.5C19.9 9.52001 18.1385 6.95143 15.6 5.77866ZM15.6 4.47567C18.8178 5.71962 21.1 8.84329 21.1 12.5C21.1 17.2497 17.2496 21.1 12.5 21.1C7.75035 21.1 3.9 17.2497 3.9 12.5C3.9 7.75035 7.75035 3.9 12.5 3.9C13.5164 3.9 14.4915 4.07631 15.3966 4.4H15.6V4.47567Z", fill: "currentColor" }) });
    });
    var EarthGlobeIcon = React$2.forwardRef(function EarthGlobeIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "earth-globe", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5.5 16.5H19.5M5.5 8.5H19.5M4.5 12.5H20.5M12.5 20.5C12.5 20.5 8 18.5 8 12.5C8 6.5 12.5 4.5 12.5 4.5M12.5 4.5C12.5 4.5 17 6.5 17 12.5C17 18.5 12.5 20.5 12.5 20.5M12.5 4.5V20.5M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var EditIcon = React$2.forwardRef(function EditIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "edit", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M15 7L18 10M6 19L7 15L17 5L20 8L10 18L6 19Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var EllipsisHorizontalIcon = React$2.forwardRef(function EllipsisHorizontalIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "ellipsis-horizontal", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M6.5 11C7.32843 11 8 11.6716 8 12.5C8 13.3284 7.32843 14 6.5 14C5.67157 14 5 13.3284 5 12.5C5 11.6716 5.67157 11 6.5 11Z", fill: "currentColor" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 11C13.3284 11 14 11.6716 14 12.5C14 13.3284 13.3284 14 12.5 14C11.6716 14 11 13.3284 11 12.5C11 11.6716 11.6716 11 12.5 11Z", fill: "currentColor" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M18.5 11C19.3284 11 20 11.6716 20 12.5C20 13.3284 19.3284 14 18.5 14C17.6716 14 17 13.3284 17 12.5C17 11.6716 17.6716 11 18.5 11Z", fill: "currentColor" })] });
    });
    var EllipsisVerticalIcon = React$2.forwardRef(function EllipsisVerticalIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "ellipsis-vertical", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M14 6.5C14 7.32843 13.3284 8 12.5 8C11.6716 8 11 7.32843 11 6.5C11 5.67157 11.6716 5 12.5 5C13.3284 5 14 5.67157 14 6.5ZM14 12.5C14 13.3284 13.3284 14 12.5 14C11.6716 14 11 13.3284 11 12.5C11 11.6716 11.6716 11 12.5 11C13.3284 11 14 11.6716 14 12.5ZM12.5 20C13.3284 20 14 19.3284 14 18.5C14 17.6716 13.3284 17 12.5 17C11.6716 17 11 17.6716 11 18.5C11 19.3284 11.6716 20 12.5 20Z", fill: "currentColor" }) });
    });
    var EnvelopeIcon = React$2.forwardRef(function EnvelopeIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "envelope", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M20.5 18.5H4.5V6.5H20.5V18.5Z", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M20.5 18.5L17.75 15.5L15 12.5M4.5 18.5L10 12.5M20.5 6.5L12.5 15L4.5 6.5", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var EqualIcon = React$2.forwardRef(function EqualIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "equal", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M7.5 4.5H3.5V20.5H7.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M17.5 20.5L21.5 20.5L21.5 4.5L17.5 4.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9 10.5H16", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9 14.5H16", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var ErrorFilledIcon = React$2.forwardRef(function ErrorFilledIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "error-filled", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M4 12.5C4 7.80558 7.80558 4 12.5 4C17.1944 4 21 7.80558 21 12.5C21 17.1944 17.1944 21 12.5 21C7.80558 21 4 17.1944 4 12.5ZM13 14.5V16H12V14.5H13ZM12 9V13H13V9H12Z", fill: "currentColor" }) });
    });
    var ErrorOutlineIcon = React$2.forwardRef(function ErrorOutlineIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "error-outline", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 16V14.5M12.5 9V13M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var ExpandIcon = React$2.forwardRef(function ExpandIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "expand", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M14 6.5H18.5V11M11 18.5H6.5V14", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M18.5 6.5L14 11M6.5 18.5L11 14", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var EyeClosedIcon = React$2.forwardRef(function EyeClosedIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "eye-closed", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M7 15.5L5.5 17.5M20.5 12.5C19.8612 13.5647 19.041 14.6294 18.0008 15.501M18.0008 15.501C16.5985 16.676 14.7965 17.5 12.5 17.5M18.0008 15.501L18 15.5M18.0008 15.501L19.5 17.5M12.5 17.5C8.5 17.5 6 15 4.5 12.5M12.5 17.5V20M15.5 17L16.5 19.5M9.5 17L8.5 19.5", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var EyeOpenIcon = React$2.forwardRef(function EyeOpenIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "eye-open", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M5.20513 12.5C6.66296 14.7936 8.9567 16.9 12.5 16.9C16.0433 16.9 18.3371 14.7936 19.7949 12.5C18.3371 10.2064 16.0433 8.1 12.5 8.1C8.9567 8.1 6.66296 10.2064 5.20513 12.5ZM3.98551 12.1913C5.53974 9.60093 8.20179 6.9 12.5 6.9C16.7982 6.9 19.4603 9.60093 21.0145 12.1913L21.1997 12.5L21.0145 12.8087C19.4603 15.3991 16.7982 18.1 12.5 18.1C8.20179 18.1 5.53974 15.3991 3.98551 12.8087L3.80029 12.5L3.98551 12.1913ZM12.5 9.4C10.7879 9.4 9.4 10.7879 9.4 12.5C9.4 14.2121 10.7879 15.6 12.5 15.6C14.2121 15.6 15.6 14.2121 15.6 12.5C15.6 10.7879 14.2121 9.4 12.5 9.4Z", fill: "currentColor" }) });
    });
    var FilterIcon = React$2.forwardRef(function FilterIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "filter", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M11 12L6 7V6L19 6L19 7L14 12V17L11 19V12Z", stroke: "currentColor", strokeWidth: 1.2, strokeLinecap: "square" }) });
    });
    var FolderIcon = React$2.forwardRef(function FolderIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "folder", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M11.5 8.5H19.5V18.5H5.5V5.5H10.5L11.5 8.5ZM11.5 8.5H5.5", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var GenerateIcon = React$2.forwardRef(function GenerateIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "generate", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9 5.30423C6.33576 6.60253 4.5 9.33688 4.5 12.5C4.5 16.9183 8.08172 20.5 12.5 20.5C16.9183 20.5 20.5 16.9183 20.5 12.5C20.5 8.08172 16.9183 4.5 12.5 4.5V14.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16 11L12.5 14.5L9 11", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var HeartFilledIcon = React$2.forwardRef(function HeartFilledIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "heart-filled", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M17 16C15.8 17.3235 12.5 20.5 12.5 20.5C12.5 20.5 9.2 17.3235 8 16C5.2 12.9118 4.5 11.7059 4.5 9.5C4.5 7.29412 6.1 5.5 8.5 5.5C10.5 5.5 11.7 6.82353 12.5 8.14706C13.3 6.82353 14.5 5.5 16.5 5.5C18.9 5.5 20.5 7.29412 20.5 9.5C20.5 11.7059 19.8 12.9118 17 16Z", fill: "currentColor", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var HeartIcon = React$2.forwardRef(function HeartIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "heart", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M17 16C15.8 17.3235 12.5 20.5 12.5 20.5C12.5 20.5 9.2 17.3235 8 16C5.2 12.9118 4.5 11.7059 4.5 9.5C4.5 7.29412 6.1 5.5 8.5 5.5C10.5 5.5 11.7 6.82353 12.5 8.14706C13.3 6.82353 14.5 5.5 16.5 5.5C18.9 5.5 20.5 7.29412 20.5 9.5C20.5 11.7059 19.8 12.9118 17 16Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var HelpCircleIcon = React$2.forwardRef(function HelpCircleIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "help-circle", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 13C12.5 11 14 11.5 14 10C14 9.34375 13.5 8.5 12.5 8.5C11.5 8.5 11 9 10.5 9.5M12.5 16V14.5M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var HomeIcon = React$2.forwardRef(function HomeIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "home", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M6.5 8.75V18.5H18.5V8.75M4.5 10L12.5 5L20.5 10M14.5 18.5V11.5H10.5V18.5", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var IceCreamIcon = React$2.forwardRef(function IceCreamIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "ice-cream", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9.5 13.5L12.5 20.5L15.5 13.5M12.5 8.26389C11.9692 7.78885 11.2684 7.5 10.5 7.5C8.84315 7.5 7.5 8.84315 7.5 10.5C7.5 12.1569 8.84315 13.5 10.5 13.5C11.2684 13.5 11.9692 13.2111 12.5 12.7361M9.5 7.5C9.5 5.84315 10.8431 4.5 12.5 4.5C14.1569 4.5 15.5 5.84315 15.5 7.5M17.5 10.5C17.5 12.1569 16.1569 13.5 14.5 13.5C12.8431 13.5 11.5 12.1569 11.5 10.5C11.5 8.84315 12.8431 7.5 14.5 7.5C16.1569 7.5 17.5 8.84315 17.5 10.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var ImageIcon = React$2.forwardRef(function ImageIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "image", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5.5 15.5L8.79289 12.2071C9.18342 11.8166 9.81658 11.8166 10.2071 12.2071L12.8867 14.8867C13.2386 15.2386 13.7957 15.2782 14.1938 14.9796L15.1192 14.2856C15.3601 14.1049 15.6696 14.0424 15.9618 14.1154L19.5 15M5.5 6.5H19.5V18.5H5.5V6.5ZM15.5 10.5C15.5 11.0523 15.0523 11.5 14.5 11.5C13.9477 11.5 13.5 11.0523 13.5 10.5C13.5 9.94772 13.9477 9.5 14.5 9.5C15.0523 9.5 15.5 9.94772 15.5 10.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var ImageRemoveIcon = React$2.forwardRef(function ImageRemoveIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "image-remove", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M4.9 5.9H5.5H19.5H20.1V6.5V11.4H18.9V7.1H6.1V11.4H4.9V6.5V5.9ZM18.9 13.7315V13.6H20.1V18.5V19.1H19.5H5.5H4.9V18.5V13.6H7.74853L6.1 15.2485V17.9H18.9V14.9685L15.8162 14.1975C15.6994 14.1683 15.5756 14.1933 15.4792 14.2656L14.5538 14.9596C13.9168 15.4374 13.0255 15.374 12.4625 14.811L11.2515 13.6H12.9485L13.311 13.9625C13.4518 14.1032 13.6746 14.1191 13.8338 13.9996L14.3667 13.6H18.3739L18.9 13.7315ZM12.9 10C12.9 10.6024 13.2329 11.1271 13.7248 11.4H15.2752C15.7671 11.1271 16.1 10.6024 16.1 10C16.1 9.11635 15.3837 8.4 14.5 8.4C13.6163 8.4 12.9 9.11635 12.9 10ZM8.25147 11.4H10.7485L10.6314 11.2828C10.0065 10.658 8.99347 10.658 8.36863 11.2828L8.25147 11.4ZM14.1 10C14.1 9.77909 14.2791 9.6 14.5 9.6C14.7209 9.6 14.9 9.77909 14.9 10C14.9 10.2209 14.7209 10.4 14.5 10.4C14.2791 10.4 14.1 10.2209 14.1 10ZM2 13.1H23V11.9H2V13.1Z", fill: "currentColor" }) });
    });
    var ImagesIcon = React$2.forwardRef(function ImagesIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "images", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M18.5 7.5H20.5V19.5H6.5V17.5M4.5 14.5L7.79289 11.2071C8.18342 10.8166 8.81658 10.8166 9.20711 11.2071L11.8867 13.8867C12.2386 14.2386 12.7957 14.2782 13.1938 13.9796L14.1192 13.2856C14.3601 13.1049 14.6696 13.0424 14.9618 13.1154L18.5 14M4.5 5.5H18.5V17.5H4.5V5.5ZM14.5 9.5C14.5 10.0523 14.0523 10.5 13.5 10.5C12.9477 10.5 12.5 10.0523 12.5 9.5C12.5 8.94772 12.9477 8.5 13.5 8.5C14.0523 8.5 14.5 8.94772 14.5 9.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var InfoFilledIcon = React$2.forwardRef(function InfoFilledIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "info-filled", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M21 12.5C21 17.1944 17.1944 21 12.5 21C7.80558 21 4 17.1944 4 12.5C4 7.80558 7.80558 4 12.5 4C17.1944 4 21 7.80558 21 12.5ZM12 10.5V9H13V10.5H12ZM13 16V12H12V16H13Z", fill: "currentColor" }) });
    });
    var InfoOutlineIcon = React$2.forwardRef(function InfoOutlineIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "info-outline", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 10.5V9M12.5 12V16M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var InlineElementIcon = React$2.forwardRef(function InlineElementIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "inline-element", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16.5 6.5H17.1V5.9H16.5V6.5ZM8.5 6.5V5.9H7.9V6.5H8.5ZM16.5 18.5V19.1H17.1V18.5H16.5ZM8.5 18.5H7.9V19.1H8.5V18.5ZM16.5 5.9H8.5V7.1H16.5V5.9ZM17.1 18.5V6.5H15.9V18.5H17.1ZM8.5 19.1H16.5V17.9H8.5V19.1ZM7.9 6.5V18.5H9.1V6.5H7.9ZM4.9 5V20H6.1V5H4.9ZM18.9 5V20H20.1V5H18.9Z", fill: "currentColor" }) });
    });
    var InlineIcon = React$2.forwardRef(function InlineIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "inline", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 6.5H19.5V18.5H12.5M12.5 6.5H5.5V18.5H12.5M12.5 6.5V18.5", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var InsertAboveIcon = React$2.forwardRef(function InsertAboveIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "insert-above", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M14.5 10.5556L10.5 10.5556M12.5 12.5L12.5 8.50001M18.5 5.50001L6.5 5.50001M18.5 19.5L6.5 19.5L6.5 15.5L18.5 15.5L18.5 19.5Z", stroke: "currentColor", strokeWidth: 1.2, strokeLinecap: "square" }) });
    });
    var InsertBelowIcon = React$2.forwardRef(function InsertBelowIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "insert-below", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 14.5H14.5M12.5 12.5V16.5M6.5 19.5H18.5M6.5 5.5H18.5V9.5H6.5V5.5Z", stroke: "currentColor", strokeWidth: 1.2, strokeLinecap: "square" }) });
    });
    var ItalicIcon = React$2.forwardRef(function ItalicIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "italic", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.43 18H11.7276L13.4551 9.86763H12.1576L10.43 18ZM13.3043 8.29848C13.8022 8.29848 14.2095 7.89111 14.2095 7.39321C14.2095 6.89531 13.8022 6.48794 13.3043 6.48794C12.8064 6.48794 12.399 6.89531 12.399 7.39321C12.399 7.89111 12.8064 8.29848 13.3043 8.29848Z", fill: "currentColor" }) });
    });
    var JoystickIcon = React$2.forwardRef(function JoystickIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "joystick", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9.5 16V14.5H15.5V16M13.5 10.5V14.5M11.5 10.5V14.5M15.5 7.5C15.5 9.15685 14.1569 10.5 12.5 10.5C10.8431 10.5 9.5 9.15685 9.5 7.5C9.5 5.84315 10.8431 4.5 12.5 4.5C14.1569 4.5 15.5 5.84315 15.5 7.5ZM18.5 19.5H6.5C5.94772 19.5 5.5 19.0523 5.5 18.5V17.5C5.5 16.9477 5.94772 16.5 6.5 16.5H18.5C19.0523 16.5 19.5 16.9477 19.5 17.5V18.5C19.5 19.0523 19.0523 19.5 18.5 19.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var LaunchIcon = React$2.forwardRef(function LaunchIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "launch", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M14 6.5H5.5V19.5H18.5V11M20.5 4.5L10.5 14.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16 4.5H20.5V9", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var LeaveIcon = React$2.forwardRef(function LeaveIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "leave", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16.5 15V19.5H5.5V5.5H16.5V10M10 12.5H22.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M20 10L22.5 12.5L20 15", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var LemonIcon = React$2.forwardRef(function LemonIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "lemon", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.6569 10.3431L6.41422 14.5858C7.58579 15.7574 9.12132 16.3431 10.6569 16.3431M10.6569 10.3431L14.8995 6.1005C16.0711 7.27208 16.6569 8.80761 16.6569 10.3431M10.6569 10.3431L10.6569 16.3431M10.6569 10.3431L16.6569 10.3431M10.6569 10.3431L14.8995 14.5858M14.8995 14.5858C13.7279 15.7574 12.1924 16.3431 10.6569 16.3431M14.8995 14.5858C16.0711 13.4142 16.6569 11.8787 16.6569 10.3431M16.3137 4.68629C19.4379 7.81049 19.4379 12.8758 16.3137 16C13.1895 19.1242 8.12419 19.1242 5 16L16.3137 4.68629Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var LinkIcon$1 = React$2.forwardRef(function LinkIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "link", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M11 12.5L12.5 14C13.281 14.7811 14.719 14.7811 15.5 14L18.5 11C19.281 10.219 19.281 8.78105 18.5 8L18 7.50001C17.2189 6.71896 15.781 6.71896 15 7.5L13 9.5M12 15.5L10 17.5C9.21895 18.281 7.78105 18.281 7 17.5L6.5 17C5.71895 16.219 5.71896 14.7811 6.5 14L9.50001 11C10.2811 10.219 11.719 10.219 12.5 11L14 12.5", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var LinkRemovedIcon = React$2.forwardRef(function LinkRemovedIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "link-removed", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M18.4243 7.07574C17.9038 6.55531 17.1875 6.31422 16.5 6.31422C15.8125 6.31422 15.0962 6.55531 14.5757 7.07574L12.5757 9.07574L13.4243 9.92427L15.4243 7.92427C15.6849 7.66365 16.078 7.51422 16.5 7.51422C16.922 7.51422 17.3151 7.66365 17.5757 7.92427L17.9983 7.50165L17.5757 7.92427L18.0757 8.42427C18.3363 8.68488 18.4858 9.07799 18.4858 9.5C18.4858 9.92201 18.3363 10.3151 18.0757 10.5757L16.7515 11.9H18.4485L18.9243 11.4243C19.4447 10.9038 19.6858 10.1875 19.6858 9.5C19.6858 8.81253 19.4447 8.09617 18.9243 7.57574L18.5 8L18.9243 7.57574L18.4243 7.07574ZM12.0757 11.4243L12.5515 11.9H14.2485L12.9243 10.5757C12.4038 10.0553 11.6875 9.81421 11 9.81421C10.3125 9.81421 9.59617 10.0553 9.07574 10.5757L7.75147 11.9H9.44853L9.92427 11.4243C10.1849 11.1636 10.578 11.0142 11 11.0142C11.422 11.0142 11.8151 11.1636 12.0757 11.4243ZM7.24853 14.1H5.67654C5.43071 14.5303 5.31421 15.0221 5.31421 15.5C5.31421 16.1875 5.55529 16.9038 6.07573 17.4243L6.4965 17.0035L6.07573 17.4243L6.57573 17.9243C7.09616 18.4447 7.81252 18.6858 8.49999 18.6858C9.18746 18.6858 9.90382 18.4447 10.4243 17.9243L12.4243 15.9243L11.5757 15.0757L9.57573 17.0757C9.31511 17.3363 8.922 17.4858 8.49999 17.4858C8.07798 17.4858 7.68487 17.3363 7.42426 17.0757L6.99999 17.5L7.42425 17.0757L6.92426 16.5757C6.66364 16.3151 6.51421 15.922 6.51421 15.5C6.51421 15.078 6.66365 14.6849 6.92426 14.4243L7.24853 14.1ZM16.2485 14.1H11.7515L12.0757 14.4243C12.5962 14.9447 13.3125 15.1858 14 15.1858C14.6875 15.1858 15.4038 14.9447 15.9243 14.4243L16.2485 14.1ZM2 13.6H23V12.4H2V13.6Z", fill: "currentColor" }) });
    });
    var LockIcon = React$2.forwardRef(function LockIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "lock", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M15.5 11.5V8.5C15.5 6.5 14 5.5 12.5 5.5C11 5.5 9.5 6.5 9.5 8.5V11.5M7.5 11.5H17.5V19.5H7.5V11.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var LogoJsIcon = React$2.forwardRef(function LogoJsIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "logo-js", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M20 5H5V20H20V5ZM12.5254 16.1572C12.5254 17.4189 11.7742 18.1536 10.4792 18.1536C9.24243 18.1536 8.49121 17.4189 8.45801 16.2942V16.261H9.67407V16.2859C9.69897 16.7466 9.9729 17.0703 10.4626 17.0703C10.9939 17.0703 11.272 16.7507 11.272 16.1489V12.011H12.5254V16.1572ZM18.2893 16.2153C18.2893 17.4023 17.3679 18.1536 15.8738 18.1536C14.4419 18.1536 13.5371 17.4688 13.4666 16.4062L13.4624 16.3398H14.6702L14.6743 16.3813C14.72 16.8296 15.2056 17.1326 15.907 17.1326C16.5752 17.1326 17.0359 16.813 17.0359 16.3523V16.3481C17.0359 15.9539 16.7412 15.7339 15.9983 15.5803L15.3674 15.4517C14.1223 15.1985 13.5869 14.6174 13.5869 13.7085V13.7043C13.5869 12.592 14.5415 11.8574 15.8696 11.8574C17.2683 11.8574 18.0901 12.5962 18.1689 13.5964L18.1731 13.6504H16.9944L16.9861 13.6006C16.9155 13.1731 16.5005 12.8743 15.8696 12.8743C15.2512 12.8784 14.8403 13.1606 14.8403 13.6089V13.613C14.8403 14.0032 15.1309 14.2356 15.8364 14.3809L16.4714 14.5095C17.7373 14.771 18.2893 15.2773 18.2893 16.2112V16.2153Z", fill: "currentColor" }) });
    });
    var LogoTsIcon = React$2.forwardRef(function LogoTsIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "logo-ts", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M20 5H5V20H20V5ZM11.0769 18H9.82349V13.0444H8.02637V12.011H12.874V13.0444H11.0769V18ZM18.2893 16.2153C18.2893 17.4023 17.3679 18.1536 15.8738 18.1536C14.4419 18.1536 13.5371 17.4688 13.4666 16.4062L13.4624 16.3398H14.6702L14.6743 16.3813C14.72 16.8296 15.2056 17.1326 15.907 17.1326C16.5752 17.1326 17.0359 16.813 17.0359 16.3523V16.3481C17.0359 15.9539 16.7412 15.7339 15.9983 15.5803L15.3674 15.4517C14.1223 15.1985 13.5869 14.6174 13.5869 13.7085V13.7043C13.5869 12.592 14.5415 11.8574 15.8696 11.8574C17.2683 11.8574 18.0901 12.5962 18.1689 13.5964L18.1731 13.6504H16.9944L16.9861 13.6006C16.9155 13.1731 16.5005 12.8743 15.8696 12.8743C15.2512 12.8784 14.8403 13.1606 14.8403 13.6089V13.613C14.8403 14.0032 15.1309 14.2356 15.8364 14.3809L16.4714 14.5095C17.7373 14.771 18.2893 15.2773 18.2893 16.2112V16.2153Z", fill: "currentColor" }) });
    });
    var MasterDetailIcon = React$2.forwardRef(function MasterDetailIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "master-detail", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M6 8.5H9M10.5 5.5V19.5M6 11.5H9M13 8.5H18M6 14.5H9M4.5 5.5H20.5V19.5H4.5V5.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var MenuIcon = React$2.forwardRef(function MenuIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "menu", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M6 8.1H19V6.9H6V8.1ZM6 18.1H19V16.9H6V18.1ZM6 13.1H19V11.9H6V13.1Z", fill: "currentColor" }) });
    });
    var MobileDeviceIcon = React$2.forwardRef(function MobileDeviceIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "mobile-device", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8.1 6.5C8.1 5.7268 8.7268 5.1 9.5 5.1V3.9C8.06406 3.9 6.9 5.06406 6.9 6.5H8.1ZM8.1 18.5V6.5H6.9V18.5H8.1ZM9.5 19.9C8.7268 19.9 8.1 19.2732 8.1 18.5H6.9C6.9 19.9359 8.06406 21.1 9.5 21.1V19.9ZM15.5 19.9H9.5V21.1H15.5V19.9ZM16.9 18.5C16.9 19.2732 16.2732 19.9 15.5 19.9V21.1C16.9359 21.1 18.1 19.9359 18.1 18.5H16.9ZM16.9 6.5V18.5H18.1V6.5H16.9ZM15.5 5.1C16.2732 5.1 16.9 5.7268 16.9 6.5H18.1C18.1 5.06406 16.9359 3.9 15.5 3.9V5.1ZM9.5 5.1H15.5V3.9H9.5V5.1ZM12.9 17.5C12.9 17.7209 12.7209 17.9 12.5 17.9V19.1C13.3837 19.1 14.1 18.3837 14.1 17.5H12.9ZM12.5 17.1C12.7209 17.1 12.9 17.2791 12.9 17.5H14.1C14.1 16.6163 13.3837 15.9 12.5 15.9V17.1ZM12.1 17.5C12.1 17.2791 12.2791 17.1 12.5 17.1V15.9C11.6163 15.9 10.9 16.6163 10.9 17.5H12.1ZM12.5 17.9C12.2791 17.9 12.1 17.7209 12.1 17.5H10.9C10.9 18.3837 11.6163 19.1 12.5 19.1V17.9Z", fill: "currentColor" }) });
    });
    var MoonIcon = React$2.forwardRef(function MoonIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "moon", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M19.6065 16.1775C18.9417 16.387 18.234 16.5 17.5 16.5C13.634 16.5 10.5 13.366 10.5 9.5C10.5 7.54163 11.3042 5.77109 12.6004 4.50062C12.567 4.50021 12.5335 4.5 12.5 4.5C8.08172 4.5 4.5 8.08172 4.5 12.5C4.5 16.9183 8.08172 20.5 12.5 20.5C15.5924 20.5 18.275 18.7454 19.6065 16.1775Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var NumberIcon = React$2.forwardRef(function NumberIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "number", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M21.0165 17.6336H3.83636V16.4336H21.0165V17.6336Z", fill: "currentColor" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M7.09808 13.3967V7.50803H5.74066L3.83636 8.78244V10.091L5.65277 8.88498H5.74066V13.3967H3.84125V14.5539H8.89984V13.3967H7.09808Z", fill: "currentColor" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9.81781 9.63205V9.66135H11.1069V9.62717C11.1069 8.95334 11.5756 8.49435 12.2739 8.49435C12.9575 8.49435 13.4018 8.89474 13.4018 9.5051C13.4018 9.97873 13.1528 10.3498 12.1909 11.3117L9.89594 13.5822V14.5539H14.8618V13.3869H11.7807V13.299L13.1577 11.9856C14.3491 10.843 14.7543 10.1838 14.7543 9.41232C14.7543 8.19162 13.7729 7.36642 12.3178 7.36642C10.8383 7.36642 9.81781 8.28439 9.81781 9.63205Z", fill: "currentColor" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M17.6694 11.4631H18.5092C19.3198 11.4631 19.8422 11.8684 19.8422 12.4983C19.8422 13.1184 19.3295 13.5139 18.5239 13.5139C17.767 13.5139 17.2592 13.133 17.2104 12.5324H15.9262C15.9897 13.8508 17.0248 14.6955 18.5629 14.6955C20.1401 14.6955 21.2192 13.841 21.2192 12.591C21.2192 11.6584 20.6528 11.0334 19.7006 10.9211V10.8332C20.4721 10.677 20.9457 10.0666 20.9457 9.23654C20.9457 8.12326 19.9741 7.36642 18.5434 7.36642C17.0541 7.36642 16.1118 8.17697 16.0629 9.50021H17.2983C17.3422 8.8801 17.8061 8.48459 18.4995 8.48459C19.2075 8.48459 19.6567 8.85568 19.6567 9.44162C19.6567 10.0324 19.1977 10.4182 18.4946 10.4182H17.6694V11.4631Z", fill: "currentColor" })] });
    });
    var OkHandIcon = React$2.forwardRef(function OkHandIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "ok-hand", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M15.9957 11.5C14.8197 10.912 11.9957 9 10.4957 9C8.9957 9 5.17825 11.7674 6 13C7 14.5 9.15134 11.7256 10.4957 12C11.8401 12.2744 13 13.5 13 14.5C13 15.5 11.8401 16.939 10.4957 16.5C9.15134 16.061 8.58665 14.3415 7.4957 14C6.21272 13.5984 5.05843 14.6168 5.5 15.5C5.94157 16.3832 7.10688 17.6006 8.4957 19C9.74229 20.2561 11.9957 21.5 14.9957 20C17.9957 18.5 18.5 16.2498 18.5 13C18.5 11.5 13.7332 5.36875 11.9957 4.5C10.9957 4 10 5 10.9957 6.5C11.614 7.43149 13.5 9.27705 14 10.3751M15.5 8C15.5 8 15.3707 7.5 14.9957 6C14.4957 4 15.9957 3.5 16.4957 4.5C17.1281 5.76491 18.2872 10.9147 18.4957 13", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var OlistIcon = React$2.forwardRef(function OlistIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "olist", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M7.5 18.5V19H8.30902L7.94721 18.2764L7.5 18.5ZM7.5 16.5L7.94721 16.7236L8.30902 16H7.5V16.5ZM7 17.5L6.55279 17.2764L6.44098 17.5L6.55279 17.7236L7 17.5ZM6.5 6.5H7V6H6.5V6.5ZM6 13.5L5.55279 13.2764L5.19098 14H6V13.5ZM7 11.5L7.44721 11.7236L7.80902 11H7V11.5ZM10 8H19V7H10V8ZM10 13H19V12H10V13ZM10 18H19V17H10V18ZM5 19H7.5V18H5V19ZM7.5 16H5V17H7.5V16ZM7.94721 18.2764L7.44721 17.2764L6.55279 17.7236L7.05279 18.7236L7.94721 18.2764ZM7.44721 17.7236L7.94721 16.7236L7.05279 16.2764L6.55279 17.2764L7.44721 17.7236ZM5 7H6.5V6H5V7ZM5 9H6.5V8H5V9ZM6.5 9H8V8H6.5V9ZM6 6.5V8.5H7V6.5H6ZM8 13H6V14H8V13ZM6.44721 13.7236L7.44721 11.7236L6.55279 11.2764L5.55279 13.2764L6.44721 13.7236ZM7 11H5V12H7V11Z", fill: "currentColor" }) });
    });
    var OverageIcon = React$2.forwardRef(function OverageIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "overage", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M14 5.9H18.5H19.1V6.5V11H17.9V7.94853L12.8485 13H11.1515L17.0515 7.1H14V5.9ZM10.2515 13.9H11.9485H22V15.1L12.95 15.1H7.95L3 15.1V13.9H10.2515ZM8.15148 16L6.07574 18.0757L6.92426 18.9243L9.84853 16H8.15148Z", fill: "currentColor" }) });
    });
    var PackageIcon = React$2.forwardRef(function PackageIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "package", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 13V22M12.5 13L4.5 8M12.5 13L20.5 8M8.5 5.5L16.5 10.5M4.5 8L12.5 3L20.5 8V17L12.5 22L4.5 17V8Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var PauseIcon = React$2.forwardRef(function PauseIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "pause", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M10.5 7.5H8.5V17.5H10.5V7.5ZM16.5 7.5H14.5V17.5H16.5V7.5Z", fill: "currentColor" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8.5 7.5V6.9H7.9V7.5H8.5ZM10.5 7.5H11.1V6.9H10.5V7.5ZM8.5 17.5H7.9V18.1H8.5V17.5ZM10.5 17.5V18.1H11.1V17.5H10.5ZM14.5 7.5V6.9H13.9V7.5H14.5ZM16.5 7.5H17.1V6.9H16.5V7.5ZM14.5 17.5H13.9V18.1H14.5V17.5ZM16.5 17.5V18.1H17.1V17.5H16.5ZM8.5 8.1H10.5V6.9H8.5V8.1ZM9.1 17.5V7.5H7.9V17.5H9.1ZM10.5 16.9H8.5V18.1H10.5V16.9ZM9.9 7.5V17.5H11.1V7.5H9.9ZM14.5 8.1H16.5V6.9H14.5V8.1ZM15.1 17.5V7.5H13.9V17.5H15.1ZM16.5 16.9H14.5V18.1H16.5V16.9ZM15.9 7.5V17.5H17.1V7.5H15.9Z", fill: "currentColor" })] });
    });
    var PinIcon = React$2.forwardRef(function PinIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "pin", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M6.5 10.5C6.5 7 9 4.5 12.5 4.5C16 4.5 18.5 7 18.5 10.5C18.5 14 15.5 17.5 12.5 20.5C9.5 17.5 6.5 14 6.5 10.5Z", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M14 10.5C14 11.3284 13.3284 12 12.5 12C11.6716 12 11 11.3284 11 10.5C11 9.67157 11.6716 9 12.5 9C13.3284 9 14 9.67157 14 10.5Z", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var PinRemovedIcon = React$2.forwardRef(function PinRemovedIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "pin-removed", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M12.0757 20.9243L12.5 21.3485L12.9243 20.9243C14.4315 19.417 15.9655 17.7584 17.1242 16.0203C17.5402 15.3963 17.9127 14.7549 18.2192 14.1H16.8785C16.6575 14.5172 16.4051 14.9356 16.1258 15.3547C15.1381 16.8362 13.8436 18.2803 12.5 19.6478C11.1564 18.2803 9.86189 16.8362 8.87423 15.3547C8.59486 14.9356 8.34249 14.5172 8.12154 14.1H6.78084C7.08725 14.7549 7.45976 15.3963 7.87577 16.0203C9.03448 17.7584 10.5685 19.417 12.0757 20.9243ZM19.1 10.5C19.1 10.9701 19.0508 11.4372 18.9594 11.9H17.732C17.8418 11.4297 17.9 10.9627 17.9 10.5C17.9 7.33137 15.6686 5.1 12.5 5.1C9.33137 5.1 7.1 7.33137 7.1 10.5C7.1 10.9627 7.15822 11.4297 7.26799 11.9H6.04056C5.94923 11.4372 5.9 10.9701 5.9 10.5C5.9 6.66863 8.66863 3.9 12.5 3.9C16.3314 3.9 19.1 6.66863 19.1 10.5ZM14.6 10.5C14.6 11.0379 14.3978 11.5285 14.0653 11.9H10.9347C10.6022 11.5285 10.4 11.0379 10.4 10.5C10.4 9.3402 11.3402 8.4 12.5 8.4C13.6598 8.4 14.6 9.3402 14.6 10.5ZM11.6 10.5C11.6 10.0029 12.0029 9.6 12.5 9.6C12.9971 9.6 13.4 10.0029 13.4 10.5C13.4 10.9971 12.9971 11.4 12.5 11.4C12.0029 11.4 11.6 10.9971 11.6 10.5ZM2 13.6H23V12.4H2V13.6Z", fill: "currentColor" }) });
    });
    var PlayIcon = React$2.forwardRef(function PlayIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "play", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M7.5 18.5V6.5L17.5 12.5L7.5 18.5Z", fill: "currentColor", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var PlugIcon = React$2.forwardRef(function PlugIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "plug", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M13.25 8.5L16.75 5M16.25 11.5L19.75 8M9.25 15.5L5.25 19.5M7.75 14L9.75 12C8.25 10 8.75 9 9.75 8C10.15 7.6 11.25 6.5 11.25 6.5L18.25 13.5C18.25 13.5 17.3825 14.3675 16.75 15C15.75 16 14.75 16.5 12.75 15L10.75 17L7.75 14Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var PresentationIcon = React$2.forwardRef(function PresentationIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "presentation", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 18H5.5V8.5H19.5V18H14.5M10.5 18L9 22M10.5 18H14.5M14.5 18L16 22M4.5 8.5H20.5V6.5H4.5V8.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var PublishIcon = React$2.forwardRef(function PublishIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "publish", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M4.99997 5.50005H20M7.5 14L12.5 9.00003L17.5 14", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 9.00003V20", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var ReadOnlyIcon = React$2.forwardRef(function ReadOnlyIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "read-only", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M15 7L18 10M10 12L7 15L6 19L10 18L13 15M12 10L17 5L20 8L15 13M19 19L5 5", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var RemoveCircleIcon = React$2.forwardRef(function RemoveCircleIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "remove-circle", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8 12.4H17M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var RemoveIcon = React$2.forwardRef(function RemoveIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "remove", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5 12.5H20", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var ResetIcon = React$2.forwardRef(function ResetIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "reset", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M4.56189 13.5L4.14285 13.9294L4.5724 14.3486L4.99144 13.9189L4.56189 13.5ZM9.92427 15.9243L15.9243 9.92427L15.0757 9.07574L9.07574 15.0757L9.92427 15.9243ZM9.07574 9.92426L15.0757 15.9243L15.9243 15.0757L9.92426 9.07574L9.07574 9.92426ZM19.9 12.5C19.9 16.5869 16.5869 19.9 12.5 19.9V21.1C17.2496 21.1 21.1 17.2496 21.1 12.5H19.9ZM5.1 12.5C5.1 8.41309 8.41309 5.1 12.5 5.1V3.9C7.75035 3.9 3.9 7.75035 3.9 12.5H5.1ZM12.5 5.1C16.5869 5.1 19.9 8.41309 19.9 12.5H21.1C21.1 7.75035 17.2496 3.9 12.5 3.9V5.1ZM5.15728 13.4258C5.1195 13.1227 5.1 12.8138 5.1 12.5H3.9C3.9 12.8635 3.92259 13.2221 3.9665 13.5742L5.15728 13.4258ZM12.5 19.9C9.9571 19.9 7.71347 18.6179 6.38048 16.6621L5.38888 17.3379C6.93584 19.6076 9.54355 21.1 12.5 21.1V19.9ZM4.99144 13.9189L7.42955 11.4189L6.57045 10.5811L4.13235 13.0811L4.99144 13.9189ZM4.98094 13.0706L2.41905 10.5706L1.58095 11.4294L4.14285 13.9294L4.98094 13.0706Z", fill: "currentColor" }) });
    });
    var RestoreIcon = React$2.forwardRef(function RestoreIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "restore", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5.88468 17C7.32466 19.1128 9.75033 20.5 12.5 20.5C16.9183 20.5 20.5 16.9183 20.5 12.5C20.5 8.08172 16.9183 4.5 12.5 4.5C8.08172 4.5 4.5 8.08172 4.5 12.5V13.5M12.5 8V12.5L15.5 15.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M7 11L4.5 13.5L2 11", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var RetrieveIcon = React$2.forwardRef(function RetrieveIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "retrieve", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 10.5L12.5 17.5M4.5 7.5V20.5H20.5V7.5L18.5 4.5H6.5L4.5 7.5Z", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9 14L12.5 10.5L16 14", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M4.5 7.5H20.5", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var RevertIcon = React$2.forwardRef(function RevertIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "revert", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5 9L14.5 9C16.9853 9 19 11.0147 19 13.5C19 15.9853 16.9853 18 14.5 18H5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9 13L5 9L9 5", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var RobotIcon = React$2.forwardRef(function RobotIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "robot", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 15.5V17.5M12.5 8.5V6.5M12.5 6.5C13.3284 6.5 14 5.82843 14 5C14 4.17157 13.3284 3.5 12.5 3.5C11.6716 3.5 11 4.17157 11 5C11 5.82843 11.6716 6.5 12.5 6.5ZM20.5 20.5V19.5C20.5 18.3954 19.6046 17.5 18.5 17.5H6.5C5.39543 17.5 4.5 18.3954 4.5 19.5V20.5H20.5ZM11.5 12C11.5 12.5523 11.0523 13 10.5 13C9.94772 13 9.5 12.5523 9.5 12C9.5 11.4477 9.94772 11 10.5 11C11.0523 11 11.5 11.4477 11.5 12ZM15.5 12C15.5 12.5523 15.0523 13 14.5 13C13.9477 13 13.5 12.5523 13.5 12C13.5 11.4477 13.9477 11 14.5 11C15.0523 11 15.5 11.4477 15.5 12ZM8.5 15.5H16.5C17.6046 15.5 18.5 14.6046 18.5 13.5V10.5C18.5 9.39543 17.6046 8.5 16.5 8.5H8.5C7.39543 8.5 6.5 9.39543 6.5 10.5V13.5C6.5 14.6046 7.39543 15.5 8.5 15.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var RocketIcon = React$2.forwardRef(function RocketIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "rocket", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 20.5L15.5 14M11 9.5L4.5 12.5M9 14C9 14 7.54688 14.9531 6.5 16C5.5 17 4.5 20.5 4.5 20.5C4.5 20.5 8 19.5 9 18.5C10 17.5 11 16 11 16M9 14C9 14 10.1 9.90001 12.5 7.50001C15.5 4.50001 20.5 4.50001 20.5 4.50001C20.5 4.50001 20.5 9.5 17.5 12.5C15.7492 14.2508 11 16 11 16L9 14ZM16.5 10C16.5 10.8284 15.8284 11.5 15 11.5C14.1716 11.5 13.5 10.8284 13.5 10C13.5 9.17157 14.1716 8.5 15 8.5C15.8284 8.5 16.5 9.17157 16.5 10Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var SchemaIcon = React$2.forwardRef(function SchemaIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "schema", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 9.5V12.5M12.5 12.5H8.5V15.5M12.5 12.5H16.5V15.5M10.5 5.5H14.5V9.5H10.5V5.5ZM6.5 15.5H10.5V19.5H6.5V15.5ZM14.5 15.5H18.5V19.5H14.5V15.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var SearchIcon = React$2.forwardRef(function SearchIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "search", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M14.0355 14.0355L20 20M15.5 10.5C15.5 13.2614 13.2614 15.5 10.5 15.5C7.73858 15.5 5.5 13.2614 5.5 10.5C5.5 7.73858 7.73858 5.5 10.5 5.5C13.2614 5.5 15.5 7.73858 15.5 10.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var SelectIcon = React$2.forwardRef(function SelectIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "select", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16.5 15.5L12.5 19.5L8.5 15.5M8.5 9.5L12.5 5.5L16.5 9.5", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var SortIcon = React$2.forwardRef(function SortIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "sort", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8.5 18.5V6M16.5 19V6.5M12 15L8.5 18.5L5 15M13 10L16.5 6.5L20 10", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var SparkleIcon = React$2.forwardRef(function SparkleIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "sparkle", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 10.5C8.5 12.5 5 12.5 5 12.5C5 12.5 8.5 12.5 10.5 14.5C12.5 16.5 12.5 20 12.5 20C12.5 20 12.5 16.5 14.5 14.5C16.5 12.5 20 12.5 20 12.5C20 12.5 16.5 12.5 14.5 10.5C12.5 8.5 12.5 5 12.5 5C12.5 5 12.5 8.5 10.5 10.5Z", fill: "currentColor", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }) });
    });
    var SparklesIcon = React$2.forwardRef(function SparklesIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "sparkles", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M13.5 13.5C12.2308 14.7692 9.5 15 9.5 15C9.5 15 12.2308 15.2308 13.5 16.5C14.7692 17.7692 15 20.5 15 20.5C15 20.5 15.2308 17.7692 16.5 16.5C17.7692 15.2308 20.5 15 20.5 15C20.5 15 17.7692 14.7692 16.5 13.5C15.2308 12.2308 15 9.5 15 9.5C15 9.5 14.7692 12.2308 13.5 13.5Z", fill: "currentColor" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M6.3 9.3C5.72308 9.87692 4.5 10 4.5 10C4.5 10 5.72308 10.1231 6.3 10.7C6.87692 11.2769 7 12.5 7 12.5C7 12.5 7.12308 11.2769 7.7 10.7C8.27692 10.1231 9.5 10 9.5 10C9.5 10 8.27692 9.87692 7.7 9.3C7.12308 8.72308 7 7.5 7 7.5C7 7.5 6.87692 8.72308 6.3 9.3Z", fill: "currentColor" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M11 3.5V5M11 5V6.5M11 5H12.5M11 5H9.5M9.5 15C9.5 15 12.2308 14.7692 13.5 13.5C14.7692 12.2308 15 9.5 15 9.5C15 9.5 15.2308 12.2308 16.5 13.5C17.7692 14.7692 20.5 15 20.5 15C20.5 15 17.7692 15.2308 16.5 16.5C15.2308 17.7692 15 20.5 15 20.5C15 20.5 14.7692 17.7692 13.5 16.5C12.2308 15.2308 9.5 15 9.5 15ZM4.5 10C4.5 10 5.72308 9.87692 6.3 9.3C6.87692 8.72308 7 7.5 7 7.5C7 7.5 7.12308 8.72308 7.7 9.3C8.27692 9.87692 9.5 10 9.5 10C9.5 10 8.27692 10.1231 7.7 10.7C7.12308 11.2769 7 12.5 7 12.5C7 12.5 6.87692 11.2769 6.3 10.7C5.72308 10.1231 4.5 10 4.5 10Z", stroke: "currentColor", strokeWidth: 1.2, strokeLinecap: "round", strokeLinejoin: "round" })] });
    });
    var SpinnerIcon = React$2.forwardRef(function SpinnerIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "spinner", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M4.5 12.5C4.5 16.9183 8.08172 20.5 12.5 20.5C16.9183 20.5 20.5 16.9183 20.5 12.5C20.5 8.08172 16.9183 4.5 12.5 4.5", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var SplitHorizontalIcon = React$2.forwardRef(function SplitHorizontalIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "split-horizontal", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M19.5 10.5V20.5H5.5V10.5M19.5 10.5H5.5M19.5 10.5V4.5H5.5V10.5M12.5 13V15.5M12.5 18V15.5M12.5 15.5H15M12.5 15.5H10", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var SplitVerticalIcon = React$2.forwardRef(function SplitVerticalIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "split-vertical", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5 5.5V19.5M13 12.5H15.5M18 12.5H15.5M15.5 12.5V15M15.5 12.5V10M4.5 5.5H20.5V19.5H4.5V5.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var SquareIcon$1 = React$2.forwardRef(function SquareIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "square", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("rect", { x: 5.5, y: 5.5, width: 14, height: 14, stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var StackCompactIcon = React$2.forwardRef(function StackCompactIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "stack-compact", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5.5 15.5V18.5H19.5V15.5M5.5 15.5H19.5M5.5 15.5V9.5M19.5 15.5V9.5M5.5 9.5V6.5H19.5V9.5M5.5 9.5H19.5M5.5 12.5H19.5", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var StackIcon = React$2.forwardRef(function StackIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "stack", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5.5 12.5H19.5M5.5 18.5H19.5V6.5H5.5V18.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var StarIcon = React$2.forwardRef(function StarIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "star", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M13 4L15.2747 9.8691L21.5595 10.2188L16.6806 14.1959L18.2901 20.2812L13 16.87L7.70993 20.2812L9.31941 14.1959L4.44049 10.2188L10.7253 9.8691L13 4Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var StopIcon = React$2.forwardRef(function StopIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "stop", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("rect", { x: 7.5, y: 7.5, width: 10, height: 10, fill: "currentColor", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var StrikethroughIcon = React$2.forwardRef(function StrikethroughIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "strikethrough", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M12.5656 7.73438C11.0656 7.73438 10.0734 8.48438 10.0734 9.625C10.0734 10.2317 10.3649 10.6613 11.0519 11H8.90358C8.71703 10.6199 8.62813 10.1801 8.62813 9.67188C8.62813 7.75781 10.2297 6.46094 12.6125 6.46094C14.7922 6.46094 16.4172 7.75781 16.5344 9.57812H15.1203C14.925 8.42188 13.9719 7.73438 12.5656 7.73438ZM12.4875 18.2656C10.0969 18.2656 8.44844 17 8.3 15.0547H9.72188C9.89375 16.2344 11.0188 16.9844 12.6203 16.9844C14.1359 16.9844 15.2531 16.1641 15.2531 15.0469C15.2531 14.6375 15.1255 14.292 14.8589 14H16.5912C16.6638 14.266 16.6984 14.5566 16.6984 14.875C16.6984 16.9453 15.0656 18.2656 12.4875 18.2656ZM7 13.1H18V11.9H7V13.1Z", fill: "currentColor" }) });
    });
    var StringIcon = React$2.forwardRef(function StringIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "string", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M11.6748 15.5227H13.1855L9.87842 6.36304H8.34863L5.0415 15.5227H6.50146L7.3457 13.0916H10.8369L11.6748 15.5227ZM9.04053 8.02612H9.14844L10.4751 11.8982H7.70752L9.04053 8.02612Z", fill: "currentColor" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16.8101 14.488C16.0674 14.488 15.5278 14.1262 15.5278 13.5042C15.5278 12.8948 15.9595 12.571 16.9116 12.5076L18.6001 12.3997V12.9773C18.6001 13.8342 17.8384 14.488 16.8101 14.488ZM16.4609 15.637C17.3687 15.637 18.124 15.2434 18.5366 14.5515H18.6445V15.5227H19.9585V10.8C19.9585 9.34009 18.981 8.47681 17.248 8.47681C15.6802 8.47681 14.563 9.23853 14.4233 10.4255H15.7437C15.896 9.93677 16.4229 9.65747 17.1846 9.65747C18.1177 9.65747 18.6001 10.0701 18.6001 10.8V11.3967L16.7275 11.5046C15.0835 11.6062 14.1567 12.3235 14.1567 13.5676C14.1567 14.8308 15.1279 15.637 16.4609 15.637Z", fill: "currentColor" }), /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M19.9585 18.637L5.0415 18.637V17.437L19.9585 17.437V18.637Z", fill: "currentColor" })] });
    });
    var SunIcon = React$2.forwardRef(function SunIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "sun", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M19 12.5H22M3 12.5H6M12.5 6V3M12.5 22V19M17.3891 7.61091L19.5104 5.48959M5.48959 19.5104L7.61091 17.3891M7.61091 7.61091L5.48959 5.48959M19.5104 19.5104L17.3891 17.3891M16 12.5C16 14.433 14.433 16 12.5 16C10.567 16 9 14.433 9 12.5C9 10.567 10.567 9 12.5 9C14.433 9 16 10.567 16 12.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var SyncIcon = React$2.forwardRef(function SyncIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "sync", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M13.5 4.5H12.5C8.08172 4.5 4.5 8.08172 4.5 12.5C4.5 15.6631 6.33576 18.3975 9 19.6958M11.5 20.5H12.5C16.9183 20.5 20.5 16.9183 20.5 12.5C20.5 9.33688 18.6642 6.60253 16 5.30423", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M14 17.5619L11.5 20.5L14.5 23.0619M11 7.43811L13.5 4.50001L10.5 1.93811", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var TagIcon = React$2.forwardRef(function TagIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "tag", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 20L5 20L5 12.5L12.5 5L20 12.5L12.5 20Z", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M11 15.5C11 16.3284 10.3284 17 9.5 17C8.67157 17 8 16.3284 8 15.5C8 14.6716 8.67157 14 9.5 14C10.3284 14 11 14.6716 11 15.5Z", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var TerminalIcon = React$2.forwardRef(function TerminalIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "terminal", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8.5 9.5L11.5 12.5L8.5 15.5M13 15.5H17M5.5 6.5H19.5V18.5H5.5V6.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var ThLargeIcon = React$2.forwardRef(function ThLargeIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "th-large", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 6.5V12.5M12.5 12.5V18.5M12.5 12.5H20.5M12.5 12.5H4.5M4.5 6.5H20.5V18.5H4.5V6.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var ThListIcon = React$2.forwardRef(function ThListIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "th-list", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9.5 6.5V10.5M9.5 10.5V14.5M9.5 10.5H20.5M9.5 10.5H4.5M9.5 14.5V18.5M9.5 14.5H20.5M9.5 14.5H4.5M4.5 6.5H20.5V18.5H4.5V6.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var TiersIcon = React$2.forwardRef(function TiersIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "tiers", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16.5 14.5L20.5 16.5L12.5 20.5L4.5 16.5L8.5 14.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16.5 10.5L20.5 12.5L12.5 16.5L4.5 12.5L8.5 10.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M20.5 8.5L12.5 12.5L4.5 8.5L12.5 4.5L20.5 8.5Z", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var ToggleArrowRightIcon = React$2.forwardRef(function ToggleArrowRightIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "toggle-arrow-right", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10 16.5V8.5L16 12.5L10 16.5Z", fill: "currentColor" }) });
    });
    var TokenIcon = React$2.forwardRef(function TokenIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "token", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M17.5711 12.5C17.5711 15.2614 15.3325 17.5 12.5711 17.5M7.57107 12.5C7.57107 9.73858 9.80964 7.5 12.5711 7.5M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var TransferIcon = React$2.forwardRef(function TransferIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "transfer", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M19.5 16.5H6M5.5 8.5L19 8.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16 13L19.5 16.5L16 20M9 12L5.5 8.5L9 5", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var TranslateIcon = React$2.forwardRef(function TranslateIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "translate", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M9.4 5.4H4V6.6H13.2189C13.1612 6.78478 13.0895 6.99578 13.0025 7.22211C12.7032 8.00031 12.2402 8.91125 11.5757 9.57574L10 11.1515L9.42426 10.5757C8.72102 9.8725 8.25297 9.16987 7.96199 8.64611C7.81668 8.38455 7.71617 8.16874 7.65305 8.02146C7.62151 7.94787 7.59937 7.89154 7.5857 7.85534C7.57886 7.83725 7.57415 7.8242 7.57144 7.81657L7.56886 7.80922C7.56886 7.80922 7.56921 7.81026 7 8C6.43079 8.18974 6.43091 8.19009 6.43091 8.19009L6.43133 8.19135L6.43206 8.19351L6.4341 8.19948L6.44052 8.21786C6.44587 8.23292 6.45336 8.25357 6.46313 8.27942C6.48266 8.33112 6.5113 8.40369 6.55008 8.49416C6.62758 8.67501 6.74582 8.92795 6.91301 9.22889C7.24703 9.83013 7.77898 10.6275 8.57574 11.4243L9.15147 12L4.57964 16.5718L4.57655 16.5749L4.57577 16.5757L5.4243 17.4242L5.42688 17.4216L10.0368 12.8117L12.6159 14.9609L13.3841 14.0391L10.8888 11.9597L12.4243 10.4243C13.2598 9.58875 13.7968 8.49969 14.1225 7.65289C14.2818 7.23863 14.395 6.87072 14.4696 6.6H16V5.4H10.6V4H9.4V5.4ZM17.4405 10L21.553 19.7672H20.2509L19.1279 17.1H14.8721L13.7491 19.7672H12.447L16.5595 10H17.4405ZM15.3773 15.9H18.6227L17 12.0462L15.3773 15.9Z", fill: "currentColor" }) });
    });
    var TrashIcon$1 = React$2.forwardRef(function TrashIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "trash", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5 6.5H20M10 6.5V4.5C10 3.94772 10.4477 3.5 11 3.5H14C14.5523 3.5 15 3.94772 15 4.5V6.5M12.5 9V17M15.5 9L15 17M9.5 9L10 17M18.5 6.5L17.571 18.5767C17.5309 19.0977 17.0965 19.5 16.574 19.5H8.42603C7.90349 19.5 7.46905 19.0977 7.42898 18.5767L6.5 6.5H18.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var TrendUpwardIcon = React$2.forwardRef(function TrendUpwardIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "trend-upward", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M4.5 18.5L11.5 10.5L13.5 14.5L20.5 6.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M20.5 11V6.5H16", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var TriangleOutlineIcon = React$2.forwardRef(function TriangleOutlineIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "triangle-outline", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M20.5 18.5H4.5L12.5 5.5L20.5 18.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var TrolleyIcon = React$2.forwardRef(function TrolleyIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "trolley", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8 17.5L5.81763 6.26772C5.71013 5.81757 5.30779 5.5 4.84498 5.5H3M8 17.5H17M8 17.5C8.82843 17.5 9.5 18.1716 9.5 19C9.5 19.8284 8.82843 20.5 8 20.5C7.17157 20.5 6.5 19.8284 6.5 19C6.5 18.1716 7.17157 17.5 8 17.5ZM17 17.5C17.8284 17.5 18.5 18.1716 18.5 19C18.5 19.8284 17.8284 20.5 17 20.5C16.1716 20.5 15.5 19.8284 15.5 19C15.5 18.1716 16.1716 17.5 17 17.5ZM7.78357 14.5H17.5L19 7.5H6", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var TruncateIcon = React$2.forwardRef(function TruncateIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "truncate", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5 12.5H20M8.5 19.5L12.5 15.5L16.5 19.5M16.5 5.5L12.5 9.5L8.5 5.5", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var UlistIcon = React$2.forwardRef(function UlistIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "ulist", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10 7.5H19M10 17.5H19M10 12.5H19M7.10153 17.5001C7.10153 17.8323 6.83221 18.1016 6.5 18.1016C6.16778 18.1016 5.89847 17.8323 5.89847 17.5001C5.89847 17.1678 6.16778 16.8985 6.5 16.8985C6.83221 16.8985 7.10153 17.1678 7.10153 17.5001ZM7.10153 7.5C7.10153 7.83221 6.83221 8.10153 6.5 8.10153C6.16778 8.10153 5.89847 7.83221 5.89847 7.5C5.89847 7.16778 6.16778 6.89847 6.5 6.89847C6.83221 6.89847 7.10153 7.16778 7.10153 7.5ZM7.10153 12.5C7.10153 12.8322 6.83221 13.1015 6.5 13.1015C6.16778 13.1015 5.89847 12.8322 5.89847 12.5C5.89847 12.1678 6.16778 11.8985 6.5 11.8985C6.83221 11.8985 7.10153 12.1678 7.10153 12.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var UnderlineIcon = React$2.forwardRef(function UnderlineIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "underline", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M8.17 7.11409H9.52791V14.1677C9.52791 15.8123 10.6067 17.0042 12.4927 17.0042C14.3787 17.0042 15.4574 15.8123 15.4574 14.1677V7.11409H16.8154V14.2582C16.8154 16.5817 15.1934 18.2565 12.4927 18.2565C9.79195 18.2565 8.17 16.5817 8.17 14.2582V7.11409ZM7 21.1H18V19.9H7V21.1Z", fill: "currentColor" }) });
    });
    var UndoIcon = React$2.forwardRef(function UndoIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "undo", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5.88468 17C7.32466 19.1128 9.75033 20.5 12.5 20.5C16.9183 20.5 20.5 16.9183 20.5 12.5C20.5 8.08172 16.9183 4.5 12.5 4.5C8.08172 4.5 4.5 8.08172 4.5 12.5V13.5", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M7 11L4.5 13.5L2 11", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var UnknownIcon = React$2.forwardRef(function UnknownIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "unknown", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 13C12.5 11 14 11.5 14 10C14 9.34375 13.5 8.5 12.5 8.5C11.5 8.5 11 9 10.5 9.5M12.5 16V14.5M5.5 5.5H19.5V19.5H5.5V5.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var UnlockIcon = React$2.forwardRef(function UnlockIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "unlock", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M7.5 11.5H17.5V19.5H7.5V11.5Z", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M3.5 11.5V8.5C3.5 6.5 5 5.5 6.5 5.5C8 5.5 9.5 6.5 9.5 8.5V11.5", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var UnpublishIcon = React$2.forwardRef(function UnpublishIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "unpublish", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5 19.5H20M12.5 16V4.99998", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M17.5 11L12.5 16L7.5 11", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var UploadIcon = React$2.forwardRef(function UploadIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { "data-sanity-icon": "upload", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 6.00003V15.5M5.5 15.5H19.5V19.5H5.5V15.5Z", stroke: "currentColor", strokeWidth: 1.2 }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M7.5 11L12.5 6.00003L17.5 11", stroke: "currentColor", strokeWidth: 1.2 })] });
    });
    var UserIcon = React$2.forwardRef(function UserIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "user", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8 14.5C7 15 5.5 16 5.5 19.5H19.5C19.5 16 18.3416 15.1708 17 14.5C16 14 14 14 14 12.5C14 11 15 10.25 15 8.25C15 6.25 14 5.25 12.5 5.25C11 5.25 10 6.25 10 8.25C10 10.25 11 11 11 12.5C11 14 9 14 8 14.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var UsersIcon = React$2.forwardRef(function UsersIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "users", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M17.5 18.5H21.5C21.5 15 20.8416 14.1708 19.5 13.5C18.5 13 16.5 12.5 16.5 11C16.5 9.5 17.5 9 17.5 7C17.5 5 16.5 4 15 4C13.6628 4 12.723 4.79472 12.5347 6.38415M4.5 20.5C4.5 17 5.5 16 6.5 15.5C7.5 15 9.5 14.5 9.5 13C9.5 11.5 8.5 11 8.5 9C8.5 7 9.5 6 11 6C12.5 6 13.5 7 13.5 9C13.5 11 12.5 11.5 12.5 13C12.5 14.5 14.5 15 15.5 15.5C16.8416 16.1708 17.5 17 17.5 20.5H4.5Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var WarningFilledIcon = React$2.forwardRef(function WarningFilledIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "warning-filled", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M14.7728 5.35558C13.7822 3.57248 11.2178 3.57247 10.2272 5.35558L3.62622 17.2373C2.66345 18.9703 3.91657 21.1 5.89903 21.1H19.101C21.0834 21.1 22.3365 18.9703 21.3738 17.2373L14.7728 5.35558ZM13 16V17.5H12V16H13ZM12 10.4999V14.5H13V10.4999H12Z", fill: "currentColor" }) });
    });
    var WarningOutlineIcon = React$2.forwardRef(function WarningOutlineIcon2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { "data-sanity-icon": "warning-outline", width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", xmlns: "http://www.w3.org/2000/svg", ref, ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 10V14M12.5 17V15.5M14.2483 5.64697L20.8493 17.5287C21.5899 18.8618 20.6259 20.5 19.101 20.5H5.89903C4.37406 20.5 3.41013 18.8618 4.15072 17.5287L10.7517 5.64697C11.5137 4.27535 13.4863 4.27535 14.2483 5.64697Z", stroke: "currentColor", strokeWidth: 1.2 }) });
    });
    var icons = { "access-denied": AccessDeniedIcon, activity: ActivityIcon, "add-circle": AddCircleIcon, add: AddIcon, api: ApiIcon, archive: ArchiveIcon, "arrow-down": ArrowDownIcon, "arrow-left": ArrowLeftIcon, "arrow-right": ArrowRightIcon, "arrow-top-right": ArrowTopRightIcon, "arrow-up": ArrowUpIcon, "bar-chart": BarChartIcon, basket: BasketIcon, bell: BellIcon, bill: BillIcon, "binary-document": BinaryDocumentIcon, "block-content": BlockContentIcon, "block-element": BlockElementIcon, blockquote: BlockquoteIcon, bold: BoldIcon, book: BookIcon, bottle: BottleIcon, "bulb-filled": BulbFilledIcon, "bulb-outline": BulbOutlineIcon, calendar: CalendarIcon$1, case: CaseIcon, "chart-upward": ChartUpwardIcon, "checkmark-circle": CheckmarkCircleIcon, checkmark: CheckmarkIcon, "chevron-down": ChevronDownIcon, "chevron-left": ChevronLeftIcon, "chevron-right": ChevronRightIcon, "chevron-up": ChevronUpIcon, circle: CircleIcon$1, clipboard: ClipboardIcon, "clipboard-image": ClipboardImageIcon, clock: ClockIcon, "close-circle": CloseCircleIcon, close: CloseIcon, "code-block": CodeBlockIcon, code: CodeIcon, cog: CogIcon, collapse: CollapseIcon, comment: CommentIcon, component: ComponentIcon, compose: ComposeIcon, controls: ControlsIcon, copy: CopyIcon, "credit-card": CreditCardIcon, crop: CropIcon, dashboard: DashboardIcon, database: DatabaseIcon, desktop: DesktopIcon$1, document: DocumentIcon, "document-pdf": DocumentPdfIcon, "document-remove": DocumentRemoveIcon, "document-sheet": DocumentSheetIcon, "document-text": DocumentTextIcon, "document-video": DocumentVideoIcon, "document-word": DocumentWordIcon, "document-zip": DocumentZipIcon, documents: DocumentsIcon, dot: DotIcon, "double-chevron-down": DoubleChevronDownIcon, "double-chevron-left": DoubleChevronLeftIcon, "double-chevron-right": DoubleChevronRightIcon, "double-chevron-up": DoubleChevronUpIcon, download: DownloadIcon, "drag-handle": DragHandleIcon, drop: DropIcon, "earth-americas": EarthAmericasIcon, "earth-globe": EarthGlobeIcon, edit: EditIcon, "ellipsis-horizontal": EllipsisHorizontalIcon, "ellipsis-vertical": EllipsisVerticalIcon, envelope: EnvelopeIcon, equal: EqualIcon, "error-filled": ErrorFilledIcon, "error-outline": ErrorOutlineIcon, expand: ExpandIcon, "eye-closed": EyeClosedIcon, "eye-open": EyeOpenIcon, filter: FilterIcon, folder: FolderIcon, generate: GenerateIcon, "heart-filled": HeartFilledIcon, heart: HeartIcon, "help-circle": HelpCircleIcon, home: HomeIcon, "ice-cream": IceCreamIcon, image: ImageIcon, "image-remove": ImageRemoveIcon, images: ImagesIcon, "info-filled": InfoFilledIcon, "info-outline": InfoOutlineIcon, "inline-element": InlineElementIcon, inline: InlineIcon, "insert-above": InsertAboveIcon, "insert-below": InsertBelowIcon, italic: ItalicIcon, joystick: JoystickIcon, launch: LaunchIcon, leave: LeaveIcon, lemon: LemonIcon, link: LinkIcon$1, "link-removed": LinkRemovedIcon, lock: LockIcon, "logo-js": LogoJsIcon, "logo-ts": LogoTsIcon, "master-detail": MasterDetailIcon, menu: MenuIcon, "mobile-device": MobileDeviceIcon, moon: MoonIcon, number: NumberIcon, "ok-hand": OkHandIcon, olist: OlistIcon, overage: OverageIcon, package: PackageIcon, pause: PauseIcon, pin: PinIcon, "pin-removed": PinRemovedIcon, play: PlayIcon, plug: PlugIcon, presentation: PresentationIcon, publish: PublishIcon, "read-only": ReadOnlyIcon, "remove-circle": RemoveCircleIcon, remove: RemoveIcon, reset: ResetIcon, restore: RestoreIcon, retrieve: RetrieveIcon, revert: RevertIcon, robot: RobotIcon, rocket: RocketIcon, schema: SchemaIcon, search: SearchIcon, select: SelectIcon, sort: SortIcon, sparkle: SparkleIcon, sparkles: SparklesIcon, spinner: SpinnerIcon, "split-horizontal": SplitHorizontalIcon, "split-vertical": SplitVerticalIcon, square: SquareIcon$1, "stack-compact": StackCompactIcon, stack: StackIcon, star: StarIcon, stop: StopIcon, strikethrough: StrikethroughIcon, string: StringIcon, sun: SunIcon, sync: SyncIcon, tag: TagIcon, terminal: TerminalIcon, "th-large": ThLargeIcon, "th-list": ThListIcon, tiers: TiersIcon, "toggle-arrow-right": ToggleArrowRightIcon, token: TokenIcon, transfer: TransferIcon, translate: TranslateIcon, trash: TrashIcon$1, "trend-upward": TrendUpwardIcon, "triangle-outline": TriangleOutlineIcon, trolley: TrolleyIcon, truncate: TruncateIcon, ulist: UlistIcon, underline: UnderlineIcon, undo: UndoIcon, unknown: UnknownIcon, unlock: UnlockIcon, unpublish: UnpublishIcon, upload: UploadIcon, user: UserIcon, users: UsersIcon, "warning-filled": WarningFilledIcon, "warning-outline": WarningOutlineIcon };
    React$2.forwardRef(function Icon2(props, ref) {
      const { symbol, ...restProps } = props;
      const iconComponent = icons[symbol];
      if (!iconComponent) {
        return null;
      }
      return React$2.createElement(iconComponent, { ...restProps, ref });
    });
    var propTypes = { exports: {} };
    var reactIs = { exports: {} };
    var reactIs_production_min = {};
    var hasRequiredReactIs_production_min;
    function requireReactIs_production_min() {
      if (hasRequiredReactIs_production_min)
        return reactIs_production_min;
      hasRequiredReactIs_production_min = 1;
      var b2 = "function" === typeof Symbol && Symbol.for, c = b2 ? Symbol.for("react.element") : 60103, d = b2 ? Symbol.for("react.portal") : 60106, e = b2 ? Symbol.for("react.fragment") : 60107, f = b2 ? Symbol.for("react.strict_mode") : 60108, g2 = b2 ? Symbol.for("react.profiler") : 60114, h2 = b2 ? Symbol.for("react.provider") : 60109, k2 = b2 ? Symbol.for("react.context") : 60110, l2 = b2 ? Symbol.for("react.async_mode") : 60111, m2 = b2 ? Symbol.for("react.concurrent_mode") : 60111, n = b2 ? Symbol.for("react.forward_ref") : 60112, p = b2 ? Symbol.for("react.suspense") : 60113, q2 = b2 ? Symbol.for("react.suspense_list") : 60120, r = b2 ? Symbol.for("react.memo") : 60115, t = b2 ? Symbol.for("react.lazy") : 60116, v2 = b2 ? Symbol.for("react.block") : 60121, w2 = b2 ? Symbol.for("react.fundamental") : 60117, x2 = b2 ? Symbol.for("react.responder") : 60118, y2 = b2 ? Symbol.for("react.scope") : 60119;
      function z2(a) {
        if ("object" === typeof a && null !== a) {
          var u = a.$$typeof;
          switch (u) {
            case c:
              switch (a = a.type, a) {
                case l2:
                case m2:
                case e:
                case g2:
                case f:
                case p:
                  return a;
                default:
                  switch (a = a && a.$$typeof, a) {
                    case k2:
                    case n:
                    case t:
                    case r:
                    case h2:
                      return a;
                    default:
                      return u;
                  }
              }
            case d:
              return u;
          }
        }
      }
      function A(a) {
        return z2(a) === m2;
      }
      reactIs_production_min.AsyncMode = l2;
      reactIs_production_min.ConcurrentMode = m2;
      reactIs_production_min.ContextConsumer = k2;
      reactIs_production_min.ContextProvider = h2;
      reactIs_production_min.Element = c;
      reactIs_production_min.ForwardRef = n;
      reactIs_production_min.Fragment = e;
      reactIs_production_min.Lazy = t;
      reactIs_production_min.Memo = r;
      reactIs_production_min.Portal = d;
      reactIs_production_min.Profiler = g2;
      reactIs_production_min.StrictMode = f;
      reactIs_production_min.Suspense = p;
      reactIs_production_min.isAsyncMode = function(a) {
        return A(a) || z2(a) === l2;
      };
      reactIs_production_min.isConcurrentMode = A;
      reactIs_production_min.isContextConsumer = function(a) {
        return z2(a) === k2;
      };
      reactIs_production_min.isContextProvider = function(a) {
        return z2(a) === h2;
      };
      reactIs_production_min.isElement = function(a) {
        return "object" === typeof a && null !== a && a.$$typeof === c;
      };
      reactIs_production_min.isForwardRef = function(a) {
        return z2(a) === n;
      };
      reactIs_production_min.isFragment = function(a) {
        return z2(a) === e;
      };
      reactIs_production_min.isLazy = function(a) {
        return z2(a) === t;
      };
      reactIs_production_min.isMemo = function(a) {
        return z2(a) === r;
      };
      reactIs_production_min.isPortal = function(a) {
        return z2(a) === d;
      };
      reactIs_production_min.isProfiler = function(a) {
        return z2(a) === g2;
      };
      reactIs_production_min.isStrictMode = function(a) {
        return z2(a) === f;
      };
      reactIs_production_min.isSuspense = function(a) {
        return z2(a) === p;
      };
      reactIs_production_min.isValidElementType = function(a) {
        return "string" === typeof a || "function" === typeof a || a === e || a === m2 || a === g2 || a === f || a === p || a === q2 || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h2 || a.$$typeof === k2 || a.$$typeof === n || a.$$typeof === w2 || a.$$typeof === x2 || a.$$typeof === y2 || a.$$typeof === v2);
      };
      reactIs_production_min.typeOf = z2;
      return reactIs_production_min;
    }
    var reactIs_development = {};
    var hasRequiredReactIs_development;
    function requireReactIs_development() {
      if (hasRequiredReactIs_development)
        return reactIs_development;
      hasRequiredReactIs_development = 1;
      if (process.env.NODE_ENV !== "production") {
        (function() {
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal2 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement2(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          reactIs_development.AsyncMode = AsyncMode;
          reactIs_development.ConcurrentMode = ConcurrentMode;
          reactIs_development.ContextConsumer = ContextConsumer;
          reactIs_development.ContextProvider = ContextProvider;
          reactIs_development.Element = Element2;
          reactIs_development.ForwardRef = ForwardRef;
          reactIs_development.Fragment = Fragment;
          reactIs_development.Lazy = Lazy;
          reactIs_development.Memo = Memo;
          reactIs_development.Portal = Portal2;
          reactIs_development.Profiler = Profiler;
          reactIs_development.StrictMode = StrictMode;
          reactIs_development.Suspense = Suspense;
          reactIs_development.isAsyncMode = isAsyncMode;
          reactIs_development.isConcurrentMode = isConcurrentMode;
          reactIs_development.isContextConsumer = isContextConsumer;
          reactIs_development.isContextProvider = isContextProvider;
          reactIs_development.isElement = isElement2;
          reactIs_development.isForwardRef = isForwardRef;
          reactIs_development.isFragment = isFragment;
          reactIs_development.isLazy = isLazy;
          reactIs_development.isMemo = isMemo;
          reactIs_development.isPortal = isPortal;
          reactIs_development.isProfiler = isProfiler;
          reactIs_development.isStrictMode = isStrictMode;
          reactIs_development.isSuspense = isSuspense;
          reactIs_development.isValidElementType = isValidElementType;
          reactIs_development.typeOf = typeOf;
        })();
      }
      return reactIs_development;
    }
    var hasRequiredReactIs;
    function requireReactIs() {
      if (hasRequiredReactIs)
        return reactIs.exports;
      hasRequiredReactIs = 1;
      if (process.env.NODE_ENV === "production") {
        reactIs.exports = requireReactIs_production_min();
      } else {
        reactIs.exports = requireReactIs_development();
      }
      return reactIs.exports;
    }
    var objectAssign;
    var hasRequiredObjectAssign;
    function requireObjectAssign() {
      if (hasRequiredObjectAssign)
        return objectAssign;
      hasRequiredObjectAssign = 1;
      var getOwnPropertySymbols2 = Object.getOwnPropertySymbols;
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i = 0; i < 10; i++) {
            test2["_" + String.fromCharCode(i)] = i;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      objectAssign = shouldUseNative() ? Object.assign : function(target2, source) {
        var from;
        var to = toObject(target2);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
          from = Object(arguments[s]);
          for (var key2 in from) {
            if (hasOwnProperty2.call(from, key2)) {
              to[key2] = from[key2];
            }
          }
          if (getOwnPropertySymbols2) {
            symbols = getOwnPropertySymbols2(from);
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from, symbols[i])) {
                to[symbols[i]] = from[symbols[i]];
              }
            }
          }
        }
        return to;
      };
      return objectAssign;
    }
    var ReactPropTypesSecret_1;
    var hasRequiredReactPropTypesSecret;
    function requireReactPropTypesSecret() {
      if (hasRequiredReactPropTypesSecret)
        return ReactPropTypesSecret_1;
      hasRequiredReactPropTypesSecret = 1;
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      ReactPropTypesSecret_1 = ReactPropTypesSecret;
      return ReactPropTypesSecret_1;
    }
    var has;
    var hasRequiredHas;
    function requireHas() {
      if (hasRequiredHas)
        return has;
      hasRequiredHas = 1;
      has = Function.call.bind(Object.prototype.hasOwnProperty);
      return has;
    }
    var checkPropTypes_1;
    var hasRequiredCheckPropTypes;
    function requireCheckPropTypes() {
      if (hasRequiredCheckPropTypes)
        return checkPropTypes_1;
      hasRequiredCheckPropTypes = 1;
      var printWarning = function() {
      };
      if (process.env.NODE_ENV !== "production") {
        var ReactPropTypesSecret = requireReactPropTypesSecret();
        var loggedTypeFailures = {};
        var has2 = requireHas();
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x2) {
          }
        };
      }
      function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
        if (process.env.NODE_ENV !== "production") {
          for (var typeSpecName in typeSpecs) {
            if (has2(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (process.env.NODE_ENV !== "production") {
          loggedTypeFailures = {};
        }
      };
      checkPropTypes_1 = checkPropTypes;
      return checkPropTypes_1;
    }
    var factoryWithTypeCheckers;
    var hasRequiredFactoryWithTypeCheckers;
    function requireFactoryWithTypeCheckers() {
      if (hasRequiredFactoryWithTypeCheckers)
        return factoryWithTypeCheckers;
      hasRequiredFactoryWithTypeCheckers = 1;
      var ReactIs2 = requireReactIs();
      var assign = requireObjectAssign();
      var ReactPropTypesSecret = requireReactPropTypesSecret();
      var has2 = requireHas();
      var checkPropTypes = requireCheckPropTypes();
      var printWarning = function() {
      };
      if (process.env.NODE_ENV !== "production") {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x2) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess2) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = { array: createPrimitiveTypeChecker("array"), bigint: createPrimitiveTypeChecker("bigint"), bool: createPrimitiveTypeChecker("boolean"), func: createPrimitiveTypeChecker("function"), number: createPrimitiveTypeChecker("number"), object: createPrimitiveTypeChecker("object"), string: createPrimitiveTypeChecker("string"), symbol: createPrimitiveTypeChecker("symbol"), any: createAnyTypeChecker(), arrayOf: createArrayOfTypeChecker, element: createElementTypeChecker(), elementType: createElementTypeTypeChecker(), instanceOf: createInstanceTypeChecker, node: createNodeChecker(), objectOf: createObjectOfTypeChecker, oneOf: createEnumTypeChecker, oneOfType: createUnionTypeChecker, shape: createShapeTypeChecker, exact: createStrictShapeTypeChecker };
        function is(x2, y2) {
          if (x2 === y2) {
            return x2 !== 0 || 1 / x2 === 1 / y2;
          } else {
            return x2 !== x2 && y2 !== y2;
          }
        }
        function PropTypeError(message, data2) {
          this.message = message;
          this.data = data2 && typeof data2 === "object" ? data2 : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (process.env.NODE_ENV !== "production") {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess2) {
                var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
                err.name = "Invariant Violation";
                throw err;
              } else if (process.env.NODE_ENV !== "production" && typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                manualPropTypeWarningCount < 3) {
                  printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."), { expectedType });
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i = 0; i < propValue.length; i++) {
              var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs2.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (process.env.NODE_ENV !== "production") {
              if (arguments.length > 1) {
                printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for (var i = 0; i < expectedValues.length; i++) {
              if (is(propValue, expectedValues[i])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key2, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key2 in propValue) {
              if (has2(propValue, key2)) {
                var error = typeChecker(propValue, key2, componentName, location, propFullName + "." + key2, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            process.env.NODE_ENV !== "production" ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== "function") {
              printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + ".");
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
              var checker2 = arrayOfTypeCheckers[i2];
              var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has2(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            if (!isNode2(props[propName])) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location, propFullName, key2, type) {
          return new PropTypeError((componentName || "React class") + ": " + location + " type `" + propFullName + "." + key2 + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`.");
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key2 in shapeTypes) {
              var checker = shapeTypes[key2];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key2, getPreciseType(checker));
              }
              var error = checker(propValue, key2, componentName, location, propFullName + "." + key2, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign({}, props[propName], shapeTypes);
            for (var key2 in allKeys) {
              var checker = shapeTypes[key2];
              if (has2(shapeTypes, key2) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key2, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key2 + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
              }
              var error = checker(propValue, key2, componentName, location, propFullName + "." + key2, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode2(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode2);
              }
              if (propValue === null || isValidElement(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode2(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode2(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
      return factoryWithTypeCheckers;
    }
    var factoryWithThrowingShims;
    var hasRequiredFactoryWithThrowingShims;
    function requireFactoryWithThrowingShims() {
      if (hasRequiredFactoryWithThrowingShims)
        return factoryWithThrowingShims;
      hasRequiredFactoryWithThrowingShims = 1;
      var ReactPropTypesSecret = requireReactPropTypesSecret();
      function emptyFunction() {
      }
      function emptyFunctionWithReset() {
      }
      emptyFunctionWithReset.resetWarningCache = emptyFunction;
      factoryWithThrowingShims = function() {
        function shim(props, propName, componentName, location, propFullName, secret) {
          if (secret === ReactPropTypesSecret) {
            return;
          }
          var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
          err.name = "Invariant Violation";
          throw err;
        }
        shim.isRequired = shim;
        function getShim() {
          return shim;
        }
        var ReactPropTypes = { array: shim, bigint: shim, bool: shim, func: shim, number: shim, object: shim, string: shim, symbol: shim, any: shim, arrayOf: getShim, element: shim, elementType: shim, instanceOf: getShim, node: shim, objectOf: getShim, oneOf: getShim, oneOfType: getShim, shape: getShim, exact: getShim, checkPropTypes: emptyFunctionWithReset, resetWarningCache: emptyFunction };
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
      return factoryWithThrowingShims;
    }
    if (process.env.NODE_ENV !== "production") {
      ReactIs = requireReactIs();
      throwOnDirectAccess = true;
      propTypes.exports = requireFactoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      propTypes.exports = requireFactoryWithThrowingShims()();
    }
    var ReactIs;
    var throwOnDirectAccess;
    var propTypesExports = propTypes.exports;
    var immutable = extend;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function extend() {
      var target2 = {};
      for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key2 in source) {
          if (hasOwnProperty.call(source, key2)) {
            target2[key2] = source[key2];
          }
        }
      }
      return target2;
    }
    var schema$1 = Schema$2;
    var proto$1 = Schema$2.prototype;
    proto$1.space = null;
    proto$1.normal = {};
    proto$1.property = {};
    function Schema$2(property, normal, space2) {
      this.property = property;
      this.normal = normal;
      if (space2) {
        this.space = space2;
      }
    }
    var xtend = immutable;
    var Schema$1 = schema$1;
    var merge_1 = merge$1;
    function merge$1(definitions) {
      var length = definitions.length;
      var property = [];
      var normal = [];
      var index2 = -1;
      var info2;
      var space2;
      while (++index2 < length) {
        info2 = definitions[index2];
        property.push(info2.property);
        normal.push(info2.normal);
        space2 = info2.space;
      }
      return new Schema$1(xtend.apply(null, property), xtend.apply(null, normal), space2);
    }
    var normalize_1 = normalize$3;
    function normalize$3(value) {
      return value.toLowerCase();
    }
    var info = Info$2;
    var proto = Info$2.prototype;
    proto.space = null;
    proto.attribute = null;
    proto.property = null;
    proto.boolean = false;
    proto.booleanish = false;
    proto.overloadedBoolean = false;
    proto.number = false;
    proto.commaSeparated = false;
    proto.spaceSeparated = false;
    proto.commaOrSpaceSeparated = false;
    proto.mustUseProperty = false;
    proto.defined = false;
    function Info$2(property, attribute) {
      this.property = property;
      this.attribute = attribute;
    }
    var types$3 = {};
    var powers = 0;
    types$3.boolean = increment();
    types$3.booleanish = increment();
    types$3.overloadedBoolean = increment();
    types$3.number = increment();
    types$3.spaceSeparated = increment();
    types$3.commaSeparated = increment();
    types$3.commaOrSpaceSeparated = increment();
    function increment() {
      return Math.pow(2, ++powers);
    }
    var Info$1 = info;
    var types$2 = types$3;
    var definedInfo = DefinedInfo$2;
    DefinedInfo$2.prototype = new Info$1();
    DefinedInfo$2.prototype.defined = true;
    var checks = ["boolean", "booleanish", "overloadedBoolean", "number", "commaSeparated", "spaceSeparated", "commaOrSpaceSeparated"];
    var checksLength = checks.length;
    function DefinedInfo$2(property, attribute, mask, space2) {
      var index2 = -1;
      var check2;
      mark(this, "space", space2);
      Info$1.call(this, property, attribute);
      while (++index2 < checksLength) {
        check2 = checks[index2];
        mark(this, check2, (mask & types$2[check2]) === types$2[check2]);
      }
    }
    function mark(values, key2, value) {
      if (value) {
        values[key2] = value;
      }
    }
    var normalize$2 = normalize_1;
    var Schema = schema$1;
    var DefinedInfo$1 = definedInfo;
    var create_1 = create$5;
    function create$5(definition) {
      var space2 = definition.space;
      var mustUseProperty = definition.mustUseProperty || [];
      var attributes2 = definition.attributes || {};
      var props = definition.properties;
      var transform = definition.transform;
      var property = {};
      var normal = {};
      var prop2;
      var info2;
      for (prop2 in props) {
        info2 = new DefinedInfo$1(prop2, transform(attributes2, prop2), props[prop2], space2);
        if (mustUseProperty.indexOf(prop2) !== -1) {
          info2.mustUseProperty = true;
        }
        property[prop2] = info2;
        normal[normalize$2(prop2)] = prop2;
        normal[normalize$2(info2.attribute)] = prop2;
      }
      return new Schema(property, normal, space2);
    }
    var create$4 = create_1;
    var xlink$1 = create$4({ space: "xlink", transform: xlinkTransform, properties: { xLinkActuate: null, xLinkArcRole: null, xLinkHref: null, xLinkRole: null, xLinkShow: null, xLinkTitle: null, xLinkType: null } });
    function xlinkTransform(_2, prop2) {
      return "xlink:" + prop2.slice(5).toLowerCase();
    }
    var create$3 = create_1;
    var xml$1 = create$3({ space: "xml", transform: xmlTransform, properties: { xmlLang: null, xmlBase: null, xmlSpace: null } });
    function xmlTransform(_2, prop2) {
      return "xml:" + prop2.slice(3).toLowerCase();
    }
    var caseSensitiveTransform_1 = caseSensitiveTransform$1;
    function caseSensitiveTransform$1(attributes2, attribute) {
      return attribute in attributes2 ? attributes2[attribute] : attribute;
    }
    var caseSensitiveTransform = caseSensitiveTransform_1;
    var caseInsensitiveTransform_1 = caseInsensitiveTransform$2;
    function caseInsensitiveTransform$2(attributes2, property) {
      return caseSensitiveTransform(attributes2, property.toLowerCase());
    }
    var create$2 = create_1;
    var caseInsensitiveTransform$1 = caseInsensitiveTransform_1;
    var xmlns$1 = create$2({ space: "xmlns", attributes: { xmlnsxlink: "xmlns:xlink" }, transform: caseInsensitiveTransform$1, properties: { xmlns: null, xmlnsXLink: null } });
    var types$1 = types$3;
    var create$1 = create_1;
    var booleanish$1 = types$1.booleanish;
    var number$1 = types$1.number;
    var spaceSeparated$1 = types$1.spaceSeparated;
    var aria$1 = create$1({ transform: ariaTransform, properties: { ariaActiveDescendant: null, ariaAtomic: booleanish$1, ariaAutoComplete: null, ariaBusy: booleanish$1, ariaChecked: booleanish$1, ariaColCount: number$1, ariaColIndex: number$1, ariaColSpan: number$1, ariaControls: spaceSeparated$1, ariaCurrent: null, ariaDescribedBy: spaceSeparated$1, ariaDetails: null, ariaDisabled: booleanish$1, ariaDropEffect: spaceSeparated$1, ariaErrorMessage: null, ariaExpanded: booleanish$1, ariaFlowTo: spaceSeparated$1, ariaGrabbed: booleanish$1, ariaHasPopup: null, ariaHidden: booleanish$1, ariaInvalid: null, ariaKeyShortcuts: null, ariaLabel: null, ariaLabelledBy: spaceSeparated$1, ariaLevel: number$1, ariaLive: null, ariaModal: booleanish$1, ariaMultiLine: booleanish$1, ariaMultiSelectable: booleanish$1, ariaOrientation: null, ariaOwns: spaceSeparated$1, ariaPlaceholder: null, ariaPosInSet: number$1, ariaPressed: booleanish$1, ariaReadOnly: booleanish$1, ariaRelevant: null, ariaRequired: booleanish$1, ariaRoleDescription: spaceSeparated$1, ariaRowCount: number$1, ariaRowIndex: number$1, ariaRowSpan: number$1, ariaSelected: booleanish$1, ariaSetSize: number$1, ariaSort: null, ariaValueMax: number$1, ariaValueMin: number$1, ariaValueNow: number$1, ariaValueText: null, role: null } });
    function ariaTransform(_2, prop2) {
      return prop2 === "role" ? prop2 : "aria-" + prop2.slice(4).toLowerCase();
    }
    var types = types$3;
    var create = create_1;
    var caseInsensitiveTransform = caseInsensitiveTransform_1;
    var boolean = types.boolean;
    var overloadedBoolean = types.overloadedBoolean;
    var booleanish = types.booleanish;
    var number = types.number;
    var spaceSeparated = types.spaceSeparated;
    var commaSeparated = types.commaSeparated;
    var html$2 = create({ space: "html", attributes: { acceptcharset: "accept-charset", classname: "class", htmlfor: "for", httpequiv: "http-equiv" }, transform: caseInsensitiveTransform, mustUseProperty: ["checked", "multiple", "muted", "selected"], properties: {
      // Standard Properties.
      abbr: null,
      accept: commaSeparated,
      acceptCharset: spaceSeparated,
      accessKey: spaceSeparated,
      action: null,
      allow: null,
      allowFullScreen: boolean,
      allowPaymentRequest: boolean,
      allowUserMedia: boolean,
      alt: null,
      as: null,
      async: boolean,
      autoCapitalize: null,
      autoComplete: spaceSeparated,
      autoFocus: boolean,
      autoPlay: boolean,
      capture: boolean,
      charSet: null,
      checked: boolean,
      cite: null,
      className: spaceSeparated,
      cols: number,
      colSpan: null,
      content: null,
      contentEditable: booleanish,
      controls: boolean,
      controlsList: spaceSeparated,
      coords: number | commaSeparated,
      crossOrigin: null,
      data: null,
      dateTime: null,
      decoding: null,
      default: boolean,
      defer: boolean,
      dir: null,
      dirName: null,
      disabled: boolean,
      download: overloadedBoolean,
      draggable: booleanish,
      encType: null,
      enterKeyHint: null,
      form: null,
      formAction: null,
      formEncType: null,
      formMethod: null,
      formNoValidate: boolean,
      formTarget: null,
      headers: spaceSeparated,
      height: number,
      hidden: boolean,
      high: number,
      href: null,
      hrefLang: null,
      htmlFor: spaceSeparated,
      httpEquiv: spaceSeparated,
      id: null,
      imageSizes: null,
      imageSrcSet: commaSeparated,
      inputMode: null,
      integrity: null,
      is: null,
      isMap: boolean,
      itemId: null,
      itemProp: spaceSeparated,
      itemRef: spaceSeparated,
      itemScope: boolean,
      itemType: spaceSeparated,
      kind: null,
      label: null,
      lang: null,
      language: null,
      list: null,
      loading: null,
      loop: boolean,
      low: number,
      manifest: null,
      max: null,
      maxLength: number,
      media: null,
      method: null,
      min: null,
      minLength: number,
      multiple: boolean,
      muted: boolean,
      name: null,
      nonce: null,
      noModule: boolean,
      noValidate: boolean,
      onAbort: null,
      onAfterPrint: null,
      onAuxClick: null,
      onBeforePrint: null,
      onBeforeUnload: null,
      onBlur: null,
      onCancel: null,
      onCanPlay: null,
      onCanPlayThrough: null,
      onChange: null,
      onClick: null,
      onClose: null,
      onContextMenu: null,
      onCopy: null,
      onCueChange: null,
      onCut: null,
      onDblClick: null,
      onDrag: null,
      onDragEnd: null,
      onDragEnter: null,
      onDragExit: null,
      onDragLeave: null,
      onDragOver: null,
      onDragStart: null,
      onDrop: null,
      onDurationChange: null,
      onEmptied: null,
      onEnded: null,
      onError: null,
      onFocus: null,
      onFormData: null,
      onHashChange: null,
      onInput: null,
      onInvalid: null,
      onKeyDown: null,
      onKeyPress: null,
      onKeyUp: null,
      onLanguageChange: null,
      onLoad: null,
      onLoadedData: null,
      onLoadedMetadata: null,
      onLoadEnd: null,
      onLoadStart: null,
      onMessage: null,
      onMessageError: null,
      onMouseDown: null,
      onMouseEnter: null,
      onMouseLeave: null,
      onMouseMove: null,
      onMouseOut: null,
      onMouseOver: null,
      onMouseUp: null,
      onOffline: null,
      onOnline: null,
      onPageHide: null,
      onPageShow: null,
      onPaste: null,
      onPause: null,
      onPlay: null,
      onPlaying: null,
      onPopState: null,
      onProgress: null,
      onRateChange: null,
      onRejectionHandled: null,
      onReset: null,
      onResize: null,
      onScroll: null,
      onSecurityPolicyViolation: null,
      onSeeked: null,
      onSeeking: null,
      onSelect: null,
      onSlotChange: null,
      onStalled: null,
      onStorage: null,
      onSubmit: null,
      onSuspend: null,
      onTimeUpdate: null,
      onToggle: null,
      onUnhandledRejection: null,
      onUnload: null,
      onVolumeChange: null,
      onWaiting: null,
      onWheel: null,
      open: boolean,
      optimum: number,
      pattern: null,
      ping: spaceSeparated,
      placeholder: null,
      playsInline: boolean,
      poster: null,
      preload: null,
      readOnly: boolean,
      referrerPolicy: null,
      rel: spaceSeparated,
      required: boolean,
      reversed: boolean,
      rows: number,
      rowSpan: number,
      sandbox: spaceSeparated,
      scope: null,
      scoped: boolean,
      seamless: boolean,
      selected: boolean,
      shape: null,
      size: number,
      sizes: null,
      slot: null,
      span: number,
      spellCheck: booleanish,
      src: null,
      srcDoc: null,
      srcLang: null,
      srcSet: commaSeparated,
      start: number,
      step: null,
      style: null,
      tabIndex: number,
      target: null,
      title: null,
      translate: null,
      type: null,
      typeMustMatch: boolean,
      useMap: null,
      value: booleanish,
      width: number,
      wrap: null,
      // Legacy.
      // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
      align: null,
      // Several. Use CSS `text-align` instead,
      aLink: null,
      // `<body>`. Use CSS `a:active {color}` instead
      archive: spaceSeparated,
      // `<object>`. List of URIs to archives
      axis: null,
      // `<td>` and `<th>`. Use `scope` on `<th>`
      background: null,
      // `<body>`. Use CSS `background-image` instead
      bgColor: null,
      // `<body>` and table elements. Use CSS `background-color` instead
      border: number,
      // `<table>`. Use CSS `border-width` instead,
      borderColor: null,
      // `<table>`. Use CSS `border-color` instead,
      bottomMargin: number,
      // `<body>`
      cellPadding: null,
      // `<table>`
      cellSpacing: null,
      // `<table>`
      char: null,
      // Several table elements. When `align=char`, sets the character to align on
      charOff: null,
      // Several table elements. When `char`, offsets the alignment
      classId: null,
      // `<object>`
      clear: null,
      // `<br>`. Use CSS `clear` instead
      code: null,
      // `<object>`
      codeBase: null,
      // `<object>`
      codeType: null,
      // `<object>`
      color: null,
      // `<font>` and `<hr>`. Use CSS instead
      compact: boolean,
      // Lists. Use CSS to reduce space between items instead
      declare: boolean,
      // `<object>`
      event: null,
      // `<script>`
      face: null,
      // `<font>`. Use CSS instead
      frame: null,
      // `<table>`
      frameBorder: null,
      // `<iframe>`. Use CSS `border` instead
      hSpace: number,
      // `<img>` and `<object>`
      leftMargin: number,
      // `<body>`
      link: null,
      // `<body>`. Use CSS `a:link {color: *}` instead
      longDesc: null,
      // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
      lowSrc: null,
      // `<img>`. Use a `<picture>`
      marginHeight: number,
      // `<body>`
      marginWidth: number,
      // `<body>`
      noResize: boolean,
      // `<frame>`
      noHref: boolean,
      // `<area>`. Use no href instead of an explicit `nohref`
      noShade: boolean,
      // `<hr>`. Use background-color and height instead of borders
      noWrap: boolean,
      // `<td>` and `<th>`
      object: null,
      // `<applet>`
      profile: null,
      // `<head>`
      prompt: null,
      // `<isindex>`
      rev: null,
      // `<link>`
      rightMargin: number,
      // `<body>`
      rules: null,
      // `<table>`
      scheme: null,
      // `<meta>`
      scrolling: booleanish,
      // `<frame>`. Use overflow in the child context
      standby: null,
      // `<object>`
      summary: null,
      // `<table>`
      text: null,
      // `<body>`. Use CSS `color` instead
      topMargin: number,
      // `<body>`
      valueType: null,
      // `<param>`
      version: null,
      // `<html>`. Use a doctype.
      vAlign: null,
      // Several. Use CSS `vertical-align` instead
      vLink: null,
      // `<body>`. Use CSS `a:visited {color}` instead
      vSpace: number,
      // `<img>` and `<object>`
      // Non-standard Properties.
      allowTransparency: null,
      autoCorrect: null,
      autoSave: null,
      disablePictureInPicture: boolean,
      disableRemotePlayback: boolean,
      prefix: null,
      property: null,
      results: number,
      security: null,
      unselectable: null
    } });
    var merge = merge_1;
    var xlink = xlink$1;
    var xml = xml$1;
    var xmlns = xmlns$1;
    var aria = aria$1;
    var html$1 = html$2;
    var html_1$1 = merge([xml, xlink, xmlns, aria, html$1]);
    var normalize$1 = normalize_1;
    var DefinedInfo = definedInfo;
    var Info = info;
    var data = "data";
    var find_1 = find$1;
    var valid = /^data[-\w.:]+$/i;
    var dash$1 = /-[a-z]/g;
    var cap$1 = /[A-Z]/g;
    function find$1(schema2, value) {
      var normal = normalize$1(value);
      var prop2 = value;
      var Type = Info;
      if (normal in schema2.normal) {
        return schema2.property[schema2.normal[normal]];
      }
      if (normal.length > 4 && normal.slice(0, 4) === data && valid.test(value)) {
        if (value.charAt(4) === "-") {
          prop2 = datasetToProperty(value);
        } else {
          value = datasetToAttribute(value);
        }
        Type = DefinedInfo;
      }
      return new Type(prop2, value);
    }
    function datasetToProperty(attribute) {
      var value = attribute.slice(5).replace(dash$1, camelcase);
      return data + value.charAt(0).toUpperCase() + value.slice(1);
    }
    function datasetToAttribute(property) {
      var value = property.slice(4);
      if (dash$1.test(value)) {
        return property;
      }
      value = value.replace(cap$1, kebab);
      if (value.charAt(0) !== "-") {
        value = "-" + value;
      }
      return data + value;
    }
    function kebab($0) {
      return "-" + $0.toLowerCase();
    }
    function camelcase($0) {
      return $0.charAt(1).toUpperCase();
    }
    var hastUtilParseSelector = parse$3;
    var search = /[#.]/g;
    function parse$3(selector, defaultTagName) {
      var value = selector || "";
      var name2 = defaultTagName || "div";
      var props = {};
      var start = 0;
      var subvalue;
      var previous;
      var match;
      while (start < value.length) {
        search.lastIndex = start;
        match = search.exec(value);
        subvalue = value.slice(start, match ? match.index : value.length);
        if (subvalue) {
          if (!previous) {
            name2 = subvalue;
          } else if (previous === "#") {
            props.id = subvalue;
          } else if (props.className) {
            props.className.push(subvalue);
          } else {
            props.className = [subvalue];
          }
          start += subvalue.length;
        }
        if (match) {
          previous = match[0];
          start++;
        }
      }
      return { type: "element", tagName: name2, properties: props, children: [] };
    }
    var spaceSeparatedTokens = {};
    spaceSeparatedTokens.parse = parse$2;
    spaceSeparatedTokens.stringify = stringify$2;
    var empty$2 = "";
    var space$2 = " ";
    var whiteSpace = /[ \t\n\r\f]+/g;
    function parse$2(value) {
      var input = String(value || empty$2).trim();
      return input === empty$2 ? [] : input.split(whiteSpace);
    }
    function stringify$2(values) {
      return values.join(space$2).trim();
    }
    var commaSeparatedTokens = {};
    commaSeparatedTokens.parse = parse$1;
    commaSeparatedTokens.stringify = stringify$1;
    var comma$1 = ",";
    var space$1 = " ";
    var empty$1 = "";
    function parse$1(value) {
      var values = [];
      var input = String(value || empty$1);
      var index2 = input.indexOf(comma$1);
      var lastIndex = 0;
      var end = false;
      var val;
      while (!end) {
        if (index2 === -1) {
          index2 = input.length;
          end = true;
        }
        val = input.slice(lastIndex, index2).trim();
        if (val || !end) {
          values.push(val);
        }
        lastIndex = index2 + 1;
        index2 = input.indexOf(comma$1, lastIndex);
      }
      return values;
    }
    function stringify$1(values, options) {
      var settings = options || {};
      var left = settings.padLeft === false ? empty$1 : space$1;
      var right = settings.padRight ? space$1 : empty$1;
      if (values[values.length - 1] === empty$1) {
        values = values.concat(empty$1);
      }
      return values.join(right + comma$1 + left).trim();
    }
    var find = find_1;
    var normalize = normalize_1;
    var parseSelector = hastUtilParseSelector;
    var spaces = spaceSeparatedTokens.parse;
    var commas = commaSeparatedTokens.parse;
    var factory_1 = factory$1;
    var own$4 = {}.hasOwnProperty;
    function factory$1(schema2, defaultTagName, caseSensitive) {
      var adjust = caseSensitive ? createAdjustMap(caseSensitive) : null;
      return h2;
      function h2(selector, properties) {
        var node = parseSelector(selector, defaultTagName);
        var children = Array.prototype.slice.call(arguments, 2);
        var name2 = node.tagName.toLowerCase();
        var property;
        node.tagName = adjust && own$4.call(adjust, name2) ? adjust[name2] : name2;
        if (properties && isChildren(properties, node)) {
          children.unshift(properties);
          properties = null;
        }
        if (properties) {
          for (property in properties) {
            addProperty(node.properties, property, properties[property]);
          }
        }
        addChild(node.children, children);
        if (node.tagName === "template") {
          node.content = { type: "root", children: node.children };
          node.children = [];
        }
        return node;
      }
      function addProperty(properties, key2, value) {
        var info2;
        var property;
        var result;
        if (value === null || value === void 0 || value !== value) {
          return;
        }
        info2 = find(schema2, key2);
        property = info2.property;
        result = value;
        if (typeof result === "string") {
          if (info2.spaceSeparated) {
            result = spaces(result);
          } else if (info2.commaSeparated) {
            result = commas(result);
          } else if (info2.commaOrSpaceSeparated) {
            result = spaces(commas(result).join(" "));
          }
        }
        if (property === "style" && typeof value !== "string") {
          result = style(result);
        }
        if (property === "className" && properties.className) {
          result = properties.className.concat(result);
        }
        properties[property] = parsePrimitives(info2, property, result);
      }
    }
    function isChildren(value, node) {
      return typeof value === "string" || "length" in value || isNode$1(node.tagName, value);
    }
    function isNode$1(tagName, value) {
      var type = value.type;
      if (tagName === "input" || !type || typeof type !== "string") {
        return false;
      }
      if (typeof value.children === "object" && "length" in value.children) {
        return true;
      }
      type = type.toLowerCase();
      if (tagName === "button") {
        return type !== "menu" && type !== "submit" && type !== "reset" && type !== "button";
      }
      return "value" in value;
    }
    function addChild(nodes, value) {
      var index2;
      var length;
      if (typeof value === "string" || typeof value === "number") {
        nodes.push({ type: "text", value: String(value) });
        return;
      }
      if (typeof value === "object" && "length" in value) {
        index2 = -1;
        length = value.length;
        while (++index2 < length) {
          addChild(nodes, value[index2]);
        }
        return;
      }
      if (typeof value !== "object" || !("type" in value)) {
        throw new Error("Expected node, nodes, or string, got `" + value + "`");
      }
      nodes.push(value);
    }
    function parsePrimitives(info2, name2, value) {
      var index2;
      var length;
      var result;
      if (typeof value !== "object" || !("length" in value)) {
        return parsePrimitive(info2, name2, value);
      }
      length = value.length;
      index2 = -1;
      result = [];
      while (++index2 < length) {
        result[index2] = parsePrimitive(info2, name2, value[index2]);
      }
      return result;
    }
    function parsePrimitive(info2, name2, value) {
      var result = value;
      if (info2.number || info2.positiveNumber) {
        if (!isNaN(result) && result !== "") {
          result = Number(result);
        }
      } else if (info2.boolean || info2.overloadedBoolean) {
        if (typeof result === "string" && (result === "" || normalize(value) === normalize(name2))) {
          result = true;
        }
      }
      return result;
    }
    function style(value) {
      var result = [];
      var key2;
      for (key2 in value) {
        result.push([key2, value[key2]].join(": "));
      }
      return result.join("; ");
    }
    function createAdjustMap(values) {
      var length = values.length;
      var index2 = -1;
      var result = {};
      var value;
      while (++index2 < length) {
        value = values[index2];
        result[value.toLowerCase()] = value;
      }
      return result;
    }
    var schema = html_1$1;
    var factory = factory_1;
    var html = factory(schema, "div");
    html.displayName = "html";
    var html_1 = html;
    var hastscript = html_1;
    var AElig$1 = "\xC6";
    var AMP$1 = "&";
    var Aacute$1 = "\xC1";
    var Acirc$1 = "\xC2";
    var Agrave$1 = "\xC0";
    var Aring$1 = "\xC5";
    var Atilde$1 = "\xC3";
    var Auml$1 = "\xC4";
    var COPY$1 = "\xA9";
    var Ccedil$1 = "\xC7";
    var ETH$1 = "\xD0";
    var Eacute$1 = "\xC9";
    var Ecirc$1 = "\xCA";
    var Egrave$1 = "\xC8";
    var Euml$1 = "\xCB";
    var GT$1 = ">";
    var Iacute$1 = "\xCD";
    var Icirc$1 = "\xCE";
    var Igrave$1 = "\xCC";
    var Iuml$1 = "\xCF";
    var LT$1 = "<";
    var Ntilde$1 = "\xD1";
    var Oacute$1 = "\xD3";
    var Ocirc$1 = "\xD4";
    var Ograve$1 = "\xD2";
    var Oslash$1 = "\xD8";
    var Otilde$1 = "\xD5";
    var Ouml$1 = "\xD6";
    var QUOT$1 = '"';
    var REG$1 = "\xAE";
    var THORN$1 = "\xDE";
    var Uacute$1 = "\xDA";
    var Ucirc$1 = "\xDB";
    var Ugrave$1 = "\xD9";
    var Uuml$1 = "\xDC";
    var Yacute$1 = "\xDD";
    var aacute$1 = "\xE1";
    var acirc$1 = "\xE2";
    var acute$1 = "\xB4";
    var aelig$1 = "\xE6";
    var agrave$1 = "\xE0";
    var amp$1 = "&";
    var aring$1 = "\xE5";
    var atilde$1 = "\xE3";
    var auml$1 = "\xE4";
    var brvbar$1 = "\xA6";
    var ccedil$1 = "\xE7";
    var cedil$1 = "\xB8";
    var cent$1 = "\xA2";
    var copy$1 = "\xA9";
    var curren$1 = "\xA4";
    var deg$1 = "\xB0";
    var divide$1 = "\xF7";
    var eacute$1 = "\xE9";
    var ecirc$1 = "\xEA";
    var egrave$1 = "\xE8";
    var eth$1 = "\xF0";
    var euml$1 = "\xEB";
    var frac12$1 = "\xBD";
    var frac14$1 = "\xBC";
    var frac34$1 = "\xBE";
    var gt$1 = ">";
    var iacute$1 = "\xED";
    var icirc$1 = "\xEE";
    var iexcl$1 = "\xA1";
    var igrave$1 = "\xEC";
    var iquest$1 = "\xBF";
    var iuml$1 = "\xEF";
    var laquo$1 = "\xAB";
    var lt$1 = "<";
    var macr$1 = "\xAF";
    var micro$1 = "\xB5";
    var middot$1 = "\xB7";
    var nbsp$1 = "\xA0";
    var not$1 = "\xAC";
    var ntilde$1 = "\xF1";
    var oacute$1 = "\xF3";
    var ocirc$1 = "\xF4";
    var ograve$1 = "\xF2";
    var ordf$1 = "\xAA";
    var ordm$1 = "\xBA";
    var oslash$1 = "\xF8";
    var otilde$1 = "\xF5";
    var ouml$1 = "\xF6";
    var para$1 = "\xB6";
    var plusmn$1 = "\xB1";
    var pound$1 = "\xA3";
    var quot$1 = '"';
    var raquo$1 = "\xBB";
    var reg$1 = "\xAE";
    var sect$1 = "\xA7";
    var shy$1 = "\xAD";
    var sup1$1 = "\xB9";
    var sup2$1 = "\xB2";
    var sup3$1 = "\xB3";
    var szlig$1 = "\xDF";
    var thorn$1 = "\xFE";
    var times$1 = "\xD7";
    var uacute$1 = "\xFA";
    var ucirc$1 = "\xFB";
    var ugrave$1 = "\xF9";
    var uml$1 = "\xA8";
    var uuml$1 = "\xFC";
    var yacute$1 = "\xFD";
    var yen$1 = "\xA5";
    var yuml$1 = "\xFF";
    var require$$0$1 = { AElig: AElig$1, AMP: AMP$1, Aacute: Aacute$1, Acirc: Acirc$1, Agrave: Agrave$1, Aring: Aring$1, Atilde: Atilde$1, Auml: Auml$1, COPY: COPY$1, Ccedil: Ccedil$1, ETH: ETH$1, Eacute: Eacute$1, Ecirc: Ecirc$1, Egrave: Egrave$1, Euml: Euml$1, GT: GT$1, Iacute: Iacute$1, Icirc: Icirc$1, Igrave: Igrave$1, Iuml: Iuml$1, LT: LT$1, Ntilde: Ntilde$1, Oacute: Oacute$1, Ocirc: Ocirc$1, Ograve: Ograve$1, Oslash: Oslash$1, Otilde: Otilde$1, Ouml: Ouml$1, QUOT: QUOT$1, REG: REG$1, THORN: THORN$1, Uacute: Uacute$1, Ucirc: Ucirc$1, Ugrave: Ugrave$1, Uuml: Uuml$1, Yacute: Yacute$1, aacute: aacute$1, acirc: acirc$1, acute: acute$1, aelig: aelig$1, agrave: agrave$1, amp: amp$1, aring: aring$1, atilde: atilde$1, auml: auml$1, brvbar: brvbar$1, ccedil: ccedil$1, cedil: cedil$1, cent: cent$1, copy: copy$1, curren: curren$1, deg: deg$1, divide: divide$1, eacute: eacute$1, ecirc: ecirc$1, egrave: egrave$1, eth: eth$1, euml: euml$1, frac12: frac12$1, frac14: frac14$1, frac34: frac34$1, gt: gt$1, iacute: iacute$1, icirc: icirc$1, iexcl: iexcl$1, igrave: igrave$1, iquest: iquest$1, iuml: iuml$1, laquo: laquo$1, lt: lt$1, macr: macr$1, micro: micro$1, middot: middot$1, nbsp: nbsp$1, not: not$1, ntilde: ntilde$1, oacute: oacute$1, ocirc: ocirc$1, ograve: ograve$1, ordf: ordf$1, ordm: ordm$1, oslash: oslash$1, otilde: otilde$1, ouml: ouml$1, para: para$1, plusmn: plusmn$1, pound: pound$1, quot: quot$1, raquo: raquo$1, reg: reg$1, sect: sect$1, shy: shy$1, sup1: sup1$1, sup2: sup2$1, sup3: sup3$1, szlig: szlig$1, thorn: thorn$1, times: times$1, uacute: uacute$1, ucirc: ucirc$1, ugrave: ugrave$1, uml: uml$1, uuml: uuml$1, yacute: yacute$1, yen: yen$1, yuml: yuml$1 };
    var require$$1 = { "0": "\uFFFD", "128": "\u20AC", "130": "\u201A", "131": "\u0192", "132": "\u201E", "133": "\u2026", "134": "\u2020", "135": "\u2021", "136": "\u02C6", "137": "\u2030", "138": "\u0160", "139": "\u2039", "140": "\u0152", "142": "\u017D", "145": "\u2018", "146": "\u2019", "147": "\u201C", "148": "\u201D", "149": "\u2022", "150": "\u2013", "151": "\u2014", "152": "\u02DC", "153": "\u2122", "154": "\u0161", "155": "\u203A", "156": "\u0153", "158": "\u017E", "159": "\u0178" };
    var isDecimal = decimal$2;
    function decimal$2(character) {
      var code = typeof character === "string" ? character.charCodeAt(0) : character;
      return code >= 48 && code <= 57;
    }
    var isHexadecimal = hexadecimal$1;
    function hexadecimal$1(character) {
      var code = typeof character === "string" ? character.charCodeAt(0) : character;
      return code >= 97 && code <= 102 || code >= 65 && code <= 70 || code >= 48 && code <= 57;
    }
    var isAlphabetical = alphabetical$1;
    function alphabetical$1(character) {
      var code = typeof character === "string" ? character.charCodeAt(0) : character;
      return code >= 97 && code <= 122 || code >= 65 && code <= 90;
    }
    var alphabetical = isAlphabetical;
    var decimal$1 = isDecimal;
    var isAlphanumerical = alphanumerical$1;
    function alphanumerical$1(character) {
      return alphabetical(character) || decimal$1(character);
    }
    var AEli = "\xC6";
    var AElig = "\xC6";
    var AM = "&";
    var AMP = "&";
    var Aacut = "\xC1";
    var Aacute = "\xC1";
    var Abreve = "\u0102";
    var Acir = "\xC2";
    var Acirc = "\xC2";
    var Acy = "\u0410";
    var Afr = "\u{1D504}";
    var Agrav = "\xC0";
    var Agrave = "\xC0";
    var Alpha = "\u0391";
    var Amacr = "\u0100";
    var And = "\u2A53";
    var Aogon = "\u0104";
    var Aopf = "\u{1D538}";
    var ApplyFunction = "\u2061";
    var Arin = "\xC5";
    var Aring = "\xC5";
    var Ascr = "\u{1D49C}";
    var Assign = "\u2254";
    var Atild = "\xC3";
    var Atilde = "\xC3";
    var Aum = "\xC4";
    var Auml = "\xC4";
    var Backslash = "\u2216";
    var Barv = "\u2AE7";
    var Barwed = "\u2306";
    var Bcy = "\u0411";
    var Because = "\u2235";
    var Bernoullis = "\u212C";
    var Beta = "\u0392";
    var Bfr = "\u{1D505}";
    var Bopf = "\u{1D539}";
    var Breve = "\u02D8";
    var Bscr = "\u212C";
    var Bumpeq = "\u224E";
    var CHcy = "\u0427";
    var COP = "\xA9";
    var COPY = "\xA9";
    var Cacute = "\u0106";
    var Cap = "\u22D2";
    var CapitalDifferentialD = "\u2145";
    var Cayleys = "\u212D";
    var Ccaron = "\u010C";
    var Ccedi = "\xC7";
    var Ccedil = "\xC7";
    var Ccirc = "\u0108";
    var Cconint = "\u2230";
    var Cdot = "\u010A";
    var Cedilla = "\xB8";
    var CenterDot = "\xB7";
    var Cfr = "\u212D";
    var Chi = "\u03A7";
    var CircleDot = "\u2299";
    var CircleMinus = "\u2296";
    var CirclePlus = "\u2295";
    var CircleTimes = "\u2297";
    var ClockwiseContourIntegral = "\u2232";
    var CloseCurlyDoubleQuote = "\u201D";
    var CloseCurlyQuote = "\u2019";
    var Colon = "\u2237";
    var Colone = "\u2A74";
    var Congruent = "\u2261";
    var Conint = "\u222F";
    var ContourIntegral = "\u222E";
    var Copf = "\u2102";
    var Coproduct = "\u2210";
    var CounterClockwiseContourIntegral = "\u2233";
    var Cross = "\u2A2F";
    var Cscr = "\u{1D49E}";
    var Cup = "\u22D3";
    var CupCap = "\u224D";
    var DD = "\u2145";
    var DDotrahd = "\u2911";
    var DJcy = "\u0402";
    var DScy = "\u0405";
    var DZcy = "\u040F";
    var Dagger = "\u2021";
    var Darr = "\u21A1";
    var Dashv = "\u2AE4";
    var Dcaron = "\u010E";
    var Dcy = "\u0414";
    var Del = "\u2207";
    var Delta = "\u0394";
    var Dfr = "\u{1D507}";
    var DiacriticalAcute = "\xB4";
    var DiacriticalDot = "\u02D9";
    var DiacriticalDoubleAcute = "\u02DD";
    var DiacriticalGrave = "`";
    var DiacriticalTilde = "\u02DC";
    var Diamond = "\u22C4";
    var DifferentialD = "\u2146";
    var Dopf = "\u{1D53B}";
    var Dot$1 = "\xA8";
    var DotDot = "\u20DC";
    var DotEqual = "\u2250";
    var DoubleContourIntegral = "\u222F";
    var DoubleDot = "\xA8";
    var DoubleDownArrow = "\u21D3";
    var DoubleLeftArrow = "\u21D0";
    var DoubleLeftRightArrow = "\u21D4";
    var DoubleLeftTee = "\u2AE4";
    var DoubleLongLeftArrow = "\u27F8";
    var DoubleLongLeftRightArrow = "\u27FA";
    var DoubleLongRightArrow = "\u27F9";
    var DoubleRightArrow = "\u21D2";
    var DoubleRightTee = "\u22A8";
    var DoubleUpArrow = "\u21D1";
    var DoubleUpDownArrow = "\u21D5";
    var DoubleVerticalBar = "\u2225";
    var DownArrow = "\u2193";
    var DownArrowBar = "\u2913";
    var DownArrowUpArrow = "\u21F5";
    var DownBreve = "\u0311";
    var DownLeftRightVector = "\u2950";
    var DownLeftTeeVector = "\u295E";
    var DownLeftVector = "\u21BD";
    var DownLeftVectorBar = "\u2956";
    var DownRightTeeVector = "\u295F";
    var DownRightVector = "\u21C1";
    var DownRightVectorBar = "\u2957";
    var DownTee = "\u22A4";
    var DownTeeArrow = "\u21A7";
    var Downarrow = "\u21D3";
    var Dscr = "\u{1D49F}";
    var Dstrok = "\u0110";
    var ENG = "\u014A";
    var ET = "\xD0";
    var ETH = "\xD0";
    var Eacut = "\xC9";
    var Eacute = "\xC9";
    var Ecaron = "\u011A";
    var Ecir = "\xCA";
    var Ecirc = "\xCA";
    var Ecy = "\u042D";
    var Edot = "\u0116";
    var Efr = "\u{1D508}";
    var Egrav = "\xC8";
    var Egrave = "\xC8";
    var Element$1 = "\u2208";
    var Emacr = "\u0112";
    var EmptySmallSquare = "\u25FB";
    var EmptyVerySmallSquare = "\u25AB";
    var Eogon = "\u0118";
    var Eopf = "\u{1D53C}";
    var Epsilon = "\u0395";
    var Equal = "\u2A75";
    var EqualTilde = "\u2242";
    var Equilibrium = "\u21CC";
    var Escr = "\u2130";
    var Esim = "\u2A73";
    var Eta = "\u0397";
    var Eum = "\xCB";
    var Euml = "\xCB";
    var Exists = "\u2203";
    var ExponentialE = "\u2147";
    var Fcy = "\u0424";
    var Ffr = "\u{1D509}";
    var FilledSmallSquare = "\u25FC";
    var FilledVerySmallSquare = "\u25AA";
    var Fopf = "\u{1D53D}";
    var ForAll = "\u2200";
    var Fouriertrf = "\u2131";
    var Fscr = "\u2131";
    var GJcy = "\u0403";
    var G = ">";
    var GT = ">";
    var Gamma = "\u0393";
    var Gammad = "\u03DC";
    var Gbreve = "\u011E";
    var Gcedil = "\u0122";
    var Gcirc = "\u011C";
    var Gcy = "\u0413";
    var Gdot = "\u0120";
    var Gfr = "\u{1D50A}";
    var Gg = "\u22D9";
    var Gopf = "\u{1D53E}";
    var GreaterEqual = "\u2265";
    var GreaterEqualLess = "\u22DB";
    var GreaterFullEqual = "\u2267";
    var GreaterGreater = "\u2AA2";
    var GreaterLess = "\u2277";
    var GreaterSlantEqual = "\u2A7E";
    var GreaterTilde = "\u2273";
    var Gscr = "\u{1D4A2}";
    var Gt = "\u226B";
    var HARDcy = "\u042A";
    var Hacek = "\u02C7";
    var Hat = "^";
    var Hcirc = "\u0124";
    var Hfr = "\u210C";
    var HilbertSpace = "\u210B";
    var Hopf = "\u210D";
    var HorizontalLine = "\u2500";
    var Hscr = "\u210B";
    var Hstrok = "\u0126";
    var HumpDownHump = "\u224E";
    var HumpEqual = "\u224F";
    var IEcy = "\u0415";
    var IJlig = "\u0132";
    var IOcy = "\u0401";
    var Iacut = "\xCD";
    var Iacute = "\xCD";
    var Icir = "\xCE";
    var Icirc = "\xCE";
    var Icy = "\u0418";
    var Idot = "\u0130";
    var Ifr = "\u2111";
    var Igrav = "\xCC";
    var Igrave = "\xCC";
    var Im = "\u2111";
    var Imacr = "\u012A";
    var ImaginaryI = "\u2148";
    var Implies = "\u21D2";
    var Int = "\u222C";
    var Integral = "\u222B";
    var Intersection = "\u22C2";
    var InvisibleComma = "\u2063";
    var InvisibleTimes = "\u2062";
    var Iogon = "\u012E";
    var Iopf = "\u{1D540}";
    var Iota = "\u0399";
    var Iscr = "\u2110";
    var Itilde = "\u0128";
    var Iukcy = "\u0406";
    var Ium = "\xCF";
    var Iuml = "\xCF";
    var Jcirc = "\u0134";
    var Jcy = "\u0419";
    var Jfr = "\u{1D50D}";
    var Jopf = "\u{1D541}";
    var Jscr = "\u{1D4A5}";
    var Jsercy = "\u0408";
    var Jukcy = "\u0404";
    var KHcy = "\u0425";
    var KJcy = "\u040C";
    var Kappa = "\u039A";
    var Kcedil = "\u0136";
    var Kcy = "\u041A";
    var Kfr = "\u{1D50E}";
    var Kopf = "\u{1D542}";
    var Kscr = "\u{1D4A6}";
    var LJcy = "\u0409";
    var L = "<";
    var LT = "<";
    var Lacute = "\u0139";
    var Lambda = "\u039B";
    var Lang = "\u27EA";
    var Laplacetrf = "\u2112";
    var Larr = "\u219E";
    var Lcaron = "\u013D";
    var Lcedil = "\u013B";
    var Lcy = "\u041B";
    var LeftAngleBracket = "\u27E8";
    var LeftArrow = "\u2190";
    var LeftArrowBar = "\u21E4";
    var LeftArrowRightArrow = "\u21C6";
    var LeftCeiling = "\u2308";
    var LeftDoubleBracket = "\u27E6";
    var LeftDownTeeVector = "\u2961";
    var LeftDownVector = "\u21C3";
    var LeftDownVectorBar = "\u2959";
    var LeftFloor = "\u230A";
    var LeftRightArrow = "\u2194";
    var LeftRightVector = "\u294E";
    var LeftTee = "\u22A3";
    var LeftTeeArrow = "\u21A4";
    var LeftTeeVector = "\u295A";
    var LeftTriangle = "\u22B2";
    var LeftTriangleBar = "\u29CF";
    var LeftTriangleEqual = "\u22B4";
    var LeftUpDownVector = "\u2951";
    var LeftUpTeeVector = "\u2960";
    var LeftUpVector = "\u21BF";
    var LeftUpVectorBar = "\u2958";
    var LeftVector = "\u21BC";
    var LeftVectorBar = "\u2952";
    var Leftarrow = "\u21D0";
    var Leftrightarrow = "\u21D4";
    var LessEqualGreater = "\u22DA";
    var LessFullEqual = "\u2266";
    var LessGreater = "\u2276";
    var LessLess = "\u2AA1";
    var LessSlantEqual = "\u2A7D";
    var LessTilde = "\u2272";
    var Lfr = "\u{1D50F}";
    var Ll = "\u22D8";
    var Lleftarrow = "\u21DA";
    var Lmidot = "\u013F";
    var LongLeftArrow = "\u27F5";
    var LongLeftRightArrow = "\u27F7";
    var LongRightArrow = "\u27F6";
    var Longleftarrow = "\u27F8";
    var Longleftrightarrow = "\u27FA";
    var Longrightarrow = "\u27F9";
    var Lopf = "\u{1D543}";
    var LowerLeftArrow = "\u2199";
    var LowerRightArrow = "\u2198";
    var Lscr = "\u2112";
    var Lsh = "\u21B0";
    var Lstrok = "\u0141";
    var Lt = "\u226A";
    var Mcy = "\u041C";
    var MediumSpace = "\u205F";
    var Mellintrf = "\u2133";
    var Mfr = "\u{1D510}";
    var MinusPlus = "\u2213";
    var Mopf = "\u{1D544}";
    var Mscr = "\u2133";
    var Mu = "\u039C";
    var NJcy = "\u040A";
    var Nacute = "\u0143";
    var Ncaron = "\u0147";
    var Ncedil = "\u0145";
    var Ncy = "\u041D";
    var NegativeMediumSpace = "\u200B";
    var NegativeThickSpace = "\u200B";
    var NegativeThinSpace = "\u200B";
    var NegativeVeryThinSpace = "\u200B";
    var NestedGreaterGreater = "\u226B";
    var NestedLessLess = "\u226A";
    var NewLine = "\n";
    var Nfr = "\u{1D511}";
    var NoBreak = "\u2060";
    var NonBreakingSpace = "\xA0";
    var Nopf = "\u2115";
    var Not = "\u2AEC";
    var NotCongruent = "\u2262";
    var NotCupCap = "\u226D";
    var NotDoubleVerticalBar = "\u2226";
    var NotElement = "\u2209";
    var NotEqual = "\u2260";
    var NotEqualTilde = "\u2242\u0338";
    var NotExists = "\u2204";
    var NotGreater = "\u226F";
    var NotGreaterEqual = "\u2271";
    var NotGreaterFullEqual = "\u2267\u0338";
    var NotGreaterGreater = "\u226B\u0338";
    var NotGreaterLess = "\u2279";
    var NotGreaterSlantEqual = "\u2A7E\u0338";
    var NotGreaterTilde = "\u2275";
    var NotHumpDownHump = "\u224E\u0338";
    var NotHumpEqual = "\u224F\u0338";
    var NotLeftTriangle = "\u22EA";
    var NotLeftTriangleBar = "\u29CF\u0338";
    var NotLeftTriangleEqual = "\u22EC";
    var NotLess = "\u226E";
    var NotLessEqual = "\u2270";
    var NotLessGreater = "\u2278";
    var NotLessLess = "\u226A\u0338";
    var NotLessSlantEqual = "\u2A7D\u0338";
    var NotLessTilde = "\u2274";
    var NotNestedGreaterGreater = "\u2AA2\u0338";
    var NotNestedLessLess = "\u2AA1\u0338";
    var NotPrecedes = "\u2280";
    var NotPrecedesEqual = "\u2AAF\u0338";
    var NotPrecedesSlantEqual = "\u22E0";
    var NotReverseElement = "\u220C";
    var NotRightTriangle = "\u22EB";
    var NotRightTriangleBar = "\u29D0\u0338";
    var NotRightTriangleEqual = "\u22ED";
    var NotSquareSubset = "\u228F\u0338";
    var NotSquareSubsetEqual = "\u22E2";
    var NotSquareSuperset = "\u2290\u0338";
    var NotSquareSupersetEqual = "\u22E3";
    var NotSubset = "\u2282\u20D2";
    var NotSubsetEqual = "\u2288";
    var NotSucceeds = "\u2281";
    var NotSucceedsEqual = "\u2AB0\u0338";
    var NotSucceedsSlantEqual = "\u22E1";
    var NotSucceedsTilde = "\u227F\u0338";
    var NotSuperset = "\u2283\u20D2";
    var NotSupersetEqual = "\u2289";
    var NotTilde = "\u2241";
    var NotTildeEqual = "\u2244";
    var NotTildeFullEqual = "\u2247";
    var NotTildeTilde = "\u2249";
    var NotVerticalBar = "\u2224";
    var Nscr = "\u{1D4A9}";
    var Ntild = "\xD1";
    var Ntilde = "\xD1";
    var Nu = "\u039D";
    var OElig = "\u0152";
    var Oacut = "\xD3";
    var Oacute = "\xD3";
    var Ocir = "\xD4";
    var Ocirc = "\xD4";
    var Ocy = "\u041E";
    var Odblac = "\u0150";
    var Ofr = "\u{1D512}";
    var Ograv = "\xD2";
    var Ograve = "\xD2";
    var Omacr = "\u014C";
    var Omega = "\u03A9";
    var Omicron = "\u039F";
    var Oopf = "\u{1D546}";
    var OpenCurlyDoubleQuote = "\u201C";
    var OpenCurlyQuote = "\u2018";
    var Or = "\u2A54";
    var Oscr = "\u{1D4AA}";
    var Oslas = "\xD8";
    var Oslash = "\xD8";
    var Otild = "\xD5";
    var Otilde = "\xD5";
    var Otimes = "\u2A37";
    var Oum = "\xD6";
    var Ouml = "\xD6";
    var OverBar = "\u203E";
    var OverBrace = "\u23DE";
    var OverBracket = "\u23B4";
    var OverParenthesis = "\u23DC";
    var PartialD = "\u2202";
    var Pcy = "\u041F";
    var Pfr = "\u{1D513}";
    var Phi = "\u03A6";
    var Pi = "\u03A0";
    var PlusMinus = "\xB1";
    var Poincareplane = "\u210C";
    var Popf = "\u2119";
    var Pr = "\u2ABB";
    var Precedes = "\u227A";
    var PrecedesEqual = "\u2AAF";
    var PrecedesSlantEqual = "\u227C";
    var PrecedesTilde = "\u227E";
    var Prime = "\u2033";
    var Product = "\u220F";
    var Proportion = "\u2237";
    var Proportional = "\u221D";
    var Pscr = "\u{1D4AB}";
    var Psi = "\u03A8";
    var QUO = '"';
    var QUOT = '"';
    var Qfr = "\u{1D514}";
    var Qopf = "\u211A";
    var Qscr = "\u{1D4AC}";
    var RBarr = "\u2910";
    var RE = "\xAE";
    var REG = "\xAE";
    var Racute = "\u0154";
    var Rang = "\u27EB";
    var Rarr = "\u21A0";
    var Rarrtl = "\u2916";
    var Rcaron = "\u0158";
    var Rcedil = "\u0156";
    var Rcy = "\u0420";
    var Re = "\u211C";
    var ReverseElement = "\u220B";
    var ReverseEquilibrium = "\u21CB";
    var ReverseUpEquilibrium = "\u296F";
    var Rfr = "\u211C";
    var Rho = "\u03A1";
    var RightAngleBracket = "\u27E9";
    var RightArrow = "\u2192";
    var RightArrowBar = "\u21E5";
    var RightArrowLeftArrow = "\u21C4";
    var RightCeiling = "\u2309";
    var RightDoubleBracket = "\u27E7";
    var RightDownTeeVector = "\u295D";
    var RightDownVector = "\u21C2";
    var RightDownVectorBar = "\u2955";
    var RightFloor = "\u230B";
    var RightTee = "\u22A2";
    var RightTeeArrow = "\u21A6";
    var RightTeeVector = "\u295B";
    var RightTriangle = "\u22B3";
    var RightTriangleBar = "\u29D0";
    var RightTriangleEqual = "\u22B5";
    var RightUpDownVector = "\u294F";
    var RightUpTeeVector = "\u295C";
    var RightUpVector = "\u21BE";
    var RightUpVectorBar = "\u2954";
    var RightVector = "\u21C0";
    var RightVectorBar = "\u2953";
    var Rightarrow = "\u21D2";
    var Ropf = "\u211D";
    var RoundImplies = "\u2970";
    var Rrightarrow = "\u21DB";
    var Rscr = "\u211B";
    var Rsh = "\u21B1";
    var RuleDelayed = "\u29F4";
    var SHCHcy = "\u0429";
    var SHcy = "\u0428";
    var SOFTcy = "\u042C";
    var Sacute = "\u015A";
    var Sc = "\u2ABC";
    var Scaron = "\u0160";
    var Scedil = "\u015E";
    var Scirc = "\u015C";
    var Scy = "\u0421";
    var Sfr = "\u{1D516}";
    var ShortDownArrow = "\u2193";
    var ShortLeftArrow = "\u2190";
    var ShortRightArrow = "\u2192";
    var ShortUpArrow = "\u2191";
    var Sigma = "\u03A3";
    var SmallCircle = "\u2218";
    var Sopf = "\u{1D54A}";
    var Sqrt = "\u221A";
    var Square = "\u25A1";
    var SquareIntersection = "\u2293";
    var SquareSubset = "\u228F";
    var SquareSubsetEqual = "\u2291";
    var SquareSuperset = "\u2290";
    var SquareSupersetEqual = "\u2292";
    var SquareUnion = "\u2294";
    var Sscr = "\u{1D4AE}";
    var Star = "\u22C6";
    var Sub = "\u22D0";
    var Subset = "\u22D0";
    var SubsetEqual = "\u2286";
    var Succeeds = "\u227B";
    var SucceedsEqual = "\u2AB0";
    var SucceedsSlantEqual = "\u227D";
    var SucceedsTilde = "\u227F";
    var SuchThat = "\u220B";
    var Sum = "\u2211";
    var Sup = "\u22D1";
    var Superset = "\u2283";
    var SupersetEqual = "\u2287";
    var Supset = "\u22D1";
    var THOR = "\xDE";
    var THORN = "\xDE";
    var TRADE = "\u2122";
    var TSHcy = "\u040B";
    var TScy = "\u0426";
    var Tab$1 = "	";
    var Tau = "\u03A4";
    var Tcaron = "\u0164";
    var Tcedil = "\u0162";
    var Tcy = "\u0422";
    var Tfr = "\u{1D517}";
    var Therefore = "\u2234";
    var Theta = "\u0398";
    var ThickSpace = "\u205F\u200A";
    var ThinSpace = "\u2009";
    var Tilde = "\u223C";
    var TildeEqual = "\u2243";
    var TildeFullEqual = "\u2245";
    var TildeTilde = "\u2248";
    var Topf = "\u{1D54B}";
    var TripleDot = "\u20DB";
    var Tscr = "\u{1D4AF}";
    var Tstrok = "\u0166";
    var Uacut = "\xDA";
    var Uacute = "\xDA";
    var Uarr = "\u219F";
    var Uarrocir = "\u2949";
    var Ubrcy = "\u040E";
    var Ubreve = "\u016C";
    var Ucir = "\xDB";
    var Ucirc = "\xDB";
    var Ucy = "\u0423";
    var Udblac = "\u0170";
    var Ufr = "\u{1D518}";
    var Ugrav = "\xD9";
    var Ugrave = "\xD9";
    var Umacr = "\u016A";
    var UnderBar = "_";
    var UnderBrace = "\u23DF";
    var UnderBracket = "\u23B5";
    var UnderParenthesis = "\u23DD";
    var Union = "\u22C3";
    var UnionPlus = "\u228E";
    var Uogon = "\u0172";
    var Uopf = "\u{1D54C}";
    var UpArrow = "\u2191";
    var UpArrowBar = "\u2912";
    var UpArrowDownArrow = "\u21C5";
    var UpDownArrow = "\u2195";
    var UpEquilibrium = "\u296E";
    var UpTee = "\u22A5";
    var UpTeeArrow = "\u21A5";
    var Uparrow = "\u21D1";
    var Updownarrow = "\u21D5";
    var UpperLeftArrow = "\u2196";
    var UpperRightArrow = "\u2197";
    var Upsi = "\u03D2";
    var Upsilon = "\u03A5";
    var Uring = "\u016E";
    var Uscr = "\u{1D4B0}";
    var Utilde = "\u0168";
    var Uum = "\xDC";
    var Uuml = "\xDC";
    var VDash = "\u22AB";
    var Vbar = "\u2AEB";
    var Vcy = "\u0412";
    var Vdash = "\u22A9";
    var Vdashl = "\u2AE6";
    var Vee = "\u22C1";
    var Verbar = "\u2016";
    var Vert = "\u2016";
    var VerticalBar = "\u2223";
    var VerticalLine = "|";
    var VerticalSeparator = "\u2758";
    var VerticalTilde = "\u2240";
    var VeryThinSpace = "\u200A";
    var Vfr = "\u{1D519}";
    var Vopf = "\u{1D54D}";
    var Vscr = "\u{1D4B1}";
    var Vvdash = "\u22AA";
    var Wcirc = "\u0174";
    var Wedge = "\u22C0";
    var Wfr = "\u{1D51A}";
    var Wopf = "\u{1D54E}";
    var Wscr = "\u{1D4B2}";
    var Xfr = "\u{1D51B}";
    var Xi = "\u039E";
    var Xopf = "\u{1D54F}";
    var Xscr = "\u{1D4B3}";
    var YAcy = "\u042F";
    var YIcy = "\u0407";
    var YUcy = "\u042E";
    var Yacut = "\xDD";
    var Yacute = "\xDD";
    var Ycirc = "\u0176";
    var Ycy = "\u042B";
    var Yfr = "\u{1D51C}";
    var Yopf = "\u{1D550}";
    var Yscr = "\u{1D4B4}";
    var Yuml = "\u0178";
    var ZHcy = "\u0416";
    var Zacute = "\u0179";
    var Zcaron = "\u017D";
    var Zcy = "\u0417";
    var Zdot = "\u017B";
    var ZeroWidthSpace = "\u200B";
    var Zeta = "\u0396";
    var Zfr = "\u2128";
    var Zopf = "\u2124";
    var Zscr = "\u{1D4B5}";
    var aacut = "\xE1";
    var aacute = "\xE1";
    var abreve = "\u0103";
    var ac = "\u223E";
    var acE = "\u223E\u0333";
    var acd = "\u223F";
    var acir = "\xE2";
    var acirc = "\xE2";
    var acut = "\xB4";
    var acute = "\xB4";
    var acy = "\u0430";
    var aeli = "\xE6";
    var aelig = "\xE6";
    var af = "\u2061";
    var afr = "\u{1D51E}";
    var agrav = "\xE0";
    var agrave = "\xE0";
    var alefsym = "\u2135";
    var aleph = "\u2135";
    var alpha = "\u03B1";
    var amacr = "\u0101";
    var amalg = "\u2A3F";
    var am = "&";
    var amp = "&";
    var and = "\u2227";
    var andand = "\u2A55";
    var andd = "\u2A5C";
    var andslope = "\u2A58";
    var andv = "\u2A5A";
    var ang = "\u2220";
    var ange = "\u29A4";
    var angle = "\u2220";
    var angmsd = "\u2221";
    var angmsdaa = "\u29A8";
    var angmsdab = "\u29A9";
    var angmsdac = "\u29AA";
    var angmsdad = "\u29AB";
    var angmsdae = "\u29AC";
    var angmsdaf = "\u29AD";
    var angmsdag = "\u29AE";
    var angmsdah = "\u29AF";
    var angrt = "\u221F";
    var angrtvb = "\u22BE";
    var angrtvbd = "\u299D";
    var angsph = "\u2222";
    var angst = "\xC5";
    var angzarr = "\u237C";
    var aogon = "\u0105";
    var aopf = "\u{1D552}";
    var ap = "\u2248";
    var apE = "\u2A70";
    var apacir = "\u2A6F";
    var ape = "\u224A";
    var apid = "\u224B";
    var apos = "'";
    var approx = "\u2248";
    var approxeq = "\u224A";
    var arin = "\xE5";
    var aring = "\xE5";
    var ascr = "\u{1D4B6}";
    var ast = "*";
    var asymp = "\u2248";
    var asympeq = "\u224D";
    var atild = "\xE3";
    var atilde = "\xE3";
    var aum = "\xE4";
    var auml = "\xE4";
    var awconint = "\u2233";
    var awint = "\u2A11";
    var bNot = "\u2AED";
    var backcong = "\u224C";
    var backepsilon = "\u03F6";
    var backprime = "\u2035";
    var backsim = "\u223D";
    var backsimeq = "\u22CD";
    var barvee = "\u22BD";
    var barwed = "\u2305";
    var barwedge = "\u2305";
    var bbrk = "\u23B5";
    var bbrktbrk = "\u23B6";
    var bcong = "\u224C";
    var bcy = "\u0431";
    var bdquo = "\u201E";
    var becaus = "\u2235";
    var because = "\u2235";
    var bemptyv = "\u29B0";
    var bepsi = "\u03F6";
    var bernou = "\u212C";
    var beta = "\u03B2";
    var beth = "\u2136";
    var between = "\u226C";
    var bfr = "\u{1D51F}";
    var bigcap = "\u22C2";
    var bigcirc = "\u25EF";
    var bigcup = "\u22C3";
    var bigodot = "\u2A00";
    var bigoplus = "\u2A01";
    var bigotimes = "\u2A02";
    var bigsqcup = "\u2A06";
    var bigstar = "\u2605";
    var bigtriangledown = "\u25BD";
    var bigtriangleup = "\u25B3";
    var biguplus = "\u2A04";
    var bigvee = "\u22C1";
    var bigwedge = "\u22C0";
    var bkarow = "\u290D";
    var blacklozenge = "\u29EB";
    var blacksquare = "\u25AA";
    var blacktriangle = "\u25B4";
    var blacktriangledown = "\u25BE";
    var blacktriangleleft = "\u25C2";
    var blacktriangleright = "\u25B8";
    var blank = "\u2423";
    var blk12 = "\u2592";
    var blk14 = "\u2591";
    var blk34 = "\u2593";
    var block = "\u2588";
    var bne = "=\u20E5";
    var bnequiv = "\u2261\u20E5";
    var bnot = "\u2310";
    var bopf = "\u{1D553}";
    var bot = "\u22A5";
    var bottom = "\u22A5";
    var bowtie = "\u22C8";
    var boxDL = "\u2557";
    var boxDR = "\u2554";
    var boxDl = "\u2556";
    var boxDr = "\u2553";
    var boxH = "\u2550";
    var boxHD = "\u2566";
    var boxHU = "\u2569";
    var boxHd = "\u2564";
    var boxHu = "\u2567";
    var boxUL = "\u255D";
    var boxUR = "\u255A";
    var boxUl = "\u255C";
    var boxUr = "\u2559";
    var boxV = "\u2551";
    var boxVH = "\u256C";
    var boxVL = "\u2563";
    var boxVR = "\u2560";
    var boxVh = "\u256B";
    var boxVl = "\u2562";
    var boxVr = "\u255F";
    var boxbox = "\u29C9";
    var boxdL = "\u2555";
    var boxdR = "\u2552";
    var boxdl = "\u2510";
    var boxdr = "\u250C";
    var boxh = "\u2500";
    var boxhD = "\u2565";
    var boxhU = "\u2568";
    var boxhd = "\u252C";
    var boxhu = "\u2534";
    var boxminus = "\u229F";
    var boxplus = "\u229E";
    var boxtimes = "\u22A0";
    var boxuL = "\u255B";
    var boxuR = "\u2558";
    var boxul = "\u2518";
    var boxur = "\u2514";
    var boxv = "\u2502";
    var boxvH = "\u256A";
    var boxvL = "\u2561";
    var boxvR = "\u255E";
    var boxvh = "\u253C";
    var boxvl = "\u2524";
    var boxvr = "\u251C";
    var bprime = "\u2035";
    var breve = "\u02D8";
    var brvba = "\xA6";
    var brvbar = "\xA6";
    var bscr = "\u{1D4B7}";
    var bsemi = "\u204F";
    var bsim = "\u223D";
    var bsime = "\u22CD";
    var bsol = "\\";
    var bsolb = "\u29C5";
    var bsolhsub = "\u27C8";
    var bull = "\u2022";
    var bullet = "\u2022";
    var bump = "\u224E";
    var bumpE = "\u2AAE";
    var bumpe = "\u224F";
    var bumpeq = "\u224F";
    var cacute = "\u0107";
    var cap = "\u2229";
    var capand = "\u2A44";
    var capbrcup = "\u2A49";
    var capcap = "\u2A4B";
    var capcup = "\u2A47";
    var capdot = "\u2A40";
    var caps = "\u2229\uFE00";
    var caret = "\u2041";
    var caron = "\u02C7";
    var ccaps = "\u2A4D";
    var ccaron = "\u010D";
    var ccedi = "\xE7";
    var ccedil = "\xE7";
    var ccirc = "\u0109";
    var ccups = "\u2A4C";
    var ccupssm = "\u2A50";
    var cdot = "\u010B";
    var cedi = "\xB8";
    var cedil = "\xB8";
    var cemptyv = "\u29B2";
    var cen = "\xA2";
    var cent = "\xA2";
    var centerdot = "\xB7";
    var cfr = "\u{1D520}";
    var chcy = "\u0447";
    var check = "\u2713";
    var checkmark = "\u2713";
    var chi = "\u03C7";
    var cir = "\u25CB";
    var cirE = "\u29C3";
    var circ = "\u02C6";
    var circeq = "\u2257";
    var circlearrowleft = "\u21BA";
    var circlearrowright = "\u21BB";
    var circledR = "\xAE";
    var circledS = "\u24C8";
    var circledast = "\u229B";
    var circledcirc = "\u229A";
    var circleddash = "\u229D";
    var cire = "\u2257";
    var cirfnint = "\u2A10";
    var cirmid = "\u2AEF";
    var cirscir = "\u29C2";
    var clubs = "\u2663";
    var clubsuit = "\u2663";
    var colon = ":";
    var colone = "\u2254";
    var coloneq = "\u2254";
    var comma = ",";
    var commat = "@";
    var comp = "\u2201";
    var compfn = "\u2218";
    var complement = "\u2201";
    var complexes = "\u2102";
    var cong = "\u2245";
    var congdot = "\u2A6D";
    var conint = "\u222E";
    var copf = "\u{1D554}";
    var coprod = "\u2210";
    var cop = "\xA9";
    var copy = "\xA9";
    var copysr = "\u2117";
    var crarr = "\u21B5";
    var cross = "\u2717";
    var cscr = "\u{1D4B8}";
    var csub = "\u2ACF";
    var csube = "\u2AD1";
    var csup = "\u2AD0";
    var csupe = "\u2AD2";
    var ctdot = "\u22EF";
    var cudarrl = "\u2938";
    var cudarrr = "\u2935";
    var cuepr = "\u22DE";
    var cuesc = "\u22DF";
    var cularr = "\u21B6";
    var cularrp = "\u293D";
    var cup = "\u222A";
    var cupbrcap = "\u2A48";
    var cupcap = "\u2A46";
    var cupcup = "\u2A4A";
    var cupdot = "\u228D";
    var cupor = "\u2A45";
    var cups = "\u222A\uFE00";
    var curarr = "\u21B7";
    var curarrm = "\u293C";
    var curlyeqprec = "\u22DE";
    var curlyeqsucc = "\u22DF";
    var curlyvee = "\u22CE";
    var curlywedge = "\u22CF";
    var curre = "\xA4";
    var curren = "\xA4";
    var curvearrowleft = "\u21B6";
    var curvearrowright = "\u21B7";
    var cuvee = "\u22CE";
    var cuwed = "\u22CF";
    var cwconint = "\u2232";
    var cwint = "\u2231";
    var cylcty = "\u232D";
    var dArr = "\u21D3";
    var dHar = "\u2965";
    var dagger = "\u2020";
    var daleth = "\u2138";
    var darr = "\u2193";
    var dash = "\u2010";
    var dashv = "\u22A3";
    var dbkarow = "\u290F";
    var dblac = "\u02DD";
    var dcaron = "\u010F";
    var dcy = "\u0434";
    var dd = "\u2146";
    var ddagger = "\u2021";
    var ddarr = "\u21CA";
    var ddotseq = "\u2A77";
    var de = "\xB0";
    var deg = "\xB0";
    var delta = "\u03B4";
    var demptyv = "\u29B1";
    var dfisht = "\u297F";
    var dfr = "\u{1D521}";
    var dharl = "\u21C3";
    var dharr = "\u21C2";
    var diam = "\u22C4";
    var diamond = "\u22C4";
    var diamondsuit = "\u2666";
    var diams = "\u2666";
    var die = "\xA8";
    var digamma = "\u03DD";
    var disin = "\u22F2";
    var div = "\xF7";
    var divid = "\xF7";
    var divide = "\xF7";
    var divideontimes = "\u22C7";
    var divonx = "\u22C7";
    var djcy = "\u0452";
    var dlcorn = "\u231E";
    var dlcrop = "\u230D";
    var dollar = "$";
    var dopf = "\u{1D555}";
    var dot = "\u02D9";
    var doteq = "\u2250";
    var doteqdot = "\u2251";
    var dotminus = "\u2238";
    var dotplus = "\u2214";
    var dotsquare = "\u22A1";
    var doublebarwedge = "\u2306";
    var downarrow = "\u2193";
    var downdownarrows = "\u21CA";
    var downharpoonleft = "\u21C3";
    var downharpoonright = "\u21C2";
    var drbkarow = "\u2910";
    var drcorn = "\u231F";
    var drcrop = "\u230C";
    var dscr = "\u{1D4B9}";
    var dscy = "\u0455";
    var dsol = "\u29F6";
    var dstrok = "\u0111";
    var dtdot = "\u22F1";
    var dtri = "\u25BF";
    var dtrif = "\u25BE";
    var duarr = "\u21F5";
    var duhar = "\u296F";
    var dwangle = "\u29A6";
    var dzcy = "\u045F";
    var dzigrarr = "\u27FF";
    var eDDot = "\u2A77";
    var eDot = "\u2251";
    var eacut = "\xE9";
    var eacute = "\xE9";
    var easter = "\u2A6E";
    var ecaron = "\u011B";
    var ecir = "\xEA";
    var ecirc = "\xEA";
    var ecolon = "\u2255";
    var ecy = "\u044D";
    var edot = "\u0117";
    var ee = "\u2147";
    var efDot = "\u2252";
    var efr = "\u{1D522}";
    var eg = "\u2A9A";
    var egrav = "\xE8";
    var egrave = "\xE8";
    var egs = "\u2A96";
    var egsdot = "\u2A98";
    var el = "\u2A99";
    var elinters = "\u23E7";
    var ell = "\u2113";
    var els = "\u2A95";
    var elsdot = "\u2A97";
    var emacr = "\u0113";
    var empty = "\u2205";
    var emptyset = "\u2205";
    var emptyv = "\u2205";
    var emsp13 = "\u2004";
    var emsp14 = "\u2005";
    var emsp = "\u2003";
    var eng = "\u014B";
    var ensp = "\u2002";
    var eogon = "\u0119";
    var eopf = "\u{1D556}";
    var epar = "\u22D5";
    var eparsl = "\u29E3";
    var eplus = "\u2A71";
    var epsi = "\u03B5";
    var epsilon = "\u03B5";
    var epsiv = "\u03F5";
    var eqcirc = "\u2256";
    var eqcolon = "\u2255";
    var eqsim = "\u2242";
    var eqslantgtr = "\u2A96";
    var eqslantless = "\u2A95";
    var equals = "=";
    var equest = "\u225F";
    var equiv = "\u2261";
    var equivDD = "\u2A78";
    var eqvparsl = "\u29E5";
    var erDot = "\u2253";
    var erarr = "\u2971";
    var escr = "\u212F";
    var esdot = "\u2250";
    var esim = "\u2242";
    var eta = "\u03B7";
    var et = "\xF0";
    var eth = "\xF0";
    var eum = "\xEB";
    var euml = "\xEB";
    var euro = "\u20AC";
    var excl = "!";
    var exist = "\u2203";
    var expectation = "\u2130";
    var exponentiale = "\u2147";
    var fallingdotseq = "\u2252";
    var fcy = "\u0444";
    var female = "\u2640";
    var ffilig = "\uFB03";
    var fflig = "\uFB00";
    var ffllig = "\uFB04";
    var ffr = "\u{1D523}";
    var filig = "\uFB01";
    var fjlig = "fj";
    var flat = "\u266D";
    var fllig = "\uFB02";
    var fltns = "\u25B1";
    var fnof = "\u0192";
    var fopf = "\u{1D557}";
    var forall = "\u2200";
    var fork = "\u22D4";
    var forkv = "\u2AD9";
    var fpartint = "\u2A0D";
    var frac1 = "\xBC";
    var frac12 = "\xBD";
    var frac13 = "\u2153";
    var frac14 = "\xBC";
    var frac15 = "\u2155";
    var frac16 = "\u2159";
    var frac18 = "\u215B";
    var frac23 = "\u2154";
    var frac25 = "\u2156";
    var frac3 = "\xBE";
    var frac34 = "\xBE";
    var frac35 = "\u2157";
    var frac38 = "\u215C";
    var frac45 = "\u2158";
    var frac56 = "\u215A";
    var frac58 = "\u215D";
    var frac78 = "\u215E";
    var frasl = "\u2044";
    var frown = "\u2322";
    var fscr = "\u{1D4BB}";
    var gE = "\u2267";
    var gEl = "\u2A8C";
    var gacute = "\u01F5";
    var gamma = "\u03B3";
    var gammad = "\u03DD";
    var gap = "\u2A86";
    var gbreve = "\u011F";
    var gcirc = "\u011D";
    var gcy = "\u0433";
    var gdot = "\u0121";
    var ge = "\u2265";
    var gel = "\u22DB";
    var geq = "\u2265";
    var geqq = "\u2267";
    var geqslant = "\u2A7E";
    var ges = "\u2A7E";
    var gescc = "\u2AA9";
    var gesdot = "\u2A80";
    var gesdoto = "\u2A82";
    var gesdotol = "\u2A84";
    var gesl = "\u22DB\uFE00";
    var gesles = "\u2A94";
    var gfr = "\u{1D524}";
    var gg = "\u226B";
    var ggg = "\u22D9";
    var gimel = "\u2137";
    var gjcy = "\u0453";
    var gl = "\u2277";
    var glE = "\u2A92";
    var gla = "\u2AA5";
    var glj = "\u2AA4";
    var gnE = "\u2269";
    var gnap = "\u2A8A";
    var gnapprox = "\u2A8A";
    var gne = "\u2A88";
    var gneq = "\u2A88";
    var gneqq = "\u2269";
    var gnsim = "\u22E7";
    var gopf = "\u{1D558}";
    var grave = "`";
    var gscr = "\u210A";
    var gsim = "\u2273";
    var gsime = "\u2A8E";
    var gsiml = "\u2A90";
    var g = ">";
    var gt = ">";
    var gtcc = "\u2AA7";
    var gtcir = "\u2A7A";
    var gtdot = "\u22D7";
    var gtlPar = "\u2995";
    var gtquest = "\u2A7C";
    var gtrapprox = "\u2A86";
    var gtrarr = "\u2978";
    var gtrdot = "\u22D7";
    var gtreqless = "\u22DB";
    var gtreqqless = "\u2A8C";
    var gtrless = "\u2277";
    var gtrsim = "\u2273";
    var gvertneqq = "\u2269\uFE00";
    var gvnE = "\u2269\uFE00";
    var hArr = "\u21D4";
    var hairsp = "\u200A";
    var half = "\xBD";
    var hamilt = "\u210B";
    var hardcy = "\u044A";
    var harr = "\u2194";
    var harrcir = "\u2948";
    var harrw = "\u21AD";
    var hbar = "\u210F";
    var hcirc = "\u0125";
    var hearts = "\u2665";
    var heartsuit = "\u2665";
    var hellip = "\u2026";
    var hercon = "\u22B9";
    var hfr = "\u{1D525}";
    var hksearow = "\u2925";
    var hkswarow = "\u2926";
    var hoarr = "\u21FF";
    var homtht = "\u223B";
    var hookleftarrow = "\u21A9";
    var hookrightarrow = "\u21AA";
    var hopf = "\u{1D559}";
    var horbar = "\u2015";
    var hscr = "\u{1D4BD}";
    var hslash = "\u210F";
    var hstrok = "\u0127";
    var hybull = "\u2043";
    var hyphen = "\u2010";
    var iacut = "\xED";
    var iacute = "\xED";
    var ic = "\u2063";
    var icir = "\xEE";
    var icirc = "\xEE";
    var icy = "\u0438";
    var iecy = "\u0435";
    var iexc = "\xA1";
    var iexcl = "\xA1";
    var iff = "\u21D4";
    var ifr = "\u{1D526}";
    var igrav = "\xEC";
    var igrave = "\xEC";
    var ii = "\u2148";
    var iiiint = "\u2A0C";
    var iiint = "\u222D";
    var iinfin = "\u29DC";
    var iiota = "\u2129";
    var ijlig = "\u0133";
    var imacr = "\u012B";
    var image = "\u2111";
    var imagline = "\u2110";
    var imagpart = "\u2111";
    var imath = "\u0131";
    var imof = "\u22B7";
    var imped = "\u01B5";
    var incare = "\u2105";
    var infin = "\u221E";
    var infintie = "\u29DD";
    var inodot = "\u0131";
    var int = "\u222B";
    var intcal = "\u22BA";
    var integers = "\u2124";
    var intercal = "\u22BA";
    var intlarhk = "\u2A17";
    var intprod = "\u2A3C";
    var iocy = "\u0451";
    var iogon = "\u012F";
    var iopf = "\u{1D55A}";
    var iota = "\u03B9";
    var iprod = "\u2A3C";
    var iques = "\xBF";
    var iquest = "\xBF";
    var iscr = "\u{1D4BE}";
    var isin = "\u2208";
    var isinE = "\u22F9";
    var isindot = "\u22F5";
    var isins = "\u22F4";
    var isinsv = "\u22F3";
    var isinv = "\u2208";
    var it = "\u2062";
    var itilde = "\u0129";
    var iukcy = "\u0456";
    var ium = "\xEF";
    var iuml = "\xEF";
    var jcirc = "\u0135";
    var jcy = "\u0439";
    var jfr = "\u{1D527}";
    var jmath = "\u0237";
    var jopf = "\u{1D55B}";
    var jscr = "\u{1D4BF}";
    var jsercy = "\u0458";
    var jukcy = "\u0454";
    var kappa = "\u03BA";
    var kappav = "\u03F0";
    var kcedil = "\u0137";
    var kcy = "\u043A";
    var kfr = "\u{1D528}";
    var kgreen = "\u0138";
    var khcy = "\u0445";
    var kjcy = "\u045C";
    var kopf = "\u{1D55C}";
    var kscr = "\u{1D4C0}";
    var lAarr = "\u21DA";
    var lArr = "\u21D0";
    var lAtail = "\u291B";
    var lBarr = "\u290E";
    var lE = "\u2266";
    var lEg = "\u2A8B";
    var lHar = "\u2962";
    var lacute = "\u013A";
    var laemptyv = "\u29B4";
    var lagran = "\u2112";
    var lambda = "\u03BB";
    var lang = "\u27E8";
    var langd = "\u2991";
    var langle = "\u27E8";
    var lap = "\u2A85";
    var laqu = "\xAB";
    var laquo = "\xAB";
    var larr = "\u2190";
    var larrb = "\u21E4";
    var larrbfs = "\u291F";
    var larrfs = "\u291D";
    var larrhk = "\u21A9";
    var larrlp = "\u21AB";
    var larrpl = "\u2939";
    var larrsim = "\u2973";
    var larrtl = "\u21A2";
    var lat = "\u2AAB";
    var latail = "\u2919";
    var late = "\u2AAD";
    var lates = "\u2AAD\uFE00";
    var lbarr = "\u290C";
    var lbbrk = "\u2772";
    var lbrace = "{";
    var lbrack = "[";
    var lbrke = "\u298B";
    var lbrksld = "\u298F";
    var lbrkslu = "\u298D";
    var lcaron = "\u013E";
    var lcedil = "\u013C";
    var lceil = "\u2308";
    var lcub = "{";
    var lcy = "\u043B";
    var ldca = "\u2936";
    var ldquo = "\u201C";
    var ldquor = "\u201E";
    var ldrdhar = "\u2967";
    var ldrushar = "\u294B";
    var ldsh = "\u21B2";
    var le = "\u2264";
    var leftarrow = "\u2190";
    var leftarrowtail = "\u21A2";
    var leftharpoondown = "\u21BD";
    var leftharpoonup = "\u21BC";
    var leftleftarrows = "\u21C7";
    var leftrightarrow = "\u2194";
    var leftrightarrows = "\u21C6";
    var leftrightharpoons = "\u21CB";
    var leftrightsquigarrow = "\u21AD";
    var leftthreetimes = "\u22CB";
    var leg = "\u22DA";
    var leq = "\u2264";
    var leqq = "\u2266";
    var leqslant = "\u2A7D";
    var les = "\u2A7D";
    var lescc = "\u2AA8";
    var lesdot = "\u2A7F";
    var lesdoto = "\u2A81";
    var lesdotor = "\u2A83";
    var lesg = "\u22DA\uFE00";
    var lesges = "\u2A93";
    var lessapprox = "\u2A85";
    var lessdot = "\u22D6";
    var lesseqgtr = "\u22DA";
    var lesseqqgtr = "\u2A8B";
    var lessgtr = "\u2276";
    var lesssim = "\u2272";
    var lfisht = "\u297C";
    var lfloor = "\u230A";
    var lfr = "\u{1D529}";
    var lg = "\u2276";
    var lgE = "\u2A91";
    var lhard = "\u21BD";
    var lharu = "\u21BC";
    var lharul = "\u296A";
    var lhblk = "\u2584";
    var ljcy = "\u0459";
    var ll = "\u226A";
    var llarr = "\u21C7";
    var llcorner = "\u231E";
    var llhard = "\u296B";
    var lltri = "\u25FA";
    var lmidot = "\u0140";
    var lmoust = "\u23B0";
    var lmoustache = "\u23B0";
    var lnE = "\u2268";
    var lnap = "\u2A89";
    var lnapprox = "\u2A89";
    var lne = "\u2A87";
    var lneq = "\u2A87";
    var lneqq = "\u2268";
    var lnsim = "\u22E6";
    var loang = "\u27EC";
    var loarr = "\u21FD";
    var lobrk = "\u27E6";
    var longleftarrow = "\u27F5";
    var longleftrightarrow = "\u27F7";
    var longmapsto = "\u27FC";
    var longrightarrow = "\u27F6";
    var looparrowleft = "\u21AB";
    var looparrowright = "\u21AC";
    var lopar = "\u2985";
    var lopf = "\u{1D55D}";
    var loplus = "\u2A2D";
    var lotimes = "\u2A34";
    var lowast = "\u2217";
    var lowbar = "_";
    var loz = "\u25CA";
    var lozenge = "\u25CA";
    var lozf = "\u29EB";
    var lpar = "(";
    var lparlt = "\u2993";
    var lrarr = "\u21C6";
    var lrcorner = "\u231F";
    var lrhar = "\u21CB";
    var lrhard = "\u296D";
    var lrm = "\u200E";
    var lrtri = "\u22BF";
    var lsaquo = "\u2039";
    var lscr = "\u{1D4C1}";
    var lsh = "\u21B0";
    var lsim = "\u2272";
    var lsime = "\u2A8D";
    var lsimg = "\u2A8F";
    var lsqb = "[";
    var lsquo = "\u2018";
    var lsquor = "\u201A";
    var lstrok = "\u0142";
    var l = "<";
    var lt = "<";
    var ltcc = "\u2AA6";
    var ltcir = "\u2A79";
    var ltdot = "\u22D6";
    var lthree = "\u22CB";
    var ltimes = "\u22C9";
    var ltlarr = "\u2976";
    var ltquest = "\u2A7B";
    var ltrPar = "\u2996";
    var ltri = "\u25C3";
    var ltrie = "\u22B4";
    var ltrif = "\u25C2";
    var lurdshar = "\u294A";
    var luruhar = "\u2966";
    var lvertneqq = "\u2268\uFE00";
    var lvnE = "\u2268\uFE00";
    var mDDot = "\u223A";
    var mac = "\xAF";
    var macr = "\xAF";
    var male = "\u2642";
    var malt = "\u2720";
    var maltese = "\u2720";
    var map$1 = "\u21A6";
    var mapsto = "\u21A6";
    var mapstodown = "\u21A7";
    var mapstoleft = "\u21A4";
    var mapstoup = "\u21A5";
    var marker = "\u25AE";
    var mcomma = "\u2A29";
    var mcy = "\u043C";
    var mdash = "\u2014";
    var measuredangle = "\u2221";
    var mfr = "\u{1D52A}";
    var mho = "\u2127";
    var micr = "\xB5";
    var micro = "\xB5";
    var mid = "\u2223";
    var midast = "*";
    var midcir = "\u2AF0";
    var middo = "\xB7";
    var middot = "\xB7";
    var minus = "\u2212";
    var minusb = "\u229F";
    var minusd = "\u2238";
    var minusdu = "\u2A2A";
    var mlcp = "\u2ADB";
    var mldr = "\u2026";
    var mnplus = "\u2213";
    var models = "\u22A7";
    var mopf = "\u{1D55E}";
    var mp = "\u2213";
    var mscr = "\u{1D4C2}";
    var mstpos = "\u223E";
    var mu = "\u03BC";
    var multimap = "\u22B8";
    var mumap = "\u22B8";
    var nGg = "\u22D9\u0338";
    var nGt = "\u226B\u20D2";
    var nGtv = "\u226B\u0338";
    var nLeftarrow = "\u21CD";
    var nLeftrightarrow = "\u21CE";
    var nLl = "\u22D8\u0338";
    var nLt = "\u226A\u20D2";
    var nLtv = "\u226A\u0338";
    var nRightarrow = "\u21CF";
    var nVDash = "\u22AF";
    var nVdash = "\u22AE";
    var nabla = "\u2207";
    var nacute = "\u0144";
    var nang = "\u2220\u20D2";
    var nap = "\u2249";
    var napE = "\u2A70\u0338";
    var napid = "\u224B\u0338";
    var napos = "\u0149";
    var napprox = "\u2249";
    var natur = "\u266E";
    var natural = "\u266E";
    var naturals = "\u2115";
    var nbs = "\xA0";
    var nbsp = "\xA0";
    var nbump = "\u224E\u0338";
    var nbumpe = "\u224F\u0338";
    var ncap = "\u2A43";
    var ncaron = "\u0148";
    var ncedil = "\u0146";
    var ncong = "\u2247";
    var ncongdot = "\u2A6D\u0338";
    var ncup = "\u2A42";
    var ncy = "\u043D";
    var ndash = "\u2013";
    var ne = "\u2260";
    var neArr = "\u21D7";
    var nearhk = "\u2924";
    var nearr = "\u2197";
    var nearrow = "\u2197";
    var nedot = "\u2250\u0338";
    var nequiv = "\u2262";
    var nesear = "\u2928";
    var nesim = "\u2242\u0338";
    var nexist = "\u2204";
    var nexists = "\u2204";
    var nfr = "\u{1D52B}";
    var ngE = "\u2267\u0338";
    var nge = "\u2271";
    var ngeq = "\u2271";
    var ngeqq = "\u2267\u0338";
    var ngeqslant = "\u2A7E\u0338";
    var nges = "\u2A7E\u0338";
    var ngsim = "\u2275";
    var ngt = "\u226F";
    var ngtr = "\u226F";
    var nhArr = "\u21CE";
    var nharr = "\u21AE";
    var nhpar = "\u2AF2";
    var ni = "\u220B";
    var nis = "\u22FC";
    var nisd = "\u22FA";
    var niv = "\u220B";
    var njcy = "\u045A";
    var nlArr = "\u21CD";
    var nlE = "\u2266\u0338";
    var nlarr = "\u219A";
    var nldr = "\u2025";
    var nle = "\u2270";
    var nleftarrow = "\u219A";
    var nleftrightarrow = "\u21AE";
    var nleq = "\u2270";
    var nleqq = "\u2266\u0338";
    var nleqslant = "\u2A7D\u0338";
    var nles = "\u2A7D\u0338";
    var nless = "\u226E";
    var nlsim = "\u2274";
    var nlt = "\u226E";
    var nltri = "\u22EA";
    var nltrie = "\u22EC";
    var nmid = "\u2224";
    var nopf = "\u{1D55F}";
    var no = "\xAC";
    var not = "\xAC";
    var notin = "\u2209";
    var notinE = "\u22F9\u0338";
    var notindot = "\u22F5\u0338";
    var notinva = "\u2209";
    var notinvb = "\u22F7";
    var notinvc = "\u22F6";
    var notni = "\u220C";
    var notniva = "\u220C";
    var notnivb = "\u22FE";
    var notnivc = "\u22FD";
    var npar = "\u2226";
    var nparallel = "\u2226";
    var nparsl = "\u2AFD\u20E5";
    var npart = "\u2202\u0338";
    var npolint = "\u2A14";
    var npr = "\u2280";
    var nprcue = "\u22E0";
    var npre = "\u2AAF\u0338";
    var nprec = "\u2280";
    var npreceq = "\u2AAF\u0338";
    var nrArr = "\u21CF";
    var nrarr = "\u219B";
    var nrarrc = "\u2933\u0338";
    var nrarrw = "\u219D\u0338";
    var nrightarrow = "\u219B";
    var nrtri = "\u22EB";
    var nrtrie = "\u22ED";
    var nsc = "\u2281";
    var nsccue = "\u22E1";
    var nsce = "\u2AB0\u0338";
    var nscr = "\u{1D4C3}";
    var nshortmid = "\u2224";
    var nshortparallel = "\u2226";
    var nsim = "\u2241";
    var nsime = "\u2244";
    var nsimeq = "\u2244";
    var nsmid = "\u2224";
    var nspar = "\u2226";
    var nsqsube = "\u22E2";
    var nsqsupe = "\u22E3";
    var nsub = "\u2284";
    var nsubE = "\u2AC5\u0338";
    var nsube = "\u2288";
    var nsubset = "\u2282\u20D2";
    var nsubseteq = "\u2288";
    var nsubseteqq = "\u2AC5\u0338";
    var nsucc = "\u2281";
    var nsucceq = "\u2AB0\u0338";
    var nsup = "\u2285";
    var nsupE = "\u2AC6\u0338";
    var nsupe = "\u2289";
    var nsupset = "\u2283\u20D2";
    var nsupseteq = "\u2289";
    var nsupseteqq = "\u2AC6\u0338";
    var ntgl = "\u2279";
    var ntild = "\xF1";
    var ntilde = "\xF1";
    var ntlg = "\u2278";
    var ntriangleleft = "\u22EA";
    var ntrianglelefteq = "\u22EC";
    var ntriangleright = "\u22EB";
    var ntrianglerighteq = "\u22ED";
    var nu = "\u03BD";
    var num = "#";
    var numero = "\u2116";
    var numsp = "\u2007";
    var nvDash = "\u22AD";
    var nvHarr = "\u2904";
    var nvap = "\u224D\u20D2";
    var nvdash = "\u22AC";
    var nvge = "\u2265\u20D2";
    var nvgt = ">\u20D2";
    var nvinfin = "\u29DE";
    var nvlArr = "\u2902";
    var nvle = "\u2264\u20D2";
    var nvlt = "<\u20D2";
    var nvltrie = "\u22B4\u20D2";
    var nvrArr = "\u2903";
    var nvrtrie = "\u22B5\u20D2";
    var nvsim = "\u223C\u20D2";
    var nwArr = "\u21D6";
    var nwarhk = "\u2923";
    var nwarr = "\u2196";
    var nwarrow = "\u2196";
    var nwnear = "\u2927";
    var oS = "\u24C8";
    var oacut = "\xF3";
    var oacute = "\xF3";
    var oast = "\u229B";
    var ocir = "\xF4";
    var ocirc = "\xF4";
    var ocy = "\u043E";
    var odash = "\u229D";
    var odblac = "\u0151";
    var odiv = "\u2A38";
    var odot = "\u2299";
    var odsold = "\u29BC";
    var oelig = "\u0153";
    var ofcir = "\u29BF";
    var ofr = "\u{1D52C}";
    var ogon = "\u02DB";
    var ograv = "\xF2";
    var ograve = "\xF2";
    var ogt = "\u29C1";
    var ohbar = "\u29B5";
    var ohm = "\u03A9";
    var oint = "\u222E";
    var olarr = "\u21BA";
    var olcir = "\u29BE";
    var olcross = "\u29BB";
    var oline = "\u203E";
    var olt = "\u29C0";
    var omacr = "\u014D";
    var omega = "\u03C9";
    var omicron = "\u03BF";
    var omid = "\u29B6";
    var ominus = "\u2296";
    var oopf = "\u{1D560}";
    var opar = "\u29B7";
    var operp = "\u29B9";
    var oplus = "\u2295";
    var or = "\u2228";
    var orarr = "\u21BB";
    var ord = "\xBA";
    var order = "\u2134";
    var orderof = "\u2134";
    var ordf = "\xAA";
    var ordm = "\xBA";
    var origof = "\u22B6";
    var oror = "\u2A56";
    var orslope = "\u2A57";
    var orv = "\u2A5B";
    var oscr = "\u2134";
    var oslas = "\xF8";
    var oslash = "\xF8";
    var osol = "\u2298";
    var otild = "\xF5";
    var otilde = "\xF5";
    var otimes = "\u2297";
    var otimesas = "\u2A36";
    var oum = "\xF6";
    var ouml = "\xF6";
    var ovbar = "\u233D";
    var par = "\xB6";
    var para = "\xB6";
    var parallel = "\u2225";
    var parsim = "\u2AF3";
    var parsl = "\u2AFD";
    var part = "\u2202";
    var pcy = "\u043F";
    var percnt = "%";
    var period = ".";
    var permil = "\u2030";
    var perp = "\u22A5";
    var pertenk = "\u2031";
    var pfr = "\u{1D52D}";
    var phi = "\u03C6";
    var phiv = "\u03D5";
    var phmmat = "\u2133";
    var phone = "\u260E";
    var pi = "\u03C0";
    var pitchfork = "\u22D4";
    var piv = "\u03D6";
    var planck = "\u210F";
    var planckh = "\u210E";
    var plankv = "\u210F";
    var plus = "+";
    var plusacir = "\u2A23";
    var plusb = "\u229E";
    var pluscir = "\u2A22";
    var plusdo = "\u2214";
    var plusdu = "\u2A25";
    var pluse = "\u2A72";
    var plusm = "\xB1";
    var plusmn = "\xB1";
    var plussim = "\u2A26";
    var plustwo = "\u2A27";
    var pm = "\xB1";
    var pointint = "\u2A15";
    var popf = "\u{1D561}";
    var poun = "\xA3";
    var pound = "\xA3";
    var pr = "\u227A";
    var prE = "\u2AB3";
    var prap = "\u2AB7";
    var prcue = "\u227C";
    var pre = "\u2AAF";
    var prec = "\u227A";
    var precapprox = "\u2AB7";
    var preccurlyeq = "\u227C";
    var preceq = "\u2AAF";
    var precnapprox = "\u2AB9";
    var precneqq = "\u2AB5";
    var precnsim = "\u22E8";
    var precsim = "\u227E";
    var prime = "\u2032";
    var primes = "\u2119";
    var prnE = "\u2AB5";
    var prnap = "\u2AB9";
    var prnsim = "\u22E8";
    var prod = "\u220F";
    var profalar = "\u232E";
    var profline = "\u2312";
    var profsurf = "\u2313";
    var prop = "\u221D";
    var propto = "\u221D";
    var prsim = "\u227E";
    var prurel = "\u22B0";
    var pscr = "\u{1D4C5}";
    var psi = "\u03C8";
    var puncsp = "\u2008";
    var qfr = "\u{1D52E}";
    var qint = "\u2A0C";
    var qopf = "\u{1D562}";
    var qprime = "\u2057";
    var qscr = "\u{1D4C6}";
    var quaternions = "\u210D";
    var quatint = "\u2A16";
    var quest = "?";
    var questeq = "\u225F";
    var quo = '"';
    var quot = '"';
    var rAarr = "\u21DB";
    var rArr = "\u21D2";
    var rAtail = "\u291C";
    var rBarr = "\u290F";
    var rHar = "\u2964";
    var race = "\u223D\u0331";
    var racute = "\u0155";
    var radic = "\u221A";
    var raemptyv = "\u29B3";
    var rang = "\u27E9";
    var rangd = "\u2992";
    var range = "\u29A5";
    var rangle = "\u27E9";
    var raqu = "\xBB";
    var raquo = "\xBB";
    var rarr = "\u2192";
    var rarrap = "\u2975";
    var rarrb = "\u21E5";
    var rarrbfs = "\u2920";
    var rarrc = "\u2933";
    var rarrfs = "\u291E";
    var rarrhk = "\u21AA";
    var rarrlp = "\u21AC";
    var rarrpl = "\u2945";
    var rarrsim = "\u2974";
    var rarrtl = "\u21A3";
    var rarrw = "\u219D";
    var ratail = "\u291A";
    var ratio = "\u2236";
    var rationals = "\u211A";
    var rbarr = "\u290D";
    var rbbrk = "\u2773";
    var rbrace = "}";
    var rbrack = "]";
    var rbrke = "\u298C";
    var rbrksld = "\u298E";
    var rbrkslu = "\u2990";
    var rcaron = "\u0159";
    var rcedil = "\u0157";
    var rceil = "\u2309";
    var rcub = "}";
    var rcy = "\u0440";
    var rdca = "\u2937";
    var rdldhar = "\u2969";
    var rdquo = "\u201D";
    var rdquor = "\u201D";
    var rdsh = "\u21B3";
    var real = "\u211C";
    var realine = "\u211B";
    var realpart = "\u211C";
    var reals = "\u211D";
    var rect = "\u25AD";
    var re = "\xAE";
    var reg = "\xAE";
    var rfisht = "\u297D";
    var rfloor = "\u230B";
    var rfr = "\u{1D52F}";
    var rhard = "\u21C1";
    var rharu = "\u21C0";
    var rharul = "\u296C";
    var rho = "\u03C1";
    var rhov = "\u03F1";
    var rightarrow = "\u2192";
    var rightarrowtail = "\u21A3";
    var rightharpoondown = "\u21C1";
    var rightharpoonup = "\u21C0";
    var rightleftarrows = "\u21C4";
    var rightleftharpoons = "\u21CC";
    var rightrightarrows = "\u21C9";
    var rightsquigarrow = "\u219D";
    var rightthreetimes = "\u22CC";
    var ring = "\u02DA";
    var risingdotseq = "\u2253";
    var rlarr = "\u21C4";
    var rlhar = "\u21CC";
    var rlm = "\u200F";
    var rmoust = "\u23B1";
    var rmoustache = "\u23B1";
    var rnmid = "\u2AEE";
    var roang = "\u27ED";
    var roarr = "\u21FE";
    var robrk = "\u27E7";
    var ropar = "\u2986";
    var ropf = "\u{1D563}";
    var roplus = "\u2A2E";
    var rotimes = "\u2A35";
    var rpar = ")";
    var rpargt = "\u2994";
    var rppolint = "\u2A12";
    var rrarr = "\u21C9";
    var rsaquo = "\u203A";
    var rscr = "\u{1D4C7}";
    var rsh = "\u21B1";
    var rsqb = "]";
    var rsquo = "\u2019";
    var rsquor = "\u2019";
    var rthree = "\u22CC";
    var rtimes = "\u22CA";
    var rtri = "\u25B9";
    var rtrie = "\u22B5";
    var rtrif = "\u25B8";
    var rtriltri = "\u29CE";
    var ruluhar = "\u2968";
    var rx = "\u211E";
    var sacute = "\u015B";
    var sbquo = "\u201A";
    var sc = "\u227B";
    var scE = "\u2AB4";
    var scap = "\u2AB8";
    var scaron = "\u0161";
    var sccue = "\u227D";
    var sce = "\u2AB0";
    var scedil = "\u015F";
    var scirc = "\u015D";
    var scnE = "\u2AB6";
    var scnap = "\u2ABA";
    var scnsim = "\u22E9";
    var scpolint = "\u2A13";
    var scsim = "\u227F";
    var scy = "\u0441";
    var sdot = "\u22C5";
    var sdotb = "\u22A1";
    var sdote = "\u2A66";
    var seArr = "\u21D8";
    var searhk = "\u2925";
    var searr = "\u2198";
    var searrow = "\u2198";
    var sec = "\xA7";
    var sect = "\xA7";
    var semi = ";";
    var seswar = "\u2929";
    var setminus = "\u2216";
    var setmn = "\u2216";
    var sext = "\u2736";
    var sfr = "\u{1D530}";
    var sfrown = "\u2322";
    var sharp = "\u266F";
    var shchcy = "\u0449";
    var shcy = "\u0448";
    var shortmid = "\u2223";
    var shortparallel = "\u2225";
    var sh = "\xAD";
    var shy = "\xAD";
    var sigma = "\u03C3";
    var sigmaf = "\u03C2";
    var sigmav = "\u03C2";
    var sim = "\u223C";
    var simdot = "\u2A6A";
    var sime = "\u2243";
    var simeq = "\u2243";
    var simg = "\u2A9E";
    var simgE = "\u2AA0";
    var siml = "\u2A9D";
    var simlE = "\u2A9F";
    var simne = "\u2246";
    var simplus = "\u2A24";
    var simrarr = "\u2972";
    var slarr = "\u2190";
    var smallsetminus = "\u2216";
    var smashp = "\u2A33";
    var smeparsl = "\u29E4";
    var smid = "\u2223";
    var smile = "\u2323";
    var smt = "\u2AAA";
    var smte = "\u2AAC";
    var smtes = "\u2AAC\uFE00";
    var softcy = "\u044C";
    var sol = "/";
    var solb = "\u29C4";
    var solbar = "\u233F";
    var sopf = "\u{1D564}";
    var spades = "\u2660";
    var spadesuit = "\u2660";
    var spar = "\u2225";
    var sqcap = "\u2293";
    var sqcaps = "\u2293\uFE00";
    var sqcup = "\u2294";
    var sqcups = "\u2294\uFE00";
    var sqsub = "\u228F";
    var sqsube = "\u2291";
    var sqsubset = "\u228F";
    var sqsubseteq = "\u2291";
    var sqsup = "\u2290";
    var sqsupe = "\u2292";
    var sqsupset = "\u2290";
    var sqsupseteq = "\u2292";
    var squ = "\u25A1";
    var square = "\u25A1";
    var squarf = "\u25AA";
    var squf = "\u25AA";
    var srarr = "\u2192";
    var sscr = "\u{1D4C8}";
    var ssetmn = "\u2216";
    var ssmile = "\u2323";
    var sstarf = "\u22C6";
    var star = "\u2606";
    var starf = "\u2605";
    var straightepsilon = "\u03F5";
    var straightphi = "\u03D5";
    var strns = "\xAF";
    var sub = "\u2282";
    var subE = "\u2AC5";
    var subdot = "\u2ABD";
    var sube = "\u2286";
    var subedot = "\u2AC3";
    var submult = "\u2AC1";
    var subnE = "\u2ACB";
    var subne = "\u228A";
    var subplus = "\u2ABF";
    var subrarr = "\u2979";
    var subset = "\u2282";
    var subseteq = "\u2286";
    var subseteqq = "\u2AC5";
    var subsetneq = "\u228A";
    var subsetneqq = "\u2ACB";
    var subsim = "\u2AC7";
    var subsub = "\u2AD5";
    var subsup = "\u2AD3";
    var succ = "\u227B";
    var succapprox = "\u2AB8";
    var succcurlyeq = "\u227D";
    var succeq = "\u2AB0";
    var succnapprox = "\u2ABA";
    var succneqq = "\u2AB6";
    var succnsim = "\u22E9";
    var succsim = "\u227F";
    var sum = "\u2211";
    var sung = "\u266A";
    var sup = "\u2283";
    var sup1 = "\xB9";
    var sup2 = "\xB2";
    var sup3 = "\xB3";
    var supE = "\u2AC6";
    var supdot = "\u2ABE";
    var supdsub = "\u2AD8";
    var supe = "\u2287";
    var supedot = "\u2AC4";
    var suphsol = "\u27C9";
    var suphsub = "\u2AD7";
    var suplarr = "\u297B";
    var supmult = "\u2AC2";
    var supnE = "\u2ACC";
    var supne = "\u228B";
    var supplus = "\u2AC0";
    var supset = "\u2283";
    var supseteq = "\u2287";
    var supseteqq = "\u2AC6";
    var supsetneq = "\u228B";
    var supsetneqq = "\u2ACC";
    var supsim = "\u2AC8";
    var supsub = "\u2AD4";
    var supsup = "\u2AD6";
    var swArr = "\u21D9";
    var swarhk = "\u2926";
    var swarr = "\u2199";
    var swarrow = "\u2199";
    var swnwar = "\u292A";
    var szli = "\xDF";
    var szlig = "\xDF";
    var target = "\u2316";
    var tau = "\u03C4";
    var tbrk = "\u23B4";
    var tcaron = "\u0165";
    var tcedil = "\u0163";
    var tcy = "\u0442";
    var tdot = "\u20DB";
    var telrec = "\u2315";
    var tfr = "\u{1D531}";
    var there4 = "\u2234";
    var therefore = "\u2234";
    var theta = "\u03B8";
    var thetasym = "\u03D1";
    var thetav = "\u03D1";
    var thickapprox = "\u2248";
    var thicksim = "\u223C";
    var thinsp = "\u2009";
    var thkap = "\u2248";
    var thksim = "\u223C";
    var thor = "\xFE";
    var thorn = "\xFE";
    var tilde = "\u02DC";
    var time$1 = "\xD7";
    var times = "\xD7";
    var timesb = "\u22A0";
    var timesbar = "\u2A31";
    var timesd = "\u2A30";
    var tint = "\u222D";
    var toea = "\u2928";
    var top = "\u22A4";
    var topbot = "\u2336";
    var topcir = "\u2AF1";
    var topf = "\u{1D565}";
    var topfork = "\u2ADA";
    var tosa = "\u2929";
    var tprime = "\u2034";
    var trade = "\u2122";
    var triangle = "\u25B5";
    var triangledown = "\u25BF";
    var triangleleft = "\u25C3";
    var trianglelefteq = "\u22B4";
    var triangleq = "\u225C";
    var triangleright = "\u25B9";
    var trianglerighteq = "\u22B5";
    var tridot = "\u25EC";
    var trie = "\u225C";
    var triminus = "\u2A3A";
    var triplus = "\u2A39";
    var trisb = "\u29CD";
    var tritime = "\u2A3B";
    var trpezium = "\u23E2";
    var tscr = "\u{1D4C9}";
    var tscy = "\u0446";
    var tshcy = "\u045B";
    var tstrok = "\u0167";
    var twixt = "\u226C";
    var twoheadleftarrow = "\u219E";
    var twoheadrightarrow = "\u21A0";
    var uArr = "\u21D1";
    var uHar = "\u2963";
    var uacut = "\xFA";
    var uacute = "\xFA";
    var uarr = "\u2191";
    var ubrcy = "\u045E";
    var ubreve = "\u016D";
    var ucir = "\xFB";
    var ucirc = "\xFB";
    var ucy = "\u0443";
    var udarr = "\u21C5";
    var udblac = "\u0171";
    var udhar = "\u296E";
    var ufisht = "\u297E";
    var ufr = "\u{1D532}";
    var ugrav = "\xF9";
    var ugrave = "\xF9";
    var uharl = "\u21BF";
    var uharr = "\u21BE";
    var uhblk = "\u2580";
    var ulcorn = "\u231C";
    var ulcorner = "\u231C";
    var ulcrop = "\u230F";
    var ultri = "\u25F8";
    var umacr = "\u016B";
    var um = "\xA8";
    var uml = "\xA8";
    var uogon = "\u0173";
    var uopf = "\u{1D566}";
    var uparrow = "\u2191";
    var updownarrow = "\u2195";
    var upharpoonleft = "\u21BF";
    var upharpoonright = "\u21BE";
    var uplus = "\u228E";
    var upsi = "\u03C5";
    var upsih = "\u03D2";
    var upsilon = "\u03C5";
    var upuparrows = "\u21C8";
    var urcorn = "\u231D";
    var urcorner = "\u231D";
    var urcrop = "\u230E";
    var uring = "\u016F";
    var urtri = "\u25F9";
    var uscr = "\u{1D4CA}";
    var utdot = "\u22F0";
    var utilde = "\u0169";
    var utri = "\u25B5";
    var utrif = "\u25B4";
    var uuarr = "\u21C8";
    var uum = "\xFC";
    var uuml = "\xFC";
    var uwangle = "\u29A7";
    var vArr = "\u21D5";
    var vBar = "\u2AE8";
    var vBarv = "\u2AE9";
    var vDash = "\u22A8";
    var vangrt = "\u299C";
    var varepsilon = "\u03F5";
    var varkappa = "\u03F0";
    var varnothing = "\u2205";
    var varphi = "\u03D5";
    var varpi = "\u03D6";
    var varpropto = "\u221D";
    var varr = "\u2195";
    var varrho = "\u03F1";
    var varsigma = "\u03C2";
    var varsubsetneq = "\u228A\uFE00";
    var varsubsetneqq = "\u2ACB\uFE00";
    var varsupsetneq = "\u228B\uFE00";
    var varsupsetneqq = "\u2ACC\uFE00";
    var vartheta = "\u03D1";
    var vartriangleleft = "\u22B2";
    var vartriangleright = "\u22B3";
    var vcy = "\u0432";
    var vdash = "\u22A2";
    var vee = "\u2228";
    var veebar = "\u22BB";
    var veeeq = "\u225A";
    var vellip = "\u22EE";
    var verbar = "|";
    var vert = "|";
    var vfr = "\u{1D533}";
    var vltri = "\u22B2";
    var vnsub = "\u2282\u20D2";
    var vnsup = "\u2283\u20D2";
    var vopf = "\u{1D567}";
    var vprop = "\u221D";
    var vrtri = "\u22B3";
    var vscr = "\u{1D4CB}";
    var vsubnE = "\u2ACB\uFE00";
    var vsubne = "\u228A\uFE00";
    var vsupnE = "\u2ACC\uFE00";
    var vsupne = "\u228B\uFE00";
    var vzigzag = "\u299A";
    var wcirc = "\u0175";
    var wedbar = "\u2A5F";
    var wedge = "\u2227";
    var wedgeq = "\u2259";
    var weierp = "\u2118";
    var wfr = "\u{1D534}";
    var wopf = "\u{1D568}";
    var wp = "\u2118";
    var wr = "\u2240";
    var wreath = "\u2240";
    var wscr = "\u{1D4CC}";
    var xcap = "\u22C2";
    var xcirc = "\u25EF";
    var xcup = "\u22C3";
    var xdtri = "\u25BD";
    var xfr = "\u{1D535}";
    var xhArr = "\u27FA";
    var xharr = "\u27F7";
    var xi = "\u03BE";
    var xlArr = "\u27F8";
    var xlarr = "\u27F5";
    var xmap = "\u27FC";
    var xnis = "\u22FB";
    var xodot = "\u2A00";
    var xopf = "\u{1D569}";
    var xoplus = "\u2A01";
    var xotime = "\u2A02";
    var xrArr = "\u27F9";
    var xrarr = "\u27F6";
    var xscr = "\u{1D4CD}";
    var xsqcup = "\u2A06";
    var xuplus = "\u2A04";
    var xutri = "\u25B3";
    var xvee = "\u22C1";
    var xwedge = "\u22C0";
    var yacut = "\xFD";
    var yacute = "\xFD";
    var yacy = "\u044F";
    var ycirc = "\u0177";
    var ycy = "\u044B";
    var ye = "\xA5";
    var yen = "\xA5";
    var yfr = "\u{1D536}";
    var yicy = "\u0457";
    var yopf = "\u{1D56A}";
    var yscr = "\u{1D4CE}";
    var yucy = "\u044E";
    var yum = "\xFF";
    var yuml = "\xFF";
    var zacute = "\u017A";
    var zcaron = "\u017E";
    var zcy = "\u0437";
    var zdot = "\u017C";
    var zeetrf = "\u2128";
    var zeta = "\u03B6";
    var zfr = "\u{1D537}";
    var zhcy = "\u0436";
    var zigrarr = "\u21DD";
    var zopf = "\u{1D56B}";
    var zscr = "\u{1D4CF}";
    var zwj = "\u200D";
    var zwnj = "\u200C";
    var require$$0 = { AEli, AElig, AM, AMP, Aacut, Aacute, Abreve, Acir, Acirc, Acy, Afr, Agrav, Agrave, Alpha, Amacr, And, Aogon, Aopf, ApplyFunction, Arin, Aring, Ascr, Assign, Atild, Atilde, Aum, Auml, Backslash, Barv, Barwed, Bcy, Because, Bernoullis, Beta, Bfr, Bopf, Breve, Bscr, Bumpeq, CHcy, COP, COPY, Cacute, Cap, CapitalDifferentialD, Cayleys, Ccaron, Ccedi, Ccedil, Ccirc, Cconint, Cdot, Cedilla, CenterDot, Cfr, Chi, CircleDot, CircleMinus, CirclePlus, CircleTimes, ClockwiseContourIntegral, CloseCurlyDoubleQuote, CloseCurlyQuote, Colon, Colone, Congruent, Conint, ContourIntegral, Copf, Coproduct, CounterClockwiseContourIntegral, Cross, Cscr, Cup, CupCap, DD, DDotrahd, DJcy, DScy, DZcy, Dagger, Darr, Dashv, Dcaron, Dcy, Del, Delta, Dfr, DiacriticalAcute, DiacriticalDot, DiacriticalDoubleAcute, DiacriticalGrave, DiacriticalTilde, Diamond, DifferentialD, Dopf, Dot: Dot$1, DotDot, DotEqual, DoubleContourIntegral, DoubleDot, DoubleDownArrow, DoubleLeftArrow, DoubleLeftRightArrow, DoubleLeftTee, DoubleLongLeftArrow, DoubleLongLeftRightArrow, DoubleLongRightArrow, DoubleRightArrow, DoubleRightTee, DoubleUpArrow, DoubleUpDownArrow, DoubleVerticalBar, DownArrow, DownArrowBar, DownArrowUpArrow, DownBreve, DownLeftRightVector, DownLeftTeeVector, DownLeftVector, DownLeftVectorBar, DownRightTeeVector, DownRightVector, DownRightVectorBar, DownTee, DownTeeArrow, Downarrow, Dscr, Dstrok, ENG, ET, ETH, Eacut, Eacute, Ecaron, Ecir, Ecirc, Ecy, Edot, Efr, Egrav, Egrave, Element: Element$1, Emacr, EmptySmallSquare, EmptyVerySmallSquare, Eogon, Eopf, Epsilon, Equal, EqualTilde, Equilibrium, Escr, Esim, Eta, Eum, Euml, Exists, ExponentialE, Fcy, Ffr, FilledSmallSquare, FilledVerySmallSquare, Fopf, ForAll, Fouriertrf, Fscr, GJcy, G, GT, Gamma, Gammad, Gbreve, Gcedil, Gcirc, Gcy, Gdot, Gfr, Gg, Gopf, GreaterEqual, GreaterEqualLess, GreaterFullEqual, GreaterGreater, GreaterLess, GreaterSlantEqual, GreaterTilde, Gscr, Gt, HARDcy, Hacek, Hat, Hcirc, Hfr, HilbertSpace, Hopf, HorizontalLine, Hscr, Hstrok, HumpDownHump, HumpEqual, IEcy, IJlig, IOcy, Iacut, Iacute, Icir, Icirc, Icy, Idot, Ifr, Igrav, Igrave, Im, Imacr, ImaginaryI, Implies, Int, Integral, Intersection, InvisibleComma, InvisibleTimes, Iogon, Iopf, Iota, Iscr, Itilde, Iukcy, Ium, Iuml, Jcirc, Jcy, Jfr, Jopf, Jscr, Jsercy, Jukcy, KHcy, KJcy, Kappa, Kcedil, Kcy, Kfr, Kopf, Kscr, LJcy, L, LT, Lacute, Lambda, Lang, Laplacetrf, Larr, Lcaron, Lcedil, Lcy, LeftAngleBracket, LeftArrow, LeftArrowBar, LeftArrowRightArrow, LeftCeiling, LeftDoubleBracket, LeftDownTeeVector, LeftDownVector, LeftDownVectorBar, LeftFloor, LeftRightArrow, LeftRightVector, LeftTee, LeftTeeArrow, LeftTeeVector, LeftTriangle, LeftTriangleBar, LeftTriangleEqual, LeftUpDownVector, LeftUpTeeVector, LeftUpVector, LeftUpVectorBar, LeftVector, LeftVectorBar, Leftarrow, Leftrightarrow, LessEqualGreater, LessFullEqual, LessGreater, LessLess, LessSlantEqual, LessTilde, Lfr, Ll, Lleftarrow, Lmidot, LongLeftArrow, LongLeftRightArrow, LongRightArrow, Longleftarrow, Longleftrightarrow, Longrightarrow, Lopf, LowerLeftArrow, LowerRightArrow, Lscr, Lsh, Lstrok, Lt, "Map": "\u2905", Mcy, MediumSpace, Mellintrf, Mfr, MinusPlus, Mopf, Mscr, Mu, NJcy, Nacute, Ncaron, Ncedil, Ncy, NegativeMediumSpace, NegativeThickSpace, NegativeThinSpace, NegativeVeryThinSpace, NestedGreaterGreater, NestedLessLess, NewLine, Nfr, NoBreak, NonBreakingSpace, Nopf, Not, NotCongruent, NotCupCap, NotDoubleVerticalBar, NotElement, NotEqual, NotEqualTilde, NotExists, NotGreater, NotGreaterEqual, NotGreaterFullEqual, NotGreaterGreater, NotGreaterLess, NotGreaterSlantEqual, NotGreaterTilde, NotHumpDownHump, NotHumpEqual, NotLeftTriangle, NotLeftTriangleBar, NotLeftTriangleEqual, NotLess, NotLessEqual, NotLessGreater, NotLessLess, NotLessSlantEqual, NotLessTilde, NotNestedGreaterGreater, NotNestedLessLess, NotPrecedes, NotPrecedesEqual, NotPrecedesSlantEqual, NotReverseElement, NotRightTriangle, NotRightTriangleBar, NotRightTriangleEqual, NotSquareSubset, NotSquareSubsetEqual, NotSquareSuperset, NotSquareSupersetEqual, NotSubset, NotSubsetEqual, NotSucceeds, NotSucceedsEqual, NotSucceedsSlantEqual, NotSucceedsTilde, NotSuperset, NotSupersetEqual, NotTilde, NotTildeEqual, NotTildeFullEqual, NotTildeTilde, NotVerticalBar, Nscr, Ntild, Ntilde, Nu, OElig, Oacut, Oacute, Ocir, Ocirc, Ocy, Odblac, Ofr, Ograv, Ograve, Omacr, Omega, Omicron, Oopf, OpenCurlyDoubleQuote, OpenCurlyQuote, Or, Oscr, Oslas, Oslash, Otild, Otilde, Otimes, Oum, Ouml, OverBar, OverBrace, OverBracket, OverParenthesis, PartialD, Pcy, Pfr, Phi, Pi, PlusMinus, Poincareplane, Popf, Pr, Precedes, PrecedesEqual, PrecedesSlantEqual, PrecedesTilde, Prime, Product, Proportion, Proportional, Pscr, Psi, QUO, QUOT, Qfr, Qopf, Qscr, RBarr, RE, REG, Racute, Rang, Rarr, Rarrtl, Rcaron, Rcedil, Rcy, Re, ReverseElement, ReverseEquilibrium, ReverseUpEquilibrium, Rfr, Rho, RightAngleBracket, RightArrow, RightArrowBar, RightArrowLeftArrow, RightCeiling, RightDoubleBracket, RightDownTeeVector, RightDownVector, RightDownVectorBar, RightFloor, RightTee, RightTeeArrow, RightTeeVector, RightTriangle, RightTriangleBar, RightTriangleEqual, RightUpDownVector, RightUpTeeVector, RightUpVector, RightUpVectorBar, RightVector, RightVectorBar, Rightarrow, Ropf, RoundImplies, Rrightarrow, Rscr, Rsh, RuleDelayed, SHCHcy, SHcy, SOFTcy, Sacute, Sc, Scaron, Scedil, Scirc, Scy, Sfr, ShortDownArrow, ShortLeftArrow, ShortRightArrow, ShortUpArrow, Sigma, SmallCircle, Sopf, Sqrt, Square, SquareIntersection, SquareSubset, SquareSubsetEqual, SquareSuperset, SquareSupersetEqual, SquareUnion, Sscr, Star, Sub, Subset, SubsetEqual, Succeeds, SucceedsEqual, SucceedsSlantEqual, SucceedsTilde, SuchThat, Sum, Sup, Superset, SupersetEqual, Supset, THOR, THORN, TRADE, TSHcy, TScy, Tab: Tab$1, Tau, Tcaron, Tcedil, Tcy, Tfr, Therefore, Theta, ThickSpace, ThinSpace, Tilde, TildeEqual, TildeFullEqual, TildeTilde, Topf, TripleDot, Tscr, Tstrok, Uacut, Uacute, Uarr, Uarrocir, Ubrcy, Ubreve, Ucir, Ucirc, Ucy, Udblac, Ufr, Ugrav, Ugrave, Umacr, UnderBar, UnderBrace, UnderBracket, UnderParenthesis, Union, UnionPlus, Uogon, Uopf, UpArrow, UpArrowBar, UpArrowDownArrow, UpDownArrow, UpEquilibrium, UpTee, UpTeeArrow, Uparrow, Updownarrow, UpperLeftArrow, UpperRightArrow, Upsi, Upsilon, Uring, Uscr, Utilde, Uum, Uuml, VDash, Vbar, Vcy, Vdash, Vdashl, Vee, Verbar, Vert, VerticalBar, VerticalLine, VerticalSeparator, VerticalTilde, VeryThinSpace, Vfr, Vopf, Vscr, Vvdash, Wcirc, Wedge, Wfr, Wopf, Wscr, Xfr, Xi, Xopf, Xscr, YAcy, YIcy, YUcy, Yacut, Yacute, Ycirc, Ycy, Yfr, Yopf, Yscr, Yuml, ZHcy, Zacute, Zcaron, Zcy, Zdot, ZeroWidthSpace, Zeta, Zfr, Zopf, Zscr, aacut, aacute, abreve, ac, acE, acd, acir, acirc, acut, acute, acy, aeli, aelig, af, afr, agrav, agrave, alefsym, aleph, alpha, amacr, amalg, am, amp, and, andand, andd, andslope, andv, ang, ange, angle, angmsd, angmsdaa, angmsdab, angmsdac, angmsdad, angmsdae, angmsdaf, angmsdag, angmsdah, angrt, angrtvb, angrtvbd, angsph, angst, angzarr, aogon, aopf, ap, apE, apacir, ape, apid, apos, approx, approxeq, arin, aring, ascr, ast, asymp, asympeq, atild, atilde, aum, auml, awconint, awint, bNot, backcong, backepsilon, backprime, backsim, backsimeq, barvee, barwed, barwedge, bbrk, bbrktbrk, bcong, bcy, bdquo, becaus, because, bemptyv, bepsi, bernou, beta, beth, between, bfr, bigcap, bigcirc, bigcup, bigodot, bigoplus, bigotimes, bigsqcup, bigstar, bigtriangledown, bigtriangleup, biguplus, bigvee, bigwedge, bkarow, blacklozenge, blacksquare, blacktriangle, blacktriangledown, blacktriangleleft, blacktriangleright, blank, blk12, blk14, blk34, block, bne, bnequiv, bnot, bopf, bot, bottom, bowtie, boxDL, boxDR, boxDl, boxDr, boxH, boxHD, boxHU, boxHd, boxHu, boxUL, boxUR, boxUl, boxUr, boxV, boxVH, boxVL, boxVR, boxVh, boxVl, boxVr, boxbox, boxdL, boxdR, boxdl, boxdr, boxh, boxhD, boxhU, boxhd, boxhu, boxminus, boxplus, boxtimes, boxuL, boxuR, boxul, boxur, boxv, boxvH, boxvL, boxvR, boxvh, boxvl, boxvr, bprime, breve, brvba, brvbar, bscr, bsemi, bsim, bsime, bsol, bsolb, bsolhsub, bull, bullet, bump, bumpE, bumpe, bumpeq, cacute, cap, capand, capbrcup, capcap, capcup, capdot, caps, caret, caron, ccaps, ccaron, ccedi, ccedil, ccirc, ccups, ccupssm, cdot, cedi, cedil, cemptyv, cen, cent, centerdot, cfr, chcy, check, checkmark, chi, cir, cirE, circ, circeq, circlearrowleft, circlearrowright, circledR, circledS, circledast, circledcirc, circleddash, cire, cirfnint, cirmid, cirscir, clubs, clubsuit, colon, colone, coloneq, comma, commat, comp, compfn, complement, complexes, cong, congdot, conint, copf, coprod, cop, copy, copysr, crarr, cross, cscr, csub, csube, csup, csupe, ctdot, cudarrl, cudarrr, cuepr, cuesc, cularr, cularrp, cup, cupbrcap, cupcap, cupcup, cupdot, cupor, cups, curarr, curarrm, curlyeqprec, curlyeqsucc, curlyvee, curlywedge, curre, curren, curvearrowleft, curvearrowright, cuvee, cuwed, cwconint, cwint, cylcty, dArr, dHar, dagger, daleth, darr, dash, dashv, dbkarow, dblac, dcaron, dcy, dd, ddagger, ddarr, ddotseq, de, deg, delta, demptyv, dfisht, dfr, dharl, dharr, diam, diamond, diamondsuit, diams, die, digamma, disin, div, divid, divide, divideontimes, divonx, djcy, dlcorn, dlcrop, dollar, dopf, dot, doteq, doteqdot, dotminus, dotplus, dotsquare, doublebarwedge, downarrow, downdownarrows, downharpoonleft, downharpoonright, drbkarow, drcorn, drcrop, dscr, dscy, dsol, dstrok, dtdot, dtri, dtrif, duarr, duhar, dwangle, dzcy, dzigrarr, eDDot, eDot, eacut, eacute, easter, ecaron, ecir, ecirc, ecolon, ecy, edot, ee, efDot, efr, eg, egrav, egrave, egs, egsdot, el, elinters, ell, els, elsdot, emacr, empty, emptyset, emptyv, emsp13, emsp14, emsp, eng, ensp, eogon, eopf, epar, eparsl, eplus, epsi, epsilon, epsiv, eqcirc, eqcolon, eqsim, eqslantgtr, eqslantless, equals, equest, equiv, equivDD, eqvparsl, erDot, erarr, escr, esdot, esim, eta, et, eth, eum, euml, euro, excl, exist, expectation, exponentiale, fallingdotseq, fcy, female, ffilig, fflig, ffllig, ffr, filig, fjlig, flat, fllig, fltns, fnof, fopf, forall, fork, forkv, fpartint, frac1, frac12, frac13, frac14, frac15, frac16, frac18, frac23, frac25, frac3, frac34, frac35, frac38, frac45, frac56, frac58, frac78, frasl, frown, fscr, gE, gEl, gacute, gamma, gammad, gap, gbreve, gcirc, gcy, gdot, ge, gel, geq, geqq, geqslant, ges, gescc, gesdot, gesdoto, gesdotol, gesl, gesles, gfr, gg, ggg, gimel, gjcy, gl, glE, gla, glj, gnE, gnap, gnapprox, gne, gneq, gneqq, gnsim, gopf, grave, gscr, gsim, gsime, gsiml, g, gt, gtcc, gtcir, gtdot, gtlPar, gtquest, gtrapprox, gtrarr, gtrdot, gtreqless, gtreqqless, gtrless, gtrsim, gvertneqq, gvnE, hArr, hairsp, half, hamilt, hardcy, harr, harrcir, harrw, hbar, hcirc, hearts, heartsuit, hellip, hercon, hfr, hksearow, hkswarow, hoarr, homtht, hookleftarrow, hookrightarrow, hopf, horbar, hscr, hslash, hstrok, hybull, hyphen, iacut, iacute, ic, icir, icirc, icy, iecy, iexc, iexcl, iff, ifr, igrav, igrave, ii, iiiint, iiint, iinfin, iiota, ijlig, imacr, image, imagline, imagpart, imath, imof, imped, "in": "\u2208", incare, infin, infintie, inodot, int, intcal, integers, intercal, intlarhk, intprod, iocy, iogon, iopf, iota, iprod, iques, iquest, iscr, isin, isinE, isindot, isins, isinsv, isinv, it, itilde, iukcy, ium, iuml, jcirc, jcy, jfr, jmath, jopf, jscr, jsercy, jukcy, kappa, kappav, kcedil, kcy, kfr, kgreen, khcy, kjcy, kopf, kscr, lAarr, lArr, lAtail, lBarr, lE, lEg, lHar, lacute, laemptyv, lagran, lambda, lang, langd, langle, lap, laqu, laquo, larr, larrb, larrbfs, larrfs, larrhk, larrlp, larrpl, larrsim, larrtl, lat, latail, late, lates, lbarr, lbbrk, lbrace, lbrack, lbrke, lbrksld, lbrkslu, lcaron, lcedil, lceil, lcub, lcy, ldca, ldquo, ldquor, ldrdhar, ldrushar, ldsh, le, leftarrow, leftarrowtail, leftharpoondown, leftharpoonup, leftleftarrows, leftrightarrow, leftrightarrows, leftrightharpoons, leftrightsquigarrow, leftthreetimes, leg, leq, leqq, leqslant, les, lescc, lesdot, lesdoto, lesdotor, lesg, lesges, lessapprox, lessdot, lesseqgtr, lesseqqgtr, lessgtr, lesssim, lfisht, lfloor, lfr, lg, lgE, lhard, lharu, lharul, lhblk, ljcy, ll, llarr, llcorner, llhard, lltri, lmidot, lmoust, lmoustache, lnE, lnap, lnapprox, lne, lneq, lneqq, lnsim, loang, loarr, lobrk, longleftarrow, longleftrightarrow, longmapsto, longrightarrow, looparrowleft, looparrowright, lopar, lopf, loplus, lotimes, lowast, lowbar, loz, lozenge, lozf, lpar, lparlt, lrarr, lrcorner, lrhar, lrhard, lrm, lrtri, lsaquo, lscr, lsh, lsim, lsime, lsimg, lsqb, lsquo, lsquor, lstrok, l, lt, ltcc, ltcir, ltdot, lthree, ltimes, ltlarr, ltquest, ltrPar, ltri, ltrie, ltrif, lurdshar, luruhar, lvertneqq, lvnE, mDDot, mac, macr, male, malt, maltese, map: map$1, mapsto, mapstodown, mapstoleft, mapstoup, marker, mcomma, mcy, mdash, measuredangle, mfr, mho, micr, micro, mid, midast, midcir, middo, middot, minus, minusb, minusd, minusdu, mlcp, mldr, mnplus, models, mopf, mp, mscr, mstpos, mu, multimap, mumap, nGg, nGt, nGtv, nLeftarrow, nLeftrightarrow, nLl, nLt, nLtv, nRightarrow, nVDash, nVdash, nabla, nacute, nang, nap, napE, napid, napos, napprox, natur, natural, naturals, nbs, nbsp, nbump, nbumpe, ncap, ncaron, ncedil, ncong, ncongdot, ncup, ncy, ndash, ne, neArr, nearhk, nearr, nearrow, nedot, nequiv, nesear, nesim, nexist, nexists, nfr, ngE, nge, ngeq, ngeqq, ngeqslant, nges, ngsim, ngt, ngtr, nhArr, nharr, nhpar, ni, nis, nisd, niv, njcy, nlArr, nlE, nlarr, nldr, nle, nleftarrow, nleftrightarrow, nleq, nleqq, nleqslant, nles, nless, nlsim, nlt, nltri, nltrie, nmid, nopf, no, not, notin, notinE, notindot, notinva, notinvb, notinvc, notni, notniva, notnivb, notnivc, npar, nparallel, nparsl, npart, npolint, npr, nprcue, npre, nprec, npreceq, nrArr, nrarr, nrarrc, nrarrw, nrightarrow, nrtri, nrtrie, nsc, nsccue, nsce, nscr, nshortmid, nshortparallel, nsim, nsime, nsimeq, nsmid, nspar, nsqsube, nsqsupe, nsub, nsubE, nsube, nsubset, nsubseteq, nsubseteqq, nsucc, nsucceq, nsup, nsupE, nsupe, nsupset, nsupseteq, nsupseteqq, ntgl, ntild, ntilde, ntlg, ntriangleleft, ntrianglelefteq, ntriangleright, ntrianglerighteq, nu, num, numero, numsp, nvDash, nvHarr, nvap, nvdash, nvge, nvgt, nvinfin, nvlArr, nvle, nvlt, nvltrie, nvrArr, nvrtrie, nvsim, nwArr, nwarhk, nwarr, nwarrow, nwnear, oS, oacut, oacute, oast, ocir, ocirc, ocy, odash, odblac, odiv, odot, odsold, oelig, ofcir, ofr, ogon, ograv, ograve, ogt, ohbar, ohm, oint, olarr, olcir, olcross, oline, olt, omacr, omega, omicron, omid, ominus, oopf, opar, operp, oplus, or, orarr, ord, order, orderof, ordf, ordm, origof, oror, orslope, orv, oscr, oslas, oslash, osol, otild, otilde, otimes, otimesas, oum, ouml, ovbar, par, para, parallel, parsim, parsl, part, pcy, percnt, period, permil, perp, pertenk, pfr, phi, phiv, phmmat, phone, pi, pitchfork, piv, planck, planckh, plankv, plus, plusacir, plusb, pluscir, plusdo, plusdu, pluse, plusm, plusmn, plussim, plustwo, pm, pointint, popf, poun, pound, pr, prE, prap, prcue, pre, prec, precapprox, preccurlyeq, preceq, precnapprox, precneqq, precnsim, precsim, prime, primes, prnE, prnap, prnsim, prod, profalar, profline, profsurf, prop, propto, prsim, prurel, pscr, psi, puncsp, qfr, qint, qopf, qprime, qscr, quaternions, quatint, quest, questeq, quo, quot, rAarr, rArr, rAtail, rBarr, rHar, race, racute, radic, raemptyv, rang, rangd, range, rangle, raqu, raquo, rarr, rarrap, rarrb, rarrbfs, rarrc, rarrfs, rarrhk, rarrlp, rarrpl, rarrsim, rarrtl, rarrw, ratail, ratio, rationals, rbarr, rbbrk, rbrace, rbrack, rbrke, rbrksld, rbrkslu, rcaron, rcedil, rceil, rcub, rcy, rdca, rdldhar, rdquo, rdquor, rdsh, real, realine, realpart, reals, rect, re, reg, rfisht, rfloor, rfr, rhard, rharu, rharul, rho, rhov, rightarrow, rightarrowtail, rightharpoondown, rightharpoonup, rightleftarrows, rightleftharpoons, rightrightarrows, rightsquigarrow, rightthreetimes, ring, risingdotseq, rlarr, rlhar, rlm, rmoust, rmoustache, rnmid, roang, roarr, robrk, ropar, ropf, roplus, rotimes, rpar, rpargt, rppolint, rrarr, rsaquo, rscr, rsh, rsqb, rsquo, rsquor, rthree, rtimes, rtri, rtrie, rtrif, rtriltri, ruluhar, rx, sacute, sbquo, sc, scE, scap, scaron, sccue, sce, scedil, scirc, scnE, scnap, scnsim, scpolint, scsim, scy, sdot, sdotb, sdote, seArr, searhk, searr, searrow, sec, sect, semi, seswar, setminus, setmn, sext, sfr, sfrown, sharp, shchcy, shcy, shortmid, shortparallel, sh, shy, sigma, sigmaf, sigmav, sim, simdot, sime, simeq, simg, simgE, siml, simlE, simne, simplus, simrarr, slarr, smallsetminus, smashp, smeparsl, smid, smile, smt, smte, smtes, softcy, sol, solb, solbar, sopf, spades, spadesuit, spar, sqcap, sqcaps, sqcup, sqcups, sqsub, sqsube, sqsubset, sqsubseteq, sqsup, sqsupe, sqsupset, sqsupseteq, squ, square, squarf, squf, srarr, sscr, ssetmn, ssmile, sstarf, star, starf, straightepsilon, straightphi, strns, sub, subE, subdot, sube, subedot, submult, subnE, subne, subplus, subrarr, subset, subseteq, subseteqq, subsetneq, subsetneqq, subsim, subsub, subsup, succ, succapprox, succcurlyeq, succeq, succnapprox, succneqq, succnsim, succsim, sum, sung, sup, sup1, sup2, sup3, supE, supdot, supdsub, supe, supedot, suphsol, suphsub, suplarr, supmult, supnE, supne, supplus, supset, supseteq, supseteqq, supsetneq, supsetneqq, supsim, supsub, supsup, swArr, swarhk, swarr, swarrow, swnwar, szli, szlig, target, tau, tbrk, tcaron, tcedil, tcy, tdot, telrec, tfr, there4, therefore, theta, thetasym, thetav, thickapprox, thicksim, thinsp, thkap, thksim, thor, thorn, tilde, time: time$1, times, timesb, timesbar, timesd, tint, toea, top, topbot, topcir, topf, topfork, tosa, tprime, trade, triangle, triangledown, triangleleft, trianglelefteq, triangleq, triangleright, trianglerighteq, tridot, trie, triminus, triplus, trisb, tritime, trpezium, tscr, tscy, tshcy, tstrok, twixt, twoheadleftarrow, twoheadrightarrow, uArr, uHar, uacut, uacute, uarr, ubrcy, ubreve, ucir, ucirc, ucy, udarr, udblac, udhar, ufisht, ufr, ugrav, ugrave, uharl, uharr, uhblk, ulcorn, ulcorner, ulcrop, ultri, umacr, um, uml, uogon, uopf, uparrow, updownarrow, upharpoonleft, upharpoonright, uplus, upsi, upsih, upsilon, upuparrows, urcorn, urcorner, urcrop, uring, urtri, uscr, utdot, utilde, utri, utrif, uuarr, uum, uuml, uwangle, vArr, vBar, vBarv, vDash, vangrt, varepsilon, varkappa, varnothing, varphi, varpi, varpropto, varr, varrho, varsigma, varsubsetneq, varsubsetneqq, varsupsetneq, varsupsetneqq, vartheta, vartriangleleft, vartriangleright, vcy, vdash, vee, veebar, veeeq, vellip, verbar, vert, vfr, vltri, vnsub, vnsup, vopf, vprop, vrtri, vscr, vsubnE, vsubne, vsupnE, vsupne, vzigzag, wcirc, wedbar, wedge, wedgeq, weierp, wfr, wopf, wp, wr, wreath, wscr, xcap, xcirc, xcup, xdtri, xfr, xhArr, xharr, xi, xlArr, xlarr, xmap, xnis, xodot, xopf, xoplus, xotime, xrArr, xrarr, xscr, xsqcup, xuplus, xutri, xvee, xwedge, yacut, yacute, yacy, ycirc, ycy, ye, yen, yfr, yicy, yopf, yscr, yucy, yum, yuml, zacute, zcaron, zcy, zdot, zeetrf, zeta, zfr, zhcy, zigrarr, zopf, zscr, zwj, zwnj };
    var characterEntities = require$$0;
    var decodeEntity_1 = decodeEntity$1;
    var own$3 = {}.hasOwnProperty;
    function decodeEntity$1(characters) {
      return own$3.call(characterEntities, characters) ? characterEntities[characters] : false;
    }
    var legacy = require$$0$1;
    var invalid = require$$1;
    var decimal = isDecimal;
    var hexadecimal = isHexadecimal;
    var alphanumerical = isAlphanumerical;
    var decodeEntity = decodeEntity_1;
    var parseEntities_1 = parseEntities;
    var own$2 = {}.hasOwnProperty;
    var fromCharCode = String.fromCharCode;
    var noop = Function.prototype;
    var defaults = { warning: null, reference: null, text: null, warningContext: null, referenceContext: null, textContext: null, position: {}, additional: null, attribute: false, nonTerminated: true };
    var tab = 9;
    var lineFeed = 10;
    var formFeed = 12;
    var space = 32;
    var ampersand = 38;
    var semicolon = 59;
    var lessThan = 60;
    var equalsTo = 61;
    var numberSign = 35;
    var uppercaseX = 88;
    var lowercaseX = 120;
    var replacementCharacter = 65533;
    var name = "named";
    var hexa = "hexadecimal";
    var deci = "decimal";
    var bases = {};
    bases[hexa] = 16;
    bases[deci] = 10;
    var tests = {};
    tests[name] = alphanumerical;
    tests[deci] = decimal;
    tests[hexa] = hexadecimal;
    var namedNotTerminated = 1;
    var numericNotTerminated = 2;
    var namedEmpty = 3;
    var numericEmpty = 4;
    var namedUnknown = 5;
    var numericDisallowed = 6;
    var numericProhibited = 7;
    var messages = {};
    messages[namedNotTerminated] = "Named character references must be terminated by a semicolon";
    messages[numericNotTerminated] = "Numeric character references must be terminated by a semicolon";
    messages[namedEmpty] = "Named character references cannot be empty";
    messages[numericEmpty] = "Numeric character references cannot be empty";
    messages[namedUnknown] = "Named character references must be known";
    messages[numericDisallowed] = "Numeric character references cannot be disallowed";
    messages[numericProhibited] = "Numeric character references cannot be outside the permissible Unicode range";
    function parseEntities(value, options) {
      var settings = {};
      var option;
      var key2;
      if (!options) {
        options = {};
      }
      for (key2 in defaults) {
        option = options[key2];
        settings[key2] = option === null || option === void 0 ? defaults[key2] : option;
      }
      if (settings.position.indent || settings.position.start) {
        settings.indent = settings.position.indent || [];
        settings.position = settings.position.start;
      }
      return parse(value, settings);
    }
    function parse(value, settings) {
      var additional = settings.additional;
      var nonTerminated = settings.nonTerminated;
      var handleText = settings.text;
      var handleReference = settings.reference;
      var handleWarning = settings.warning;
      var textContext = settings.textContext;
      var referenceContext = settings.referenceContext;
      var warningContext = settings.warningContext;
      var pos = settings.position;
      var indent = settings.indent || [];
      var length = value.length;
      var index2 = 0;
      var lines = -1;
      var column = pos.column || 1;
      var line = pos.line || 1;
      var queue = "";
      var result = [];
      var entityCharacters;
      var namedEntity;
      var terminated;
      var characters;
      var character;
      var reference;
      var following;
      var warning;
      var reason;
      var output;
      var entity;
      var begin;
      var start;
      var type;
      var test;
      var prev;
      var next;
      var diff;
      var end;
      if (typeof additional === "string") {
        additional = additional.charCodeAt(0);
      }
      prev = now();
      warning = handleWarning ? parseError : noop;
      index2--;
      length++;
      while (++index2 < length) {
        if (character === lineFeed) {
          column = indent[lines] || 1;
        }
        character = value.charCodeAt(index2);
        if (character === ampersand) {
          following = value.charCodeAt(index2 + 1);
          if (following === tab || following === lineFeed || following === formFeed || following === space || following === ampersand || following === lessThan || following !== following || additional && following === additional) {
            queue += fromCharCode(character);
            column++;
            continue;
          }
          start = index2 + 1;
          begin = start;
          end = start;
          if (following === numberSign) {
            end = ++begin;
            following = value.charCodeAt(end);
            if (following === uppercaseX || following === lowercaseX) {
              type = hexa;
              end = ++begin;
            } else {
              type = deci;
            }
          } else {
            type = name;
          }
          entityCharacters = "";
          entity = "";
          characters = "";
          test = tests[type];
          end--;
          while (++end < length) {
            following = value.charCodeAt(end);
            if (!test(following)) {
              break;
            }
            characters += fromCharCode(following);
            if (type === name && own$2.call(legacy, characters)) {
              entityCharacters = characters;
              entity = legacy[characters];
            }
          }
          terminated = value.charCodeAt(end) === semicolon;
          if (terminated) {
            end++;
            namedEntity = type === name ? decodeEntity(characters) : false;
            if (namedEntity) {
              entityCharacters = characters;
              entity = namedEntity;
            }
          }
          diff = 1 + end - start;
          if (!terminated && !nonTerminated)
            ;
          else if (!characters) {
            if (type !== name) {
              warning(numericEmpty, diff);
            }
          } else if (type === name) {
            if (terminated && !entity) {
              warning(namedUnknown, 1);
            } else {
              if (entityCharacters !== characters) {
                end = begin + entityCharacters.length;
                diff = 1 + end - begin;
                terminated = false;
              }
              if (!terminated) {
                reason = entityCharacters ? namedNotTerminated : namedEmpty;
                if (settings.attribute) {
                  following = value.charCodeAt(end);
                  if (following === equalsTo) {
                    warning(reason, diff);
                    entity = null;
                  } else if (alphanumerical(following)) {
                    entity = null;
                  } else {
                    warning(reason, diff);
                  }
                } else {
                  warning(reason, diff);
                }
              }
            }
            reference = entity;
          } else {
            if (!terminated) {
              warning(numericNotTerminated, diff);
            }
            reference = parseInt(characters, bases[type]);
            if (prohibited(reference)) {
              warning(numericProhibited, diff);
              reference = fromCharCode(replacementCharacter);
            } else if (reference in invalid) {
              warning(numericDisallowed, diff);
              reference = invalid[reference];
            } else {
              output = "";
              if (disallowed(reference)) {
                warning(numericDisallowed, diff);
              }
              if (reference > 65535) {
                reference -= 65536;
                output += fromCharCode(reference >>> (10 & 1023) | 55296);
                reference = 56320 | reference & 1023;
              }
              reference = output + fromCharCode(reference);
            }
          }
          if (reference) {
            flush();
            prev = now();
            index2 = end - 1;
            column += end - start + 1;
            result.push(reference);
            next = now();
            next.offset++;
            if (handleReference) {
              handleReference.call(referenceContext, reference, { start: prev, end: next }, value.slice(start - 1, end));
            }
            prev = next;
          } else {
            characters = value.slice(start - 1, end);
            queue += characters;
            column += characters.length;
            index2 = end - 1;
          }
        } else {
          if (character === 10) {
            line++;
            lines++;
            column = 0;
          }
          if (character === character) {
            queue += fromCharCode(character);
            column++;
          } else {
            flush();
          }
        }
      }
      return result.join("");
      function now() {
        return { line, column, offset: index2 + (pos.offset || 0) };
      }
      function parseError(code, offset2) {
        var position = now();
        position.column += offset2;
        position.offset += offset2;
        handleWarning.call(warningContext, messages[code], position, code);
      }
      function flush() {
        if (queue) {
          result.push(queue);
          if (handleText) {
            handleText.call(textContext, queue, { start: prev, end: now() });
          }
          queue = "";
        }
      }
    }
    function prohibited(code) {
      return code >= 55296 && code <= 57343 || code > 1114111;
    }
    function disallowed(code) {
      return code >= 1 && code <= 8 || code === 11 || code >= 13 && code <= 31 || code >= 127 && code <= 159 || code >= 64976 && code <= 65007 || (code & 65535) === 65535 || (code & 65535) === 65534;
    }
    var prismCore = { exports: {} };
    (function(module3) {
      var _self = typeof window !== "undefined" ? window : typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope ? self : {};
      var Prism2 = function(_self2) {
        var lang2 = /(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i;
        var uniqueId = 0;
        var plainTextGrammar = {};
        var _2 = {
          /**
          * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the
          * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load
          * additional languages or plugins yourself.
          *
          * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.
          *
          * You obviously have to change this value before the automatic highlighting started. To do this, you can add an
          * empty Prism object into the global scope before loading the Prism script like this:
          *
          * ```js
          * window.Prism = window.Prism || {};
          * Prism.manual = true;
          * // add a new <script> to load Prism's script
          * ```
          *
          * @default false
          * @type {boolean}
          * @memberof Prism
          * @public
          */
          manual: _self2.Prism && _self2.Prism.manual,
          /**
          * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses
          * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your
          * own worker, you don't want it to do this.
          *
          * By setting this value to `true`, Prism will not add its own listeners to the worker.
          *
          * You obviously have to change this value before Prism executes. To do this, you can add an
          * empty Prism object into the global scope before loading the Prism script like this:
          *
          * ```js
          * window.Prism = window.Prism || {};
          * Prism.disableWorkerMessageHandler = true;
          * // Load Prism's script
          * ```
          *
          * @default false
          * @type {boolean}
          * @memberof Prism
          * @public
          */
          disableWorkerMessageHandler: _self2.Prism && _self2.Prism.disableWorkerMessageHandler,
          /**
          * A namespace for utility methods.
          *
          * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may
          * change or disappear at any time.
          *
          * @namespace
          * @memberof Prism
          */
          util: {
            encode: function encode2(tokens) {
              if (tokens instanceof Token) {
                return new Token(tokens.type, encode2(tokens.content), tokens.alias);
              } else if (Array.isArray(tokens)) {
                return tokens.map(encode2);
              } else {
                return tokens.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ");
              }
            },
            /**
            * Returns the name of the type of the given value.
            *
            * @param {any} o
            * @returns {string}
            * @example
            * type(null)      === 'Null'
            * type(undefined) === 'Undefined'
            * type(123)       === 'Number'
            * type('foo')     === 'String'
            * type(true)      === 'Boolean'
            * type([1, 2])    === 'Array'
            * type({})        === 'Object'
            * type(String)    === 'Function'
            * type(/abc+/)    === 'RegExp'
            */
            type: function(o) {
              return Object.prototype.toString.call(o).slice(8, -1);
            },
            /**
            * Returns a unique number for the given object. Later calls will still return the same number.
            *
            * @param {Object} obj
            * @returns {number}
            */
            objId: function(obj) {
              if (!obj["__id"]) {
                Object.defineProperty(obj, "__id", { value: ++uniqueId });
              }
              return obj["__id"];
            },
            /**
            * Creates a deep clone of the given object.
            *
            * The main intended use of this function is to clone language definitions.
            *
            * @param {T} o
            * @param {Record<number, any>} [visited]
            * @returns {T}
            * @template T
            */
            clone: function deepClone(o, visited) {
              visited = visited || {};
              var clone;
              var id;
              switch (_2.util.type(o)) {
                case "Object":
                  id = _2.util.objId(o);
                  if (visited[id]) {
                    return visited[id];
                  }
                  clone = /** @type {Record<string, any>} */
                  {};
                  visited[id] = clone;
                  for (var key2 in o) {
                    if (o.hasOwnProperty(key2)) {
                      clone[key2] = deepClone(o[key2], visited);
                    }
                  }
                  return (
                    /** @type {any} */
                    clone
                  );
                case "Array":
                  id = _2.util.objId(o);
                  if (visited[id]) {
                    return visited[id];
                  }
                  clone = [];
                  visited[id] = clone;
                  o.forEach(function(v2, i) {
                    clone[i] = deepClone(v2, visited);
                  });
                  return (
                    /** @type {any} */
                    clone
                  );
                default:
                  return o;
              }
            },
            /**
            * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.
            *
            * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.
            *
            * @param {Element} element
            * @returns {string}
            */
            getLanguage: function(element) {
              while (element) {
                var m2 = lang2.exec(element.className);
                if (m2) {
                  return m2[1].toLowerCase();
                }
                element = element.parentElement;
              }
              return "none";
            },
            /**
            * Sets the Prism `language-xxxx` class of the given element.
            *
            * @param {Element} element
            * @param {string} language
            * @returns {void}
            */
            setLanguage: function(element, language) {
              element.className = element.className.replace(RegExp(lang2, "gi"), "");
              element.classList.add("language-" + language);
            },
            /**
            * Returns the script element that is currently executing.
            *
            * This does __not__ work for line script element.
            *
            * @returns {HTMLScriptElement | null}
            */
            currentScript: function() {
              if (typeof document === "undefined") {
                return null;
              }
              if ("currentScript" in document && 1 < 2) {
                return (
                  /** @type {any} */
                  document.currentScript
                );
              }
              try {
                throw new Error();
              } catch (err) {
                var src = (/at [^(\r\n]*\((.*):[^:]+:[^:]+\)$/i.exec(err.stack) || [])[1];
                if (src) {
                  var scripts = document.getElementsByTagName("script");
                  for (var i in scripts) {
                    if (scripts[i].src == src) {
                      return scripts[i];
                    }
                  }
                }
                return null;
              }
            },
            /**
            * Returns whether a given class is active for `element`.
            *
            * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated
            * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the
            * given class is just the given class with a `no-` prefix.
            *
            * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is
            * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its
            * ancestors have the given class or the negated version of it, then the default activation will be returned.
            *
            * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated
            * version of it, the class is considered active.
            *
            * @param {Element} element
            * @param {string} className
            * @param {boolean} [defaultActivation=false]
            * @returns {boolean}
            */
            isActive: function(element, className, defaultActivation) {
              var no2 = "no-" + className;
              while (element) {
                var classList = element.classList;
                if (classList.contains(className)) {
                  return true;
                }
                if (classList.contains(no2)) {
                  return false;
                }
                element = element.parentElement;
              }
              return !!defaultActivation;
            }
          },
          /**
          * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.
          *
          * @namespace
          * @memberof Prism
          * @public
          */
          languages: {
            /**
            * The grammar for plain, unformatted text.
            */
            plain: plainTextGrammar,
            plaintext: plainTextGrammar,
            text: plainTextGrammar,
            txt: plainTextGrammar,
            /**
            * Creates a deep copy of the language with the given id and appends the given tokens.
            *
            * If a token in `redef` also appears in the copied language, then the existing token in the copied language
            * will be overwritten at its original position.
            *
            * ## Best practices
            *
            * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)
            * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to
            * understand the language definition because, normally, the order of tokens matters in Prism grammars.
            *
            * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.
            * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.
            *
            * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.
            * @param {Grammar} redef The new tokens to append.
            * @returns {Grammar} The new language created.
            * @public
            * @example
            * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {
            *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token
            *     // at its original position
            *     'comment': { ... },
            *     // CSS doesn't have a 'color' token, so this token will be appended
            *     'color': /\b(?:red|green|blue)\b/
            * });
            */
            extend: function(id, redef) {
              var lang3 = _2.util.clone(_2.languages[id]);
              for (var key2 in redef) {
                lang3[key2] = redef[key2];
              }
              return lang3;
            },
            /**
            * Inserts tokens _before_ another token in a language definition or any other grammar.
            *
            * ## Usage
            *
            * This helper method makes it easy to modify existing languages. For example, the CSS language definition
            * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded
            * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the
            * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do
            * this:
            *
            * ```js
            * Prism.languages.markup.style = {
            *     // token
            * };
            * ```
            *
            * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens
            * before existing tokens. For the CSS example above, you would use it like this:
            *
            * ```js
            * Prism.languages.insertBefore('markup', 'cdata', {
            *     'style': {
            *         // token
            *     }
            * });
            * ```
            *
            * ## Special cases
            *
            * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar
            * will be ignored.
            *
            * This behavior can be used to insert tokens after `before`:
            *
            * ```js
            * Prism.languages.insertBefore('markup', 'comment', {
            *     'comment': Prism.languages.markup.comment,
            *     // tokens after 'comment'
            * });
            * ```
            *
            * ## Limitations
            *
            * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object
            * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave
            * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily
            * deleting properties which is necessary to insert at arbitrary positions.
            *
            * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.
            * Instead, it will create a new object and replace all references to the target object with the new one. This
            * can be done without temporarily deleting properties, so the iteration order is well-defined.
            *
            * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if
            * you hold the target object in a variable, then the value of the variable will not change.
            *
            * ```js
            * var oldMarkup = Prism.languages.markup;
            * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });
            *
            * assert(oldMarkup !== Prism.languages.markup);
            * assert(newMarkup === Prism.languages.markup);
            * ```
            *
            * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the
            * object to be modified.
            * @param {string} before The key to insert before.
            * @param {Grammar} insert An object containing the key-value pairs to be inserted.
            * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the
            * object to be modified.
            *
            * Defaults to `Prism.languages`.
            * @returns {Grammar} The new grammar object.
            * @public
            */
            insertBefore: function(inside, before, insert, root) {
              root = root || /** @type {any} */
              _2.languages;
              var grammar = root[inside];
              var ret = {};
              for (var token in grammar) {
                if (grammar.hasOwnProperty(token)) {
                  if (token == before) {
                    for (var newToken in insert) {
                      if (insert.hasOwnProperty(newToken)) {
                        ret[newToken] = insert[newToken];
                      }
                    }
                  }
                  if (!insert.hasOwnProperty(token)) {
                    ret[token] = grammar[token];
                  }
                }
              }
              var old = root[inside];
              root[inside] = ret;
              _2.languages.DFS(_2.languages, function(key2, value) {
                if (value === old && key2 != inside) {
                  this[key2] = ret;
                }
              });
              return ret;
            },
            // Traverse a language definition with Depth First Search
            DFS: function DFS(o, callback, type, visited) {
              visited = visited || {};
              var objId = _2.util.objId;
              for (var i in o) {
                if (o.hasOwnProperty(i)) {
                  callback.call(o, i, o[i], type || i);
                  var property = o[i];
                  var propertyType = _2.util.type(property);
                  if (propertyType === "Object" && !visited[objId(property)]) {
                    visited[objId(property)] = true;
                    DFS(property, callback, null, visited);
                  } else if (propertyType === "Array" && !visited[objId(property)]) {
                    visited[objId(property)] = true;
                    DFS(property, callback, i, visited);
                  }
                }
              }
            }
          },
          plugins: {},
          /**
          * This is the most high-level function in Prism’s API.
          * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on
          * each one of them.
          *
          * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.
          *
          * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.
          * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.
          * @memberof Prism
          * @public
          */
          highlightAll: function(async, callback) {
            _2.highlightAllUnder(document, async, callback);
          },
          /**
          * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls
          * {@link Prism.highlightElement} on each one of them.
          *
          * The following hooks will be run:
          * 1. `before-highlightall`
          * 2. `before-all-elements-highlight`
          * 3. All hooks of {@link Prism.highlightElement} for each element.
          *
          * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.
          * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.
          * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.
          * @memberof Prism
          * @public
          */
          highlightAllUnder: function(container, async, callback) {
            var env = { callback, container, selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code' };
            _2.hooks.run("before-highlightall", env);
            env.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));
            _2.hooks.run("before-all-elements-highlight", env);
            for (var i = 0, element; element = env.elements[i++]; ) {
              _2.highlightElement(element, async === true, env.callback);
            }
          },
          /**
          * Highlights the code inside a single element.
          *
          * The following hooks will be run:
          * 1. `before-sanity-check`
          * 2. `before-highlight`
          * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.
          * 4. `before-insert`
          * 5. `after-highlight`
          * 6. `complete`
          *
          * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for
          * the element's language.
          *
          * @param {Element} element The element containing the code.
          * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.
          * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers
          * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is
          * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).
          *
          * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for
          * asynchronous highlighting to work. You can build your own bundle on the
          * [Download page](https://prismjs.com/download.html).
          * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.
          * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.
          * @memberof Prism
          * @public
          */
          highlightElement: function(element, async, callback) {
            var language = _2.util.getLanguage(element);
            var grammar = _2.languages[language];
            _2.util.setLanguage(element, language);
            var parent = element.parentElement;
            if (parent && parent.nodeName.toLowerCase() === "pre") {
              _2.util.setLanguage(parent, language);
            }
            var code = element.textContent;
            var env = { element, language, grammar, code };
            function insertHighlightedCode(highlightedCode) {
              env.highlightedCode = highlightedCode;
              _2.hooks.run("before-insert", env);
              env.element.innerHTML = env.highlightedCode;
              _2.hooks.run("after-highlight", env);
              _2.hooks.run("complete", env);
              callback && callback.call(env.element);
            }
            _2.hooks.run("before-sanity-check", env);
            parent = env.element.parentElement;
            if (parent && parent.nodeName.toLowerCase() === "pre" && !parent.hasAttribute("tabindex")) {
              parent.setAttribute("tabindex", "0");
            }
            if (!env.code) {
              _2.hooks.run("complete", env);
              callback && callback.call(env.element);
              return;
            }
            _2.hooks.run("before-highlight", env);
            if (!env.grammar) {
              insertHighlightedCode(_2.util.encode(env.code));
              return;
            }
            if (async && _self2.Worker) {
              var worker = new Worker(_2.filename);
              worker.onmessage = function(evt) {
                insertHighlightedCode(evt.data);
              };
              worker.postMessage(JSON.stringify({ language: env.language, code: env.code, immediateClose: true }));
            } else {
              insertHighlightedCode(_2.highlight(env.code, env.grammar, env.language));
            }
          },
          /**
          * Low-level function, only use if you know what you’re doing. It accepts a string of text as input
          * and the language definitions to use, and returns a string with the HTML produced.
          *
          * The following hooks will be run:
          * 1. `before-tokenize`
          * 2. `after-tokenize`
          * 3. `wrap`: On each {@link Token}.
          *
          * @param {string} text A string with the code to be highlighted.
          * @param {Grammar} grammar An object containing the tokens to use.
          *
          * Usually a language definition like `Prism.languages.markup`.
          * @param {string} language The name of the language definition passed to `grammar`.
          * @returns {string} The highlighted HTML.
          * @memberof Prism
          * @public
          * @example
          * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');
          */
          highlight: function(text, grammar, language) {
            var env = { code: text, grammar, language };
            _2.hooks.run("before-tokenize", env);
            if (!env.grammar) {
              throw new Error('The language "' + env.language + '" has no grammar.');
            }
            env.tokens = _2.tokenize(env.code, env.grammar);
            _2.hooks.run("after-tokenize", env);
            return Token.stringify(_2.util.encode(env.tokens), env.language);
          },
          /**
          * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input
          * and the language definitions to use, and returns an array with the tokenized code.
          *
          * When the language definition includes nested tokens, the function is called recursively on each of these tokens.
          *
          * This method could be useful in other contexts as well, as a very crude parser.
          *
          * @param {string} text A string with the code to be highlighted.
          * @param {Grammar} grammar An object containing the tokens to use.
          *
          * Usually a language definition like `Prism.languages.markup`.
          * @returns {TokenStream} An array of strings and tokens, a token stream.
          * @memberof Prism
          * @public
          * @example
          * let code = `var foo = 0;`;
          * let tokens = Prism.tokenize(code, Prism.languages.javascript);
          * tokens.forEach(token => {
          *     if (token instanceof Prism.Token && token.type === 'number') {
          *         console.log(`Found numeric literal: ${token.content}`);
          *     }
          * });
          */
          tokenize: function(text, grammar) {
            var rest = grammar.rest;
            if (rest) {
              for (var token in rest) {
                grammar[token] = rest[token];
              }
              delete grammar.rest;
            }
            var tokenList = new LinkedList();
            addAfter(tokenList, tokenList.head, text);
            matchGrammar(text, tokenList, grammar, tokenList.head, 0);
            return toArray(tokenList);
          },
          /**
          * @namespace
          * @memberof Prism
          * @public
          */
          hooks: {
            all: {},
            /**
            * Adds the given callback to the list of callbacks for the given hook.
            *
            * The callback will be invoked when the hook it is registered for is run.
            * Hooks are usually directly run by a highlight function but you can also run hooks yourself.
            *
            * One callback function can be registered to multiple hooks and the same hook multiple times.
            *
            * @param {string} name The name of the hook.
            * @param {HookCallback} callback The callback function which is given environment variables.
            * @public
            */
            add: function(name2, callback) {
              var hooks = _2.hooks.all;
              hooks[name2] = hooks[name2] || [];
              hooks[name2].push(callback);
            },
            /**
            * Runs a hook invoking all registered callbacks with the given environment variables.
            *
            * Callbacks will be invoked synchronously and in the order in which they were registered.
            *
            * @param {string} name The name of the hook.
            * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.
            * @public
            */
            run: function(name2, env) {
              var callbacks2 = _2.hooks.all[name2];
              if (!callbacks2 || !callbacks2.length) {
                return;
              }
              for (var i = 0, callback; callback = callbacks2[i++]; ) {
                callback(env);
              }
            }
          },
          Token
        };
        _self2.Prism = _2;
        function Token(type, content, alias2, matchedStr) {
          this.type = type;
          this.content = content;
          this.alias = alias2;
          this.length = (matchedStr || "").length | 0;
        }
        Token.stringify = function stringify2(o, language) {
          if (typeof o == "string") {
            return o;
          }
          if (Array.isArray(o)) {
            var s = "";
            o.forEach(function(e) {
              s += stringify2(e, language);
            });
            return s;
          }
          var env = { type: o.type, content: stringify2(o.content, language), tag: "span", classes: ["token", o.type], attributes: {}, language };
          var aliases = o.alias;
          if (aliases) {
            if (Array.isArray(aliases)) {
              Array.prototype.push.apply(env.classes, aliases);
            } else {
              env.classes.push(aliases);
            }
          }
          _2.hooks.run("wrap", env);
          var attributes2 = "";
          for (var name2 in env.attributes) {
            attributes2 += " " + name2 + '="' + (env.attributes[name2] || "").replace(/"/g, "&quot;") + '"';
          }
          return "<" + env.tag + ' class="' + env.classes.join(" ") + '"' + attributes2 + ">" + env.content + "</" + env.tag + ">";
        };
        function matchPattern(pattern, pos, text, lookbehind) {
          pattern.lastIndex = pos;
          var match = pattern.exec(text);
          if (match && lookbehind && match[1]) {
            var lookbehindLength = match[1].length;
            match.index += lookbehindLength;
            match[0] = match[0].slice(lookbehindLength);
          }
          return match;
        }
        function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {
          for (var token in grammar) {
            if (!grammar.hasOwnProperty(token) || !grammar[token]) {
              continue;
            }
            var patterns = grammar[token];
            patterns = Array.isArray(patterns) ? patterns : [patterns];
            for (var j2 = 0; j2 < patterns.length; ++j2) {
              if (rematch && rematch.cause == token + "," + j2) {
                return;
              }
              var patternObj = patterns[j2];
              var inside = patternObj.inside;
              var lookbehind = !!patternObj.lookbehind;
              var greedy = !!patternObj.greedy;
              var alias2 = patternObj.alias;
              if (greedy && !patternObj.pattern.global) {
                var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];
                patternObj.pattern = RegExp(patternObj.pattern.source, flags + "g");
              }
              var pattern = patternObj.pattern || patternObj;
              for (var currentNode = startNode.next, pos = startPos; currentNode !== tokenList.tail; pos += currentNode.value.length, currentNode = currentNode.next) {
                if (rematch && pos >= rematch.reach) {
                  break;
                }
                var str = currentNode.value;
                if (tokenList.length > text.length) {
                  return;
                }
                if (str instanceof Token) {
                  continue;
                }
                var removeCount = 1;
                var match;
                if (greedy) {
                  match = matchPattern(pattern, pos, text, lookbehind);
                  if (!match || match.index >= text.length) {
                    break;
                  }
                  var from = match.index;
                  var to = match.index + match[0].length;
                  var p = pos;
                  p += currentNode.value.length;
                  while (from >= p) {
                    currentNode = currentNode.next;
                    p += currentNode.value.length;
                  }
                  p -= currentNode.value.length;
                  pos = p;
                  if (currentNode.value instanceof Token) {
                    continue;
                  }
                  for (var k2 = currentNode; k2 !== tokenList.tail && (p < to || typeof k2.value === "string"); k2 = k2.next) {
                    removeCount++;
                    p += k2.value.length;
                  }
                  removeCount--;
                  str = text.slice(pos, p);
                  match.index -= pos;
                } else {
                  match = matchPattern(pattern, 0, str, lookbehind);
                  if (!match) {
                    continue;
                  }
                }
                var from = match.index;
                var matchStr = match[0];
                var before = str.slice(0, from);
                var after = str.slice(from + matchStr.length);
                var reach = pos + str.length;
                if (rematch && reach > rematch.reach) {
                  rematch.reach = reach;
                }
                var removeFrom = currentNode.prev;
                if (before) {
                  removeFrom = addAfter(tokenList, removeFrom, before);
                  pos += before.length;
                }
                removeRange(tokenList, removeFrom, removeCount);
                var wrapped = new Token(token, inside ? _2.tokenize(matchStr, inside) : matchStr, alias2, matchStr);
                currentNode = addAfter(tokenList, removeFrom, wrapped);
                if (after) {
                  addAfter(tokenList, currentNode, after);
                }
                if (removeCount > 1) {
                  var nestedRematch = { cause: token + "," + j2, reach };
                  matchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);
                  if (rematch && nestedRematch.reach > rematch.reach) {
                    rematch.reach = nestedRematch.reach;
                  }
                }
              }
            }
          }
        }
        function LinkedList() {
          var head = { value: null, prev: null, next: null };
          var tail = { value: null, prev: head, next: null };
          head.next = tail;
          this.head = head;
          this.tail = tail;
          this.length = 0;
        }
        function addAfter(list, node, value) {
          var next = node.next;
          var newNode = { value, prev: node, next };
          node.next = newNode;
          next.prev = newNode;
          list.length++;
          return newNode;
        }
        function removeRange(list, node, count) {
          var next = node.next;
          for (var i = 0; i < count && next !== list.tail; i++) {
            next = next.next;
          }
          node.next = next;
          next.prev = node;
          list.length -= i;
        }
        function toArray(list) {
          var array = [];
          var node = list.head.next;
          while (node !== list.tail) {
            array.push(node.value);
            node = node.next;
          }
          return array;
        }
        if (!_self2.document) {
          if (!_self2.addEventListener) {
            return _2;
          }
          if (!_2.disableWorkerMessageHandler) {
            _self2.addEventListener("message", function(evt) {
              var message = JSON.parse(evt.data);
              var lang3 = message.language;
              var code = message.code;
              var immediateClose = message.immediateClose;
              _self2.postMessage(_2.highlight(code, _2.languages[lang3], lang3));
              if (immediateClose) {
                _self2.close();
              }
            }, false);
          }
          return _2;
        }
        var script = _2.util.currentScript();
        if (script) {
          _2.filename = script.src;
          if (script.hasAttribute("data-manual")) {
            _2.manual = true;
          }
        }
        function highlightAutomaticallyCallback() {
          if (!_2.manual) {
            _2.highlightAll();
          }
        }
        if (!_2.manual) {
          var readyState = document.readyState;
          if (readyState === "loading" || readyState === "interactive" && script && script.defer) {
            document.addEventListener("DOMContentLoaded", highlightAutomaticallyCallback);
          } else {
            if (window.requestAnimationFrame) {
              window.requestAnimationFrame(highlightAutomaticallyCallback);
            } else {
              window.setTimeout(highlightAutomaticallyCallback, 16);
            }
          }
        }
        return _2;
      }(_self);
      if (module3.exports) {
        module3.exports = Prism2;
      }
      if (typeof commonjsGlobal !== "undefined") {
        commonjsGlobal.Prism = Prism2;
      }
    })(prismCore);
    var prismCoreExports = prismCore.exports;
    var markup_1 = markup$1;
    markup$1.displayName = "markup";
    markup$1.aliases = ["html", "mathml", "svg", "xml", "ssml", "atom", "rss"];
    function markup$1(Prism2) {
      Prism2.languages.markup = { comment: { pattern: /<!--(?:(?!<!--)[\s\S])*?-->/, greedy: true }, prolog: { pattern: /<\?[\s\S]+?\?>/, greedy: true }, doctype: {
        // https://www.w3.org/TR/xml/#NT-doctypedecl
        pattern: /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,
        greedy: true,
        inside: { "internal-subset": {
          pattern: /(^[^\[]*\[)[\s\S]+(?=\]>$)/,
          lookbehind: true,
          greedy: true,
          inside: null
          // see below
        }, string: { pattern: /"[^"]*"|'[^']*'/, greedy: true }, punctuation: /^<!|>$|[[\]]/, "doctype-tag": /^DOCTYPE/i, name: /[^\s<>'"]+/ }
      }, cdata: { pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i, greedy: true }, tag: { pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/, greedy: true, inside: { tag: { pattern: /^<\/?[^\s>\/]+/, inside: { punctuation: /^<\/?/, namespace: /^[^\s>\/:]+:/ } }, "special-attr": [], "attr-value": { pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/, inside: { punctuation: [{ pattern: /^=/, alias: "attr-equals" }, /"|'/] } }, punctuation: /\/?>/, "attr-name": { pattern: /[^\s>\/]+/, inside: { namespace: /^[^\s>\/:]+:/ } } } }, entity: [{ pattern: /&[\da-z]{1,8};/i, alias: "named-entity" }, /&#x?[\da-f]{1,8};/i] };
      Prism2.languages.markup["tag"].inside["attr-value"].inside["entity"] = Prism2.languages.markup["entity"];
      Prism2.languages.markup["doctype"].inside["internal-subset"].inside = Prism2.languages.markup;
      Prism2.hooks.add("wrap", function(env) {
        if (env.type === "entity") {
          env.attributes["title"] = env.content.value.replace(/&amp;/, "&");
        }
      });
      Object.defineProperty(Prism2.languages.markup.tag, "addInlined", {
        /**
        * Adds an inlined language to markup.
        *
        * An example of an inlined language is CSS with `<style>` tags.
        *
        * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as
        * case insensitive.
        * @param {string} lang The language key.
        * @example
        * addInlined('style', 'css');
        */
        value: function addInlined(tagName, lang2) {
          var includedCdataInside = {};
          includedCdataInside["language-" + lang2] = { pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i, lookbehind: true, inside: Prism2.languages[lang2] };
          includedCdataInside["cdata"] = /^<!\[CDATA\[|\]\]>$/i;
          var inside = { "included-cdata": { pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i, inside: includedCdataInside } };
          inside["language-" + lang2] = { pattern: /[\s\S]+/, inside: Prism2.languages[lang2] };
          var def = {};
          def[tagName] = { pattern: RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g, function() {
            return tagName;
          }), "i"), lookbehind: true, greedy: true, inside };
          Prism2.languages.insertBefore("markup", "cdata", def);
        }
      });
      Object.defineProperty(Prism2.languages.markup.tag, "addAttribute", {
        /**
        * Adds an pattern to highlight languages embedded in HTML attributes.
        *
        * An example of an inlined language is CSS with `style` attributes.
        *
        * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as
        * case insensitive.
        * @param {string} lang The language key.
        * @example
        * addAttribute('style', 'css');
        */
        value: function(attrName, lang2) {
          Prism2.languages.markup.tag.inside["special-attr"].push({ pattern: RegExp(/(^|["'\s])/.source + "(?:" + attrName + ")" + /\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source, "i"), lookbehind: true, inside: { "attr-name": /^[^\s=]+/, "attr-value": { pattern: /=[\s\S]+/, inside: { value: { pattern: /(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/, lookbehind: true, alias: [lang2, "language-" + lang2], inside: Prism2.languages[lang2] }, punctuation: [{ pattern: /^=/, alias: "attr-equals" }, /"|'/] } } } });
        }
      });
      Prism2.languages.html = Prism2.languages.markup;
      Prism2.languages.mathml = Prism2.languages.markup;
      Prism2.languages.svg = Prism2.languages.markup;
      Prism2.languages.xml = Prism2.languages.extend("markup", {});
      Prism2.languages.ssml = Prism2.languages.xml;
      Prism2.languages.atom = Prism2.languages.xml;
      Prism2.languages.rss = Prism2.languages.xml;
    }
    var css_1 = css$1;
    css$1.displayName = "css";
    css$1.aliases = [];
    function css$1(Prism2) {
      (function(Prism3) {
        var string = /(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;
        Prism3.languages.css = { comment: /\/\*[\s\S]*?\*\//, atrule: { pattern: /@[\w-](?:[^;{\s]|\s+(?![\s{]))*(?:;|(?=\s*\{))/, inside: {
          rule: /^@[\w-]+/,
          "selector-function-argument": { pattern: /(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/, lookbehind: true, alias: "selector" },
          keyword: { pattern: /(^|[^\w-])(?:and|not|only|or)(?![\w-])/, lookbehind: true }
          // See rest below
        } }, url: {
          // https://drafts.csswg.org/css-values-3/#urls
          pattern: RegExp("\\burl\\((?:" + string.source + "|" + /(?:[^\\\r\n()"']|\\[\s\S])*/.source + ")\\)", "i"),
          greedy: true,
          inside: { function: /^url/i, punctuation: /^\(|\)$/, string: { pattern: RegExp("^" + string.source + "$"), alias: "url" } }
        }, selector: { pattern: RegExp(`(^|[{}\\s])[^{}\\s](?:[^{};"'\\s]|\\s+(?![\\s{])|` + string.source + ")*(?=\\s*\\{)"), lookbehind: true }, string: { pattern: string, greedy: true }, property: { pattern: /(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i, lookbehind: true }, important: /!important\b/i, function: { pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i, lookbehind: true }, punctuation: /[(){};:,]/ };
        Prism3.languages.css["atrule"].inside.rest = Prism3.languages.css;
        var markup2 = Prism3.languages.markup;
        if (markup2) {
          markup2.tag.addInlined("style", "css");
          markup2.tag.addAttribute("style", "css");
        }
      })(Prism2);
    }
    var clike_1 = clike$1;
    clike$1.displayName = "clike";
    clike$1.aliases = [];
    function clike$1(Prism2) {
      Prism2.languages.clike = { comment: [{ pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/, lookbehind: true, greedy: true }, { pattern: /(^|[^\\:])\/\/.*/, lookbehind: true, greedy: true }], string: { pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/, greedy: true }, "class-name": { pattern: /(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i, lookbehind: true, inside: { punctuation: /[.\\]/ } }, keyword: /\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/, boolean: /\b(?:false|true)\b/, function: /\b\w+(?=\()/, number: /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i, operator: /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/, punctuation: /[{}[\];(),.:]/ };
    }
    var javascript_1 = javascript;
    javascript.displayName = "javascript";
    javascript.aliases = ["js"];
    function javascript(Prism2) {
      Prism2.languages.javascript = Prism2.languages.extend("clike", {
        "class-name": [Prism2.languages.clike["class-name"], { pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/, lookbehind: true }],
        keyword: [{ pattern: /((?:^|\})\s*)catch\b/, lookbehind: true }, { pattern: /(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/, lookbehind: true }],
        // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)
        function: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
        number: { pattern: RegExp(/(^|[^\w$])/.source + "(?:" + // constant
        (/NaN|Infinity/.source + "|" + // binary integer
        /0[bB][01]+(?:_[01]+)*n?/.source + "|" + // octal integer
        /0[oO][0-7]+(?:_[0-7]+)*n?/.source + "|" + // hexadecimal integer
        /0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source + "|" + // decimal bigint
        /\d+(?:_\d+)*n/.source + "|" + // decimal number (integer or float) but no bigint
        /(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source) + ")" + /(?![\w$])/.source), lookbehind: true },
        operator: /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/
      });
      Prism2.languages.javascript["class-name"][0].pattern = /(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/;
      Prism2.languages.insertBefore("javascript", "keyword", {
        regex: {
          // eslint-disable-next-line regexp/no-dupe-characters-character-class
          pattern: /((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)\/(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/,
          lookbehind: true,
          greedy: true,
          inside: { "regex-source": { pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/, lookbehind: true, alias: "language-regex", inside: Prism2.languages.regex }, "regex-delimiter": /^\/|\/$/, "regex-flags": /^[a-z]+$/ }
        },
        // This must be declared before keyword because we use "function" inside the look-forward
        "function-variable": { pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/, alias: "function" },
        parameter: [{ pattern: /(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/, lookbehind: true, inside: Prism2.languages.javascript }, { pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i, lookbehind: true, inside: Prism2.languages.javascript }, { pattern: /(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/, lookbehind: true, inside: Prism2.languages.javascript }, { pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/, lookbehind: true, inside: Prism2.languages.javascript }],
        constant: /\b[A-Z](?:[A-Z_]|\dx?)*\b/
      });
      Prism2.languages.insertBefore("javascript", "string", { hashbang: { pattern: /^#!.*/, greedy: true, alias: "comment" }, "template-string": { pattern: /`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/, greedy: true, inside: { "template-punctuation": { pattern: /^`|`$/, alias: "string" }, interpolation: { pattern: /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/, lookbehind: true, inside: { "interpolation-punctuation": { pattern: /^\$\{|\}$/, alias: "punctuation" }, rest: Prism2.languages.javascript } }, string: /[\s\S]+/ } }, "string-property": { pattern: /((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m, lookbehind: true, greedy: true, alias: "property" } });
      Prism2.languages.insertBefore("javascript", "operator", { "literal-property": { pattern: /((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m, lookbehind: true, alias: "property" } });
      if (Prism2.languages.markup) {
        Prism2.languages.markup.tag.addInlined("script", "javascript");
        Prism2.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, "javascript");
      }
      Prism2.languages.js = Prism2.languages.javascript;
    }
    var ctx = typeof globalThis === "object" ? globalThis : typeof self === "object" ? self : typeof window === "object" ? window : typeof commonjsGlobal === "object" ? commonjsGlobal : {};
    var restore = capture();
    ctx.Prism = { manual: true, disableWorkerMessageHandler: true };
    var h$1 = hastscript;
    var decode = parseEntities_1;
    var Prism = prismCoreExports;
    var markup = markup_1;
    var css = css_1;
    var clike = clike_1;
    var js = javascript_1;
    restore();
    var own$1 = {}.hasOwnProperty;
    function Refractor$2() {
    }
    Refractor$2.prototype = Prism;
    var refract = new Refractor$2();
    var core = refract;
    refract.highlight = highlight;
    refract.register = register;
    refract.alias = alias;
    refract.registered = registered;
    refract.listLanguages = listLanguages;
    register(markup);
    register(css);
    register(clike);
    register(js);
    refract.util.encode = encode;
    refract.Token.stringify = stringify;
    function register(grammar) {
      if (typeof grammar !== "function" || !grammar.displayName) {
        throw new Error("Expected `function` for `grammar`, got `" + grammar + "`");
      }
      if (refract.languages[grammar.displayName] === void 0) {
        grammar(refract);
      }
    }
    function alias(name2, alias2) {
      var languages = refract.languages;
      var map2 = name2;
      var key2;
      var list;
      var length;
      var index2;
      if (alias2) {
        map2 = {};
        map2[name2] = alias2;
      }
      for (key2 in map2) {
        list = map2[key2];
        list = typeof list === "string" ? [list] : list;
        length = list.length;
        index2 = -1;
        while (++index2 < length) {
          languages[list[index2]] = languages[key2];
        }
      }
    }
    function highlight(value, name2) {
      var sup4 = Prism.highlight;
      var grammar;
      if (typeof value !== "string") {
        throw new Error("Expected `string` for `value`, got `" + value + "`");
      }
      if (refract.util.type(name2) === "Object") {
        grammar = name2;
        name2 = null;
      } else {
        if (typeof name2 !== "string") {
          throw new Error("Expected `string` for `name`, got `" + name2 + "`");
        }
        if (own$1.call(refract.languages, name2)) {
          grammar = refract.languages[name2];
        } else {
          throw new Error("Unknown language: `" + name2 + "` is not registered");
        }
      }
      return sup4.call(this, value, grammar, name2);
    }
    function registered(language) {
      if (typeof language !== "string") {
        throw new Error("Expected `string` for `language`, got `" + language + "`");
      }
      return own$1.call(refract.languages, language);
    }
    function listLanguages() {
      var languages = refract.languages;
      var list = [];
      var language;
      for (language in languages) {
        if (own$1.call(languages, language) && typeof languages[language] === "object") {
          list.push(language);
        }
      }
      return list;
    }
    function stringify(value, language, parent) {
      var env;
      if (typeof value === "string") {
        return { type: "text", value };
      }
      if (refract.util.type(value) === "Array") {
        return stringifyAll(value, language);
      }
      env = { type: value.type, content: refract.Token.stringify(value.content, language, parent), tag: "span", classes: ["token", value.type], attributes: {}, language, parent };
      if (value.alias) {
        env.classes = env.classes.concat(value.alias);
      }
      refract.hooks.run("wrap", env);
      return h$1(env.tag + "." + env.classes.join("."), attributes(env.attributes), env.content);
    }
    function stringifyAll(values, language) {
      var result = [];
      var length = values.length;
      var index2 = -1;
      var value;
      while (++index2 < length) {
        value = values[index2];
        if (value !== "" && value !== null && value !== void 0) {
          result.push(value);
        }
      }
      index2 = -1;
      length = result.length;
      while (++index2 < length) {
        value = result[index2];
        result[index2] = refract.Token.stringify(value, language, result);
      }
      return result;
    }
    function encode(tokens) {
      return tokens;
    }
    function attributes(attrs) {
      var key2;
      for (key2 in attrs) {
        attrs[key2] = decode(attrs[key2]);
      }
      return attrs;
    }
    function capture() {
      var defined = "Prism" in ctx;
      var current = defined ? ctx.Prism : void 0;
      return restore2;
      function restore2() {
        if (defined) {
          ctx.Prism = current;
        } else {
          delete ctx.Prism;
        }
        defined = void 0;
        current = void 0;
      }
    }
    var mapChildren$1 = {};
    var React$1 = React__namespace.default;
    function mapChild(child, i, depth) {
      if (child.tagName) {
        var className = child.properties && Array.isArray(child.properties.className) ? child.properties.className.join(" ") : child.properties.className;
        return React$1.createElement(child.tagName, Object.assign({ key: "fract-".concat(depth, "-").concat(i) }, child.properties, { className }), child.children && child.children.map(mapWithDepth(depth + 1)));
      }
      return child.value;
    }
    function mapWithDepth(depth) {
      return function mapChildrenWithDepth(child, i) {
        return mapChild(child, i, depth);
      };
    }
    mapChildren$1.depth = mapWithDepth;
    var convert_1 = convert$2;
    function convert$2(test) {
      if (test == null) {
        return ok;
      }
      if (typeof test === "string") {
        return typeFactory(test);
      }
      if (typeof test === "object") {
        return "length" in test ? anyFactory(test) : allFactory(test);
      }
      if (typeof test === "function") {
        return test;
      }
      throw new Error("Expected function, string, or object as test");
    }
    function allFactory(test) {
      return all;
      function all(node) {
        var key2;
        for (key2 in test) {
          if (node[key2] !== test[key2])
            return false;
        }
        return true;
      }
    }
    function anyFactory(tests2) {
      var checks2 = [];
      var index2 = -1;
      while (++index2 < tests2.length) {
        checks2[index2] = convert$2(tests2[index2]);
      }
      return any;
      function any() {
        var index3 = -1;
        while (++index3 < checks2.length) {
          if (checks2[index3].apply(this, arguments)) {
            return true;
          }
        }
        return false;
      }
    }
    function typeFactory(test) {
      return type;
      function type(node) {
        return Boolean(node && node.type === test);
      }
    }
    function ok() {
      return true;
    }
    var convert$1 = convert_1;
    var unistUtilFilter = filter$1;
    var own = {}.hasOwnProperty;
    function filter$1(tree, options, test) {
      var is = convert$1(test || options);
      var cascade = options.cascade == null ? true : options.cascade;
      return preorder(tree, null, null);
      function preorder(node, index2, parent) {
        var children;
        var childIndex;
        var result;
        var next;
        var key2;
        if (!is(node, index2, parent))
          return null;
        if (node.children) {
          children = [];
          childIndex = -1;
          while (++childIndex < node.children.length) {
            result = preorder(node.children[childIndex], childIndex, node);
            if (result) {
              children.push(result);
            }
          }
          if (cascade && node.children.length && !children.length)
            return null;
        }
        next = {};
        for (key2 in node) {
          if (own.call(node, key2)) {
            next[key2] = key2 === "children" ? children : node[key2];
          }
        }
        return next;
      }
    }
    var color_1 = color$2;
    function color$2(d) {
      return "\x1B[33m" + d + "\x1B[39m";
    }
    var unistUtilVisitParents = visitParents;
    var convert = convert_1;
    var color$1 = color_1;
    var CONTINUE = true;
    var SKIP = "skip";
    var EXIT = false;
    visitParents.CONTINUE = CONTINUE;
    visitParents.SKIP = SKIP;
    visitParents.EXIT = EXIT;
    function visitParents(tree, test, visitor, reverse) {
      var step;
      var is;
      if (typeof test === "function" && typeof visitor !== "function") {
        reverse = visitor;
        visitor = test;
        test = null;
      }
      is = convert(test);
      step = reverse ? -1 : 1;
      factory2(tree, null, [])();
      function factory2(node, index2, parents) {
        var value = typeof node === "object" && node !== null ? node : {};
        var name2;
        if (typeof value.type === "string") {
          name2 = typeof value.tagName === "string" ? value.tagName : typeof value.name === "string" ? value.name : void 0;
          visit2.displayName = "node (" + color$1(value.type + (name2 ? "<" + name2 + ">" : "")) + ")";
        }
        return visit2;
        function visit2() {
          var grandparents = parents.concat(node);
          var result = [];
          var subresult;
          var offset2;
          if (!test || is(node, index2, parents[parents.length - 1] || null)) {
            result = toResult(visitor(node, parents));
            if (result[0] === EXIT) {
              return result;
            }
          }
          if (node.children && result[0] !== SKIP) {
            offset2 = (reverse ? node.children.length : -1) + step;
            while (offset2 > -1 && offset2 < node.children.length) {
              subresult = factory2(node.children[offset2], offset2, grandparents)();
              if (subresult[0] === EXIT) {
                return subresult;
              }
              offset2 = typeof subresult[1] === "number" ? subresult[1] : offset2 + step;
            }
          }
          return result;
        }
      }
    }
    function toResult(value) {
      if (value !== null && typeof value === "object" && "length" in value) {
        return value;
      }
      if (typeof value === "number") {
        return [CONTINUE, value];
      }
      return [value];
    }
    var map = typeof WeakMap === "function" ? HappyMap : SadMap;
    function HappyMap() {
      this.map = /* @__PURE__ */ new WeakMap();
    }
    HappyMap.prototype.has = function(key2) {
      return this.map.has(key2);
    };
    HappyMap.prototype.set = function(key2, value) {
      this.map.set(key2, value);
      return this;
    };
    HappyMap.prototype.get = function(key2) {
      return this.map.get(key2);
    };
    HappyMap.prototype.clear = function() {
    };
    function SadMap() {
      this.keys = [];
      this.values = [];
    }
    SadMap.prototype.has = function(key2) {
      return this.keys.indexOf(key2) !== -1;
    };
    SadMap.prototype.set = function(key2, value) {
      var index2 = this.keys.indexOf(key2);
      if (index2 === -1) {
        this.keys.push(key2);
        this.values.push(value);
      } else {
        this.values[index2] = value;
      }
      return this;
    };
    SadMap.prototype.get = function(key2) {
      var index2 = this.keys.indexOf(key2);
      return index2 === -1 ? void 0 : this.values[index2];
    };
    SadMap.prototype.clear = function() {
      this.keys = [];
      this.values = [];
    };
    var filter = unistUtilFilter;
    var visit = unistUtilVisitParents;
    var NodeMap = map;
    function lineNumberify(ast2) {
      var context = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : { lineNumber: 1 };
      return ast2.reduce(function(result, node) {
        var lineStart = context.lineNumber;
        if (node.type === "text") {
          if (node.value.indexOf("\n") === -1) {
            node.lineStart = lineStart;
            node.lineEnd = lineStart;
            result.nodes.push(node);
            return result;
          }
          var lines = node.value.split("\n");
          for (var i = 0; i < lines.length; i++) {
            var lineNum = i === 0 ? context.lineNumber : ++context.lineNumber;
            result.nodes.push({ type: "text", value: i === lines.length - 1 ? lines[i] : "".concat(lines[i], "\n"), lineStart: lineNum, lineEnd: lineNum });
          }
          result.lineNumber = context.lineNumber;
          return result;
        }
        if (node.children) {
          var processed = lineNumberify(node.children, context);
          var firstChild = processed.nodes[0];
          var lastChild = processed.nodes[processed.nodes.length - 1];
          node.lineStart = firstChild ? firstChild.lineStart : lineStart;
          node.lineEnd = lastChild ? lastChild.lineEnd : lineStart;
          node.children = processed.nodes;
          result.lineNumber = processed.lineNumber;
          result.nodes.push(node);
          return result;
        }
        result.nodes.push(node);
        return result;
      }, { nodes: [], lineNumber: context.lineNumber });
    }
    function unwrapLine(markerLine, nodes) {
      var tree = { type: "root", children: nodes };
      var headMap = new NodeMap();
      var lineMap = new NodeMap();
      var tailMap = new NodeMap();
      var cloned = [];
      function addCopy(map2, node, ancestors) {
        cloned.push(node);
        ancestors.forEach(function(ancestor2) {
          if (!map2.has(ancestor2)) {
            map2.set(ancestor2, Object.assign({}, ancestor2, { children: [] }));
            if (ancestor2 !== tree) {
              cloned.push(ancestor2);
            }
          }
        });
        var i = ancestors.length;
        while (i--) {
          var ancestor = map2.get(ancestors[i]);
          var child = ancestors[i + 1];
          var leaf = map2.get(child) || node;
          if (ancestor.children.indexOf(leaf) === -1) {
            ancestor.children.push(leaf);
          }
        }
      }
      visit(tree, function(node, ancestors) {
        if (node.children) {
          return;
        }
        if (node.lineStart < markerLine) {
          addCopy(headMap, node, ancestors);
          return;
        }
        if (node.lineStart === markerLine) {
          addCopy(lineMap, node, ancestors);
          return;
        }
        if (node.lineEnd > markerLine && cloned.some(function(clone) {
          return ancestors.indexOf(clone) !== -1;
        })) {
          addCopy(tailMap, node, ancestors);
        }
      });
      var filtered = filter(tree, function(node) {
        return cloned.indexOf(node) === -1;
      });
      var getChildren = function getChildren2(map2) {
        var rootNode = map2.get(tree);
        if (!rootNode) {
          return [];
        }
        visit(rootNode, function(leaf, ancestors) {
          if (leaf.children) {
            leaf.lineStart = 0;
            leaf.lineEnd = 0;
            return;
          }
          ancestors.forEach(function(ancestor) {
            ancestor.lineStart = Math.max(ancestor.lineStart, leaf.lineStart);
            ancestor.lineEnd = Math.max(ancestor.lineEnd, leaf.lineEnd);
          });
        });
        return rootNode.children;
      };
      var merged = [].concat(getChildren(headMap), getChildren(lineMap), getChildren(tailMap), filtered ? filtered.children : []);
      headMap.clear();
      lineMap.clear();
      tailMap.clear();
      return merged;
    }
    function wrapBatch(children, marker2, options) {
      var className = marker2.className || "refractor-marker";
      return { type: "element", tagName: marker2.component || "div", properties: marker2.component ? Object.assign({}, options, { className }) : { className }, children, lineStart: marker2.line, lineEnd: children[children.length - 1].lineEnd, isMarker: true };
    }
    function wrapLines(treeNodes, markers, options) {
      if (markers.length === 0 || treeNodes.length === 0) {
        return treeNodes;
      }
      var ast2 = markers.reduce(function(acc, marker3) {
        return unwrapLine(marker3.line, acc);
      }, treeNodes);
      var wrapped = [];
      var astIndex = 0;
      for (var m2 = 0; m2 < markers.length; m2++) {
        var marker2 = markers[m2];
        for (var node = ast2[astIndex]; node && node.lineEnd < marker2.line; node = ast2[++astIndex]) {
          wrapped.push(node);
        }
        var batch = [];
        for (var _node = ast2[astIndex]; _node && _node.lineEnd === marker2.line; _node = ast2[++astIndex]) {
          batch.push(_node);
        }
        if (batch.length > 0) {
          wrapped.push(wrapBatch(batch, marker2, options));
        }
      }
      while (astIndex < ast2.length) {
        wrapped.push(ast2[astIndex++]);
      }
      return wrapped;
    }
    function addMarkers$1(ast2, options) {
      var markers = options.markers.map(function(marker2) {
        return marker2.line ? marker2 : { line: marker2 };
      }).sort(function(nodeA, nodeB) {
        return nodeA.line - nodeB.line;
      });
      var numbered = lineNumberify(ast2).nodes;
      return wrapLines(numbered, markers, options);
    }
    var addMarkers_1 = addMarkers$1;
    var React = React__namespace.default;
    var PropTypes = propTypesExports;
    var fract = core;
    var mapChildren = mapChildren$1;
    var addMarkers = addMarkers_1;
    var h = React.createElement;
    function Refractor(props) {
      if (process.env.NODE_ENV !== "production") {
        if (!fract.registered(props.language)) {
          console.warn('No language definitions for "'.concat(props.language, '" seems to be registered, did you forget to call `Refractor.registerLanguage()`?'));
        }
      }
      var langClassName = "language-".concat(props.language);
      var codeProps = { className: langClassName };
      var preProps = { className: [props.className, langClassName].filter(Boolean).join(" ") };
      if (props.inline) {
        codeProps.style = { display: "inline" };
        codeProps.className = props.className;
      }
      var ast2 = fract.highlight(props.value, props.language);
      if (props.markers && props.markers.length > 0) {
        ast2 = addMarkers(ast2, { markers: props.markers });
      }
      var value = ast2.length === 0 ? props.value : ast2.map(mapChildren.depth(0));
      var code = h("code", codeProps, value);
      return props.inline ? code : h("pre", preProps, code);
    }
    Refractor.propTypes = { className: PropTypes.string, inline: PropTypes.bool, language: PropTypes.string.isRequired, value: PropTypes.string.isRequired, markers: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.shape({ line: PropTypes.number.isRequired, className: PropTypes.string, component: PropTypes.oneOfType([PropTypes.node, PropTypes.func]) })])) };
    Refractor.defaultProps = { className: "refractor", inline: false };
    Refractor.registerLanguage = function(lang2) {
      return fract.register(lang2);
    };
    Refractor.hasLanguage = function(lang2) {
      return fract.registered(lang2);
    };
    var Refractor_1 = Refractor;
    var Refractor$1 = /* @__PURE__ */ getDefaultExportFromCjs(Refractor_1);
    function getAlignment(placement) {
      return placement.split("-")[1];
    }
    function getLengthFromAxis(axis) {
      return axis === "y" ? "height" : "width";
    }
    function getSide(placement) {
      return placement.split("-")[0];
    }
    function getMainAxisFromPlacement(placement) {
      return ["top", "bottom"].includes(getSide(placement)) ? "x" : "y";
    }
    function computeCoordsFromPlacement(_ref, placement, rtl) {
      let { reference, floating } = _ref;
      const commonX = reference.x + reference.width / 2 - floating.width / 2;
      const commonY = reference.y + reference.height / 2 - floating.height / 2;
      const mainAxis = getMainAxisFromPlacement(placement);
      const length = getLengthFromAxis(mainAxis);
      const commonAlign = reference[length] / 2 - floating[length] / 2;
      const side = getSide(placement);
      const isVertical = mainAxis === "x";
      let coords;
      switch (side) {
        case "top":
          coords = { x: commonX, y: reference.y - floating.height };
          break;
        case "bottom":
          coords = { x: commonX, y: reference.y + reference.height };
          break;
        case "right":
          coords = { x: reference.x + reference.width, y: commonY };
          break;
        case "left":
          coords = { x: reference.x - floating.width, y: commonY };
          break;
        default:
          coords = { x: reference.x, y: reference.y };
      }
      switch (getAlignment(placement)) {
        case "start":
          coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
          break;
        case "end":
          coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
          break;
      }
      return coords;
    }
    var computePosition$1 = async (reference, floating, config) => {
      const { placement = "bottom", strategy = "absolute", middleware = [], platform: platform2 } = config;
      const validMiddleware = middleware.filter(Boolean);
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
      let rects = await platform2.getElementRects({ reference, floating, strategy });
      let { x: x2, y: y2 } = computeCoordsFromPlacement(rects, placement, rtl);
      let statefulPlacement = placement;
      let middlewareData = {};
      let resetCount = 0;
      for (let i = 0; i < validMiddleware.length; i++) {
        const { name: name2, fn } = validMiddleware[i];
        const { x: nextX, y: nextY, data: data2, reset } = await fn({ x: x2, y: y2, initialPlacement: placement, placement: statefulPlacement, strategy, middlewareData, rects, platform: platform2, elements: { reference, floating } });
        x2 = nextX != null ? nextX : x2;
        y2 = nextY != null ? nextY : y2;
        middlewareData = { ...middlewareData, [name2]: { ...middlewareData[name2], ...data2 } };
        if (reset && resetCount <= 50) {
          resetCount++;
          if (typeof reset === "object") {
            if (reset.placement) {
              statefulPlacement = reset.placement;
            }
            if (reset.rects) {
              rects = reset.rects === true ? await platform2.getElementRects({ reference, floating, strategy }) : reset.rects;
            }
            ({ x: x2, y: y2 } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
          }
          i = -1;
          continue;
        }
      }
      return { x: x2, y: y2, placement: statefulPlacement, strategy, middlewareData };
    };
    function expandPaddingObject(padding) {
      return { top: 0, right: 0, bottom: 0, left: 0, ...padding };
    }
    function getSideObjectFromPadding(padding) {
      return typeof padding !== "number" ? expandPaddingObject(padding) : { top: padding, right: padding, bottom: padding, left: padding };
    }
    function rectToClientRect(rect2) {
      return { ...rect2, top: rect2.y, left: rect2.x, right: rect2.x + rect2.width, bottom: rect2.y + rect2.height };
    }
    async function detectOverflow(state, options) {
      var _await$platform$isEle;
      if (options === void 0) {
        options = {};
      }
      const { x: x2, y: y2, platform: platform2, rects, elements, strategy } = state;
      const { boundary = "clippingAncestors", rootBoundary = "viewport", elementContext = "floating", altBoundary = false, padding = 0 } = options;
      const paddingObject = getSideObjectFromPadding(padding);
      const altContext = elementContext === "floating" ? "reference" : "floating";
      const element = elements[altBoundary ? altContext : elementContext];
      const clippingClientRect = rectToClientRect(await platform2.getClippingRect({ element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)), boundary, rootBoundary, strategy }));
      const rect2 = elementContext === "floating" ? { ...rects.floating, x: x2, y: y2 } : rects.reference;
      const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
      const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || { x: 1, y: 1 } : { x: 1, y: 1 };
      const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({ rect: rect2, offsetParent, strategy }) : rect2);
      return { top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y, bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y, left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x, right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x };
    }
    var min$1 = Math.min;
    var max$1 = Math.max;
    function within(min$1$1, value, max$1$1) {
      return max$1(min$1$1, min$1(value, max$1$1));
    }
    var arrow$1 = (options) => ({ name: "arrow", options, async fn(state) {
      const { element, padding = 0 } = options || {};
      const { x: x2, y: y2, placement, rects, platform: platform2, elements } = state;
      if (element == null) {
        return {};
      }
      const paddingObject = getSideObjectFromPadding(padding);
      const coords = { x: x2, y: y2 };
      const axis = getMainAxisFromPlacement(placement);
      const length = getLengthFromAxis(axis);
      const arrowDimensions = await platform2.getDimensions(element);
      const isYAxis = axis === "y";
      const minProp = isYAxis ? "top" : "left";
      const maxProp = isYAxis ? "bottom" : "right";
      const clientProp = isYAxis ? "clientHeight" : "clientWidth";
      const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
      const startDiff = coords[axis] - rects.reference[axis];
      const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
      let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
      if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
        clientSize = elements.floating[clientProp] || rects.floating[length];
      }
      const centerToReference = endDiff / 2 - startDiff / 2;
      const min2 = paddingObject[minProp];
      const max2 = clientSize - arrowDimensions[length] - paddingObject[maxProp];
      const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
      const offset2 = within(min2, center, max2);
      const shouldAddOffset = getAlignment(placement) != null && center != offset2 && rects.reference[length] / 2 - (center < min2 ? paddingObject[minProp] : paddingObject[maxProp]) - arrowDimensions[length] / 2 < 0;
      const alignmentOffset = shouldAddOffset ? center < min2 ? min2 - center : max2 - center : 0;
      return { [axis]: coords[axis] - alignmentOffset, data: { [axis]: offset2, centerOffset: center - offset2 } };
    } });
    var sides = ["top", "right", "bottom", "left"];
    var oppositeSideMap = { left: "right", right: "left", bottom: "top", top: "bottom" };
    function getOppositePlacement(placement) {
      return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
    }
    function getAlignmentSides(placement, rects, rtl) {
      if (rtl === void 0) {
        rtl = false;
      }
      const alignment = getAlignment(placement);
      const mainAxis = getMainAxisFromPlacement(placement);
      const length = getLengthFromAxis(mainAxis);
      let mainAlignmentSide = mainAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
      if (rects.reference[length] > rects.floating[length]) {
        mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
      }
      return { main: mainAlignmentSide, cross: getOppositePlacement(mainAlignmentSide) };
    }
    var oppositeAlignmentMap = { start: "end", end: "start" };
    function getOppositeAlignmentPlacement(placement) {
      return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
    }
    function getExpandedPlacements(placement) {
      const oppositePlacement = getOppositePlacement(placement);
      return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
    }
    function getSideList(side, isStart, rtl) {
      const lr = ["left", "right"];
      const rl = ["right", "left"];
      const tb = ["top", "bottom"];
      const bt = ["bottom", "top"];
      switch (side) {
        case "top":
        case "bottom":
          if (rtl)
            return isStart ? rl : lr;
          return isStart ? lr : rl;
        case "left":
        case "right":
          return isStart ? tb : bt;
        default:
          return [];
      }
    }
    function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
      const alignment = getAlignment(placement);
      let list = getSideList(getSide(placement), direction === "start", rtl);
      if (alignment) {
        list = list.map((side) => side + "-" + alignment);
        if (flipAlignment) {
          list = list.concat(list.map(getOppositeAlignmentPlacement));
        }
      }
      return list;
    }
    var flip = function(options) {
      if (options === void 0) {
        options = {};
      }
      return { name: "flip", options, async fn(state) {
        var _middlewareData$flip;
        const { placement, middlewareData, rects, initialPlacement, platform: platform2, elements } = state;
        const { mainAxis: checkMainAxis = true, crossAxis: checkCrossAxis = true, fallbackPlacements: specifiedFallbackPlacements, fallbackStrategy = "bestFit", fallbackAxisSideDirection = "none", flipAlignment = true, ...detectOverflowOptions } = options;
        const side = getSide(placement);
        const isBasePlacement = getSide(initialPlacement) === initialPlacement;
        const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
        const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
        if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== "none") {
          fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
        }
        const placements = [initialPlacement, ...fallbackPlacements];
        const overflow = await detectOverflow(state, detectOverflowOptions);
        const overflows = [];
        let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
        if (checkMainAxis) {
          overflows.push(overflow[side]);
        }
        if (checkCrossAxis) {
          const { main, cross: cross2 } = getAlignmentSides(placement, rects, rtl);
          overflows.push(overflow[main], overflow[cross2]);
        }
        overflowsData = [...overflowsData, { placement, overflows }];
        if (!overflows.every((side2) => side2 <= 0)) {
          var _middlewareData$flip2, _overflowsData$filter;
          const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
          const nextPlacement = placements[nextIndex];
          if (nextPlacement) {
            return { data: { index: nextIndex, overflows: overflowsData }, reset: { placement: nextPlacement } };
          }
          let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a, b2) => a.overflows[1] - b2.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
          if (!resetPlacement) {
            switch (fallbackStrategy) {
              case "bestFit": {
                var _overflowsData$map$so;
                const placement2 = (_overflowsData$map$so = overflowsData.map((d) => [d.placement, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a, b2) => a[1] - b2[1])[0]) == null ? void 0 : _overflowsData$map$so[0];
                if (placement2) {
                  resetPlacement = placement2;
                }
                break;
              }
              case "initialPlacement":
                resetPlacement = initialPlacement;
                break;
            }
          }
          if (placement !== resetPlacement) {
            return { reset: { placement: resetPlacement } };
          }
        }
        return {};
      } };
    };
    function getSideOffsets(overflow, rect2) {
      return { top: overflow.top - rect2.height, right: overflow.right - rect2.width, bottom: overflow.bottom - rect2.height, left: overflow.left - rect2.width };
    }
    function isAnySideFullyClipped(overflow) {
      return sides.some((side) => overflow[side] >= 0);
    }
    var hide = function(options) {
      if (options === void 0) {
        options = {};
      }
      return { name: "hide", options, async fn(state) {
        const { strategy = "referenceHidden", ...detectOverflowOptions } = options;
        const { rects } = state;
        switch (strategy) {
          case "referenceHidden": {
            const overflow = await detectOverflow(state, { ...detectOverflowOptions, elementContext: "reference" });
            const offsets = getSideOffsets(overflow, rects.reference);
            return { data: { referenceHiddenOffsets: offsets, referenceHidden: isAnySideFullyClipped(offsets) } };
          }
          case "escaped": {
            const overflow = await detectOverflow(state, { ...detectOverflowOptions, altBoundary: true });
            const offsets = getSideOffsets(overflow, rects.floating);
            return { data: { escapedOffsets: offsets, escaped: isAnySideFullyClipped(offsets) } };
          }
          default: {
            return {};
          }
        }
      } };
    };
    async function convertValueToCoords(state, value) {
      const { placement, platform: platform2, elements } = state;
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
      const side = getSide(placement);
      const alignment = getAlignment(placement);
      const isVertical = getMainAxisFromPlacement(placement) === "x";
      const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
      const crossAxisMulti = rtl && isVertical ? -1 : 1;
      const rawValue = typeof value === "function" ? value(state) : value;
      let { mainAxis, crossAxis, alignmentAxis } = typeof rawValue === "number" ? { mainAxis: rawValue, crossAxis: 0, alignmentAxis: null } : { mainAxis: 0, crossAxis: 0, alignmentAxis: null, ...rawValue };
      if (alignment && typeof alignmentAxis === "number") {
        crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
      }
      return isVertical ? { x: crossAxis * crossAxisMulti, y: mainAxis * mainAxisMulti } : { x: mainAxis * mainAxisMulti, y: crossAxis * crossAxisMulti };
    }
    var offset = function(value) {
      if (value === void 0) {
        value = 0;
      }
      return { name: "offset", options: value, async fn(state) {
        const { x: x2, y: y2 } = state;
        const diffCoords = await convertValueToCoords(state, value);
        return { x: x2 + diffCoords.x, y: y2 + diffCoords.y, data: diffCoords };
      } };
    };
    function getCrossAxis(axis) {
      return axis === "x" ? "y" : "x";
    }
    var shift = function(options) {
      if (options === void 0) {
        options = {};
      }
      return { name: "shift", options, async fn(state) {
        const { x: x2, y: y2, placement } = state;
        const { mainAxis: checkMainAxis = true, crossAxis: checkCrossAxis = false, limiter = { fn: (_ref) => {
          let { x: x3, y: y3 } = _ref;
          return { x: x3, y: y3 };
        } }, ...detectOverflowOptions } = options;
        const coords = { x: x2, y: y2 };
        const overflow = await detectOverflow(state, detectOverflowOptions);
        const mainAxis = getMainAxisFromPlacement(getSide(placement));
        const crossAxis = getCrossAxis(mainAxis);
        let mainAxisCoord = coords[mainAxis];
        let crossAxisCoord = coords[crossAxis];
        if (checkMainAxis) {
          const minSide = mainAxis === "y" ? "top" : "left";
          const maxSide = mainAxis === "y" ? "bottom" : "right";
          const min2 = mainAxisCoord + overflow[minSide];
          const max2 = mainAxisCoord - overflow[maxSide];
          mainAxisCoord = within(min2, mainAxisCoord, max2);
        }
        if (checkCrossAxis) {
          const minSide = crossAxis === "y" ? "top" : "left";
          const maxSide = crossAxis === "y" ? "bottom" : "right";
          const min2 = crossAxisCoord + overflow[minSide];
          const max2 = crossAxisCoord - overflow[maxSide];
          crossAxisCoord = within(min2, crossAxisCoord, max2);
        }
        const limitedCoords = limiter.fn({ ...state, [mainAxis]: mainAxisCoord, [crossAxis]: crossAxisCoord });
        return { ...limitedCoords, data: { x: limitedCoords.x - x2, y: limitedCoords.y - y2 } };
      } };
    };
    function getWindow(node) {
      var _node$ownerDocument;
      return ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
    }
    function getComputedStyle$1(element) {
      return getWindow(element).getComputedStyle(element);
    }
    function isNode(value) {
      return value instanceof getWindow(value).Node;
    }
    function getNodeName(node) {
      return isNode(node) ? (node.nodeName || "").toLowerCase() : "";
    }
    var uaString;
    function getUAString() {
      if (uaString) {
        return uaString;
      }
      const uaData = navigator.userAgentData;
      if (uaData && Array.isArray(uaData.brands)) {
        uaString = uaData.brands.map((item) => item.brand + "/" + item.version).join(" ");
        return uaString;
      }
      return navigator.userAgent;
    }
    function isHTMLElement$1(value) {
      return value instanceof getWindow(value).HTMLElement;
    }
    function isElement$1(value) {
      return value instanceof getWindow(value).Element;
    }
    function isShadowRoot(node) {
      if (typeof ShadowRoot === "undefined") {
        return false;
      }
      const OwnElement = getWindow(node).ShadowRoot;
      return node instanceof OwnElement || node instanceof ShadowRoot;
    }
    function isOverflowElement(element) {
      const { overflow, overflowX, overflowY, display } = getComputedStyle$1(element);
      return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
    }
    function isTableElement(element) {
      return ["table", "td", "th"].includes(getNodeName(element));
    }
    function isContainingBlock(element) {
      const isFirefox = /firefox/i.test(getUAString());
      const css2 = getComputedStyle$1(element);
      const backdropFilter = css2.backdropFilter || css2.WebkitBackdropFilter;
      return css2.transform !== "none" || css2.perspective !== "none" || (backdropFilter ? backdropFilter !== "none" : false) || isFirefox && css2.willChange === "filter" || isFirefox && (css2.filter ? css2.filter !== "none" : false) || ["transform", "perspective"].some((value) => css2.willChange.includes(value)) || ["paint", "layout", "strict", "content"].some((value) => {
        const contain = css2.contain;
        return contain != null ? contain.includes(value) : false;
      });
    }
    function isClientRectVisualViewportBased() {
      return /^((?!chrome|android).)*safari/i.test(getUAString());
    }
    function isLastTraversableNode(node) {
      return ["html", "body", "#document"].includes(getNodeName(node));
    }
    var min = Math.min;
    var max = Math.max;
    var round = Math.round;
    function getCssDimensions(element) {
      const css2 = getComputedStyle$1(element);
      let width = parseFloat(css2.width);
      let height = parseFloat(css2.height);
      const hasOffset = isHTMLElement$1(element);
      const offsetWidth = hasOffset ? element.offsetWidth : width;
      const offsetHeight = hasOffset ? element.offsetHeight : height;
      const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
      if (shouldFallback) {
        width = offsetWidth;
        height = offsetHeight;
      }
      return { width, height, fallback: shouldFallback };
    }
    function unwrapElement(element) {
      return !isElement$1(element) ? element.contextElement : element;
    }
    var FALLBACK_SCALE = { x: 1, y: 1 };
    function getScale(element) {
      const domElement = unwrapElement(element);
      if (!isHTMLElement$1(domElement)) {
        return FALLBACK_SCALE;
      }
      const rect2 = domElement.getBoundingClientRect();
      const { width, height, fallback } = getCssDimensions(domElement);
      let x2 = (fallback ? round(rect2.width) : rect2.width) / width;
      let y2 = (fallback ? round(rect2.height) : rect2.height) / height;
      if (!x2 || !Number.isFinite(x2)) {
        x2 = 1;
      }
      if (!y2 || !Number.isFinite(y2)) {
        y2 = 1;
      }
      return { x: x2, y: y2 };
    }
    function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
      var _win$visualViewport, _win$visualViewport2;
      if (includeScale === void 0) {
        includeScale = false;
      }
      if (isFixedStrategy === void 0) {
        isFixedStrategy = false;
      }
      const clientRect = element.getBoundingClientRect();
      const domElement = unwrapElement(element);
      let scale = FALLBACK_SCALE;
      if (includeScale) {
        if (offsetParent) {
          if (isElement$1(offsetParent)) {
            scale = getScale(offsetParent);
          }
        } else {
          scale = getScale(element);
        }
      }
      const win = domElement ? getWindow(domElement) : window;
      const addVisualOffsets = isClientRectVisualViewportBased() && isFixedStrategy;
      let x2 = (clientRect.left + (addVisualOffsets ? ((_win$visualViewport = win.visualViewport) == null ? void 0 : _win$visualViewport.offsetLeft) || 0 : 0)) / scale.x;
      let y2 = (clientRect.top + (addVisualOffsets ? ((_win$visualViewport2 = win.visualViewport) == null ? void 0 : _win$visualViewport2.offsetTop) || 0 : 0)) / scale.y;
      let width = clientRect.width / scale.x;
      let height = clientRect.height / scale.y;
      if (domElement) {
        const win2 = getWindow(domElement);
        const offsetWin = offsetParent && isElement$1(offsetParent) ? getWindow(offsetParent) : offsetParent;
        let currentIFrame = win2.frameElement;
        while (currentIFrame && offsetParent && offsetWin !== win2) {
          const iframeScale = getScale(currentIFrame);
          const iframeRect = currentIFrame.getBoundingClientRect();
          const css2 = getComputedStyle(currentIFrame);
          iframeRect.x += (currentIFrame.clientLeft + parseFloat(css2.paddingLeft)) * iframeScale.x;
          iframeRect.y += (currentIFrame.clientTop + parseFloat(css2.paddingTop)) * iframeScale.y;
          x2 *= iframeScale.x;
          y2 *= iframeScale.y;
          width *= iframeScale.x;
          height *= iframeScale.y;
          x2 += iframeRect.x;
          y2 += iframeRect.y;
          currentIFrame = getWindow(currentIFrame).frameElement;
        }
      }
      return rectToClientRect({ width, height, x: x2, y: y2 });
    }
    function getDocumentElement(node) {
      return ((isNode(node) ? node.ownerDocument : node.document) || window.document).documentElement;
    }
    function getNodeScroll(element) {
      if (isElement$1(element)) {
        return { scrollLeft: element.scrollLeft, scrollTop: element.scrollTop };
      }
      return { scrollLeft: element.pageXOffset, scrollTop: element.pageYOffset };
    }
    function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
      let { rect: rect2, offsetParent, strategy } = _ref;
      const isOffsetParentAnElement = isHTMLElement$1(offsetParent);
      const documentElement = getDocumentElement(offsetParent);
      if (offsetParent === documentElement) {
        return rect2;
      }
      let scroll = { scrollLeft: 0, scrollTop: 0 };
      let scale = { x: 1, y: 1 };
      const offsets = { x: 0, y: 0 };
      if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
        if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
          scroll = getNodeScroll(offsetParent);
        }
        if (isHTMLElement$1(offsetParent)) {
          const offsetRect = getBoundingClientRect(offsetParent);
          scale = getScale(offsetParent);
          offsets.x = offsetRect.x + offsetParent.clientLeft;
          offsets.y = offsetRect.y + offsetParent.clientTop;
        }
      }
      return { width: rect2.width * scale.x, height: rect2.height * scale.y, x: rect2.x * scale.x - scroll.scrollLeft * scale.x + offsets.x, y: rect2.y * scale.y - scroll.scrollTop * scale.y + offsets.y };
    }
    function getWindowScrollBarX(element) {
      return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
    }
    function getDocumentRect(element) {
      const html2 = getDocumentElement(element);
      const scroll = getNodeScroll(element);
      const body = element.ownerDocument.body;
      const width = max(html2.scrollWidth, html2.clientWidth, body.scrollWidth, body.clientWidth);
      const height = max(html2.scrollHeight, html2.clientHeight, body.scrollHeight, body.clientHeight);
      let x2 = -scroll.scrollLeft + getWindowScrollBarX(element);
      const y2 = -scroll.scrollTop;
      if (getComputedStyle$1(body).direction === "rtl") {
        x2 += max(html2.clientWidth, body.clientWidth) - width;
      }
      return { width, height, x: x2, y: y2 };
    }
    function getParentNode(node) {
      if (getNodeName(node) === "html") {
        return node;
      }
      const result = (
        // Step into the shadow DOM of the parent of a slotted node.
        node.assignedSlot || // DOM Element detected.
        node.parentNode || // ShadowRoot detected.
        isShadowRoot(node) && node.host || // Fallback.
        getDocumentElement(node)
      );
      return isShadowRoot(result) ? result.host : result;
    }
    function getNearestOverflowAncestor(node) {
      const parentNode = getParentNode(node);
      if (isLastTraversableNode(parentNode)) {
        return parentNode.ownerDocument.body;
      }
      if (isHTMLElement$1(parentNode) && isOverflowElement(parentNode)) {
        return parentNode;
      }
      return getNearestOverflowAncestor(parentNode);
    }
    function getOverflowAncestors(node, list) {
      var _node$ownerDocument;
      if (list === void 0) {
        list = [];
      }
      const scrollableAncestor = getNearestOverflowAncestor(node);
      const isBody = scrollableAncestor === ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.body);
      const win = getWindow(scrollableAncestor);
      if (isBody) {
        return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []);
      }
      return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor));
    }
    function getViewportRect(element, strategy) {
      const win = getWindow(element);
      const html2 = getDocumentElement(element);
      const visualViewport = win.visualViewport;
      let width = html2.clientWidth;
      let height = html2.clientHeight;
      let x2 = 0;
      let y2 = 0;
      if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height;
        const visualViewportBased = isClientRectVisualViewportBased();
        if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
          x2 = visualViewport.offsetLeft;
          y2 = visualViewport.offsetTop;
        }
      }
      return { width, height, x: x2, y: y2 };
    }
    function getInnerBoundingClientRect(element, strategy) {
      const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
      const top2 = clientRect.top + element.clientTop;
      const left = clientRect.left + element.clientLeft;
      const scale = isHTMLElement$1(element) ? getScale(element) : { x: 1, y: 1 };
      const width = element.clientWidth * scale.x;
      const height = element.clientHeight * scale.y;
      const x2 = left * scale.x;
      const y2 = top2 * scale.y;
      return { width, height, x: x2, y: y2 };
    }
    function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
      let rect2;
      if (clippingAncestor === "viewport") {
        rect2 = getViewportRect(element, strategy);
      } else if (clippingAncestor === "document") {
        rect2 = getDocumentRect(getDocumentElement(element));
      } else if (isElement$1(clippingAncestor)) {
        rect2 = getInnerBoundingClientRect(clippingAncestor, strategy);
      } else {
        const mutableRect = { ...clippingAncestor };
        if (isClientRectVisualViewportBased()) {
          var _win$visualViewport, _win$visualViewport2;
          const win = getWindow(element);
          mutableRect.x -= ((_win$visualViewport = win.visualViewport) == null ? void 0 : _win$visualViewport.offsetLeft) || 0;
          mutableRect.y -= ((_win$visualViewport2 = win.visualViewport) == null ? void 0 : _win$visualViewport2.offsetTop) || 0;
        }
        rect2 = mutableRect;
      }
      return rectToClientRect(rect2);
    }
    function hasFixedPositionAncestor(element, stopNode) {
      const parentNode = getParentNode(element);
      if (parentNode === stopNode || !isElement$1(parentNode) || isLastTraversableNode(parentNode)) {
        return false;
      }
      return getComputedStyle$1(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
    }
    function getClippingElementAncestors(element, cache2) {
      const cachedResult = cache2.get(element);
      if (cachedResult) {
        return cachedResult;
      }
      let result = getOverflowAncestors(element).filter((el2) => isElement$1(el2) && getNodeName(el2) !== "body");
      let currentContainingBlockComputedStyle = null;
      const elementIsFixed = getComputedStyle$1(element).position === "fixed";
      let currentNode = elementIsFixed ? getParentNode(element) : element;
      while (isElement$1(currentNode) && !isLastTraversableNode(currentNode)) {
        const computedStyle = getComputedStyle$1(currentNode);
        const currentNodeIsContaining = isContainingBlock(currentNode);
        if (!currentNodeIsContaining && computedStyle.position === "fixed") {
          currentContainingBlockComputedStyle = null;
        }
        const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
        if (shouldDropCurrentNode) {
          result = result.filter((ancestor) => ancestor !== currentNode);
        } else {
          currentContainingBlockComputedStyle = computedStyle;
        }
        currentNode = getParentNode(currentNode);
      }
      cache2.set(element, result);
      return result;
    }
    function getClippingRect(_ref) {
      let { element, boundary, rootBoundary, strategy } = _ref;
      const elementClippingAncestors = boundary === "clippingAncestors" ? getClippingElementAncestors(element, this._c) : [].concat(boundary);
      const clippingAncestors = [...elementClippingAncestors, rootBoundary];
      const firstClippingAncestor = clippingAncestors[0];
      const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
        const rect2 = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
        accRect.top = max(rect2.top, accRect.top);
        accRect.right = min(rect2.right, accRect.right);
        accRect.bottom = min(rect2.bottom, accRect.bottom);
        accRect.left = max(rect2.left, accRect.left);
        return accRect;
      }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
      return { width: clippingRect.right - clippingRect.left, height: clippingRect.bottom - clippingRect.top, x: clippingRect.left, y: clippingRect.top };
    }
    function getDimensions(element) {
      return getCssDimensions(element);
    }
    function getTrueOffsetParent(element, polyfill) {
      if (!isHTMLElement$1(element) || getComputedStyle$1(element).position === "fixed") {
        return null;
      }
      if (polyfill) {
        return polyfill(element);
      }
      return element.offsetParent;
    }
    function getContainingBlock(element) {
      let currentNode = getParentNode(element);
      while (isHTMLElement$1(currentNode) && !isLastTraversableNode(currentNode)) {
        if (isContainingBlock(currentNode)) {
          return currentNode;
        } else {
          currentNode = getParentNode(currentNode);
        }
      }
      return null;
    }
    function getOffsetParent(element, polyfill) {
      const window2 = getWindow(element);
      if (!isHTMLElement$1(element)) {
        return window2;
      }
      let offsetParent = getTrueOffsetParent(element, polyfill);
      while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === "static") {
        offsetParent = getTrueOffsetParent(offsetParent, polyfill);
      }
      if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle$1(offsetParent).position === "static" && !isContainingBlock(offsetParent))) {
        return window2;
      }
      return offsetParent || getContainingBlock(element) || window2;
    }
    function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
      const isOffsetParentAnElement = isHTMLElement$1(offsetParent);
      const documentElement = getDocumentElement(offsetParent);
      const rect2 = getBoundingClientRect(element, true, strategy === "fixed", offsetParent);
      let scroll = { scrollLeft: 0, scrollTop: 0 };
      const offsets = { x: 0, y: 0 };
      if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
        if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
          scroll = getNodeScroll(offsetParent);
        }
        if (isHTMLElement$1(offsetParent)) {
          const offsetRect = getBoundingClientRect(offsetParent, true);
          offsets.x = offsetRect.x + offsetParent.clientLeft;
          offsets.y = offsetRect.y + offsetParent.clientTop;
        } else if (documentElement) {
          offsets.x = getWindowScrollBarX(documentElement);
        }
      }
      return { x: rect2.left + scroll.scrollLeft - offsets.x, y: rect2.top + scroll.scrollTop - offsets.y, width: rect2.width, height: rect2.height };
    }
    var platform = { getClippingRect, convertOffsetParentRelativeRectToViewportRelativeRect, isElement: isElement$1, getDimensions, getOffsetParent, getDocumentElement, getScale, async getElementRects(_ref) {
      let { reference, floating, strategy } = _ref;
      const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
      const getDimensionsFn = this.getDimensions;
      return { reference: getRectRelativeToOffsetParent(reference, await getOffsetParentFn(floating), strategy), floating: { x: 0, y: 0, ...await getDimensionsFn(floating) } };
    }, getClientRects: (element) => Array.from(element.getClientRects()), isRTL: (element) => getComputedStyle$1(element).direction === "rtl" };
    function autoUpdate(reference, floating, update, options) {
      if (options === void 0) {
        options = {};
      }
      const { ancestorScroll = true, ancestorResize = true, elementResize = true, animationFrame = false } = options;
      const ancestors = ancestorScroll || ancestorResize ? [...isElement$1(reference) ? getOverflowAncestors(reference) : reference.contextElement ? getOverflowAncestors(reference.contextElement) : [], ...getOverflowAncestors(floating)] : [];
      ancestors.forEach((ancestor) => {
        const isVisualViewport = !isElement$1(ancestor) && ancestor.toString().includes("V");
        if (ancestorScroll && (animationFrame ? isVisualViewport : true)) {
          ancestor.addEventListener("scroll", update, { passive: true });
        }
        ancestorResize && ancestor.addEventListener("resize", update);
      });
      let observer = null;
      if (elementResize) {
        observer = new ResizeObserver(() => {
          update();
        });
        isElement$1(reference) && !animationFrame && observer.observe(reference);
        if (!isElement$1(reference) && reference.contextElement && !animationFrame) {
          observer.observe(reference.contextElement);
        }
        observer.observe(floating);
      }
      let frameId;
      let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
      if (animationFrame) {
        frameLoop();
      }
      function frameLoop() {
        const nextRefRect = getBoundingClientRect(reference);
        if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
          update();
        }
        prevRefRect = nextRefRect;
        frameId = requestAnimationFrame(frameLoop);
      }
      update();
      return () => {
        var _observer;
        ancestors.forEach((ancestor) => {
          ancestorScroll && ancestor.removeEventListener("scroll", update);
          ancestorResize && ancestor.removeEventListener("resize", update);
        });
        (_observer = observer) == null ? void 0 : _observer.disconnect();
        observer = null;
        if (animationFrame) {
          cancelAnimationFrame(frameId);
        }
      };
    }
    var computePosition = (reference, floating, options) => {
      const cache2 = /* @__PURE__ */ new Map();
      const mergedOptions = { platform, ...options };
      const platformWithCache = { ...mergedOptions.platform, _c: cache2 };
      return computePosition$1(reference, floating, { ...mergedOptions, platform: platformWithCache });
    };
    var reactDom = { exports: {} };
    var reactDom_production_min = {};
    var scheduler$1 = { exports: {} };
    var scheduler_production_min = {};
    var hasRequiredScheduler_production_min;
    function requireScheduler_production_min() {
      if (hasRequiredScheduler_production_min)
        return scheduler_production_min;
      hasRequiredScheduler_production_min = 1;
      (function(exports2) {
        function f(a, b2) {
          var c = a.length;
          a.push(b2);
          a:
            for (; 0 < c; ) {
              var d = c - 1 >>> 1, e = a[d];
              if (0 < g2(e, b2))
                a[d] = b2, a[c] = e, c = d;
              else
                break a;
            }
        }
        function h2(a) {
          return 0 === a.length ? null : a[0];
        }
        function k2(a) {
          if (0 === a.length)
            return null;
          var b2 = a[0], c = a.pop();
          if (c !== b2) {
            a[0] = c;
            a:
              for (var d = 0, e = a.length, w2 = e >>> 1; d < w2; ) {
                var m2 = 2 * (d + 1) - 1, C2 = a[m2], n = m2 + 1, x2 = a[n];
                if (0 > g2(C2, c))
                  n < e && 0 > g2(x2, C2) ? (a[d] = x2, a[n] = c, d = n) : (a[d] = C2, a[m2] = c, d = m2);
                else if (n < e && 0 > g2(x2, c))
                  a[d] = x2, a[n] = c, d = n;
                else
                  break a;
              }
          }
          return b2;
        }
        function g2(a, b2) {
          var c = a.sortIndex - b2.sortIndex;
          return 0 !== c ? c : a.id - b2.id;
        }
        if ("object" === typeof performance && "function" === typeof performance.now) {
          var l2 = performance;
          exports2.unstable_now = function() {
            return l2.now();
          };
        } else {
          var p = Date, q2 = p.now();
          exports2.unstable_now = function() {
            return p.now() - q2;
          };
        }
        var r = [], t = [], u = 1, v2 = null, y2 = 3, z2 = false, A = false, B2 = false, D2 = "function" === typeof setTimeout ? setTimeout : null, E2 = "function" === typeof clearTimeout ? clearTimeout : null, F2 = "undefined" !== typeof setImmediate ? setImmediate : null;
        "undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
        function G2(a) {
          for (var b2 = h2(t); null !== b2; ) {
            if (null === b2.callback)
              k2(t);
            else if (b2.startTime <= a)
              k2(t), b2.sortIndex = b2.expirationTime, f(r, b2);
            else
              break;
            b2 = h2(t);
          }
        }
        function H2(a) {
          B2 = false;
          G2(a);
          if (!A)
            if (null !== h2(r))
              A = true, I2(J2);
            else {
              var b2 = h2(t);
              null !== b2 && K2(H2, b2.startTime - a);
            }
        }
        function J2(a, b2) {
          A = false;
          B2 && (B2 = false, E2(L2), L2 = -1);
          z2 = true;
          var c = y2;
          try {
            G2(b2);
            for (v2 = h2(r); null !== v2 && (!(v2.expirationTime > b2) || a && !M2()); ) {
              var d = v2.callback;
              if ("function" === typeof d) {
                v2.callback = null;
                y2 = v2.priorityLevel;
                var e = d(v2.expirationTime <= b2);
                b2 = exports2.unstable_now();
                "function" === typeof e ? v2.callback = e : v2 === h2(r) && k2(r);
                G2(b2);
              } else
                k2(r);
              v2 = h2(r);
            }
            if (null !== v2)
              var w2 = true;
            else {
              var m2 = h2(t);
              null !== m2 && K2(H2, m2.startTime - b2);
              w2 = false;
            }
            return w2;
          } finally {
            v2 = null, y2 = c, z2 = false;
          }
        }
        var N2 = false, O2 = null, L2 = -1, P2 = 5, Q2 = -1;
        function M2() {
          return exports2.unstable_now() - Q2 < P2 ? false : true;
        }
        function R2() {
          if (null !== O2) {
            var a = exports2.unstable_now();
            Q2 = a;
            var b2 = true;
            try {
              b2 = O2(true, a);
            } finally {
              b2 ? S2() : (N2 = false, O2 = null);
            }
          } else
            N2 = false;
        }
        var S2;
        if ("function" === typeof F2)
          S2 = function() {
            F2(R2);
          };
        else if ("undefined" !== typeof MessageChannel) {
          var T2 = new MessageChannel(), U2 = T2.port2;
          T2.port1.onmessage = R2;
          S2 = function() {
            U2.postMessage(null);
          };
        } else
          S2 = function() {
            D2(R2, 0);
          };
        function I2(a) {
          O2 = a;
          N2 || (N2 = true, S2());
        }
        function K2(a, b2) {
          L2 = D2(function() {
            a(exports2.unstable_now());
          }, b2);
        }
        exports2.unstable_IdlePriority = 5;
        exports2.unstable_ImmediatePriority = 1;
        exports2.unstable_LowPriority = 4;
        exports2.unstable_NormalPriority = 3;
        exports2.unstable_Profiling = null;
        exports2.unstable_UserBlockingPriority = 2;
        exports2.unstable_cancelCallback = function(a) {
          a.callback = null;
        };
        exports2.unstable_continueExecution = function() {
          A || z2 || (A = true, I2(J2));
        };
        exports2.unstable_forceFrameRate = function(a) {
          0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P2 = 0 < a ? Math.floor(1e3 / a) : 5;
        };
        exports2.unstable_getCurrentPriorityLevel = function() {
          return y2;
        };
        exports2.unstable_getFirstCallbackNode = function() {
          return h2(r);
        };
        exports2.unstable_next = function(a) {
          switch (y2) {
            case 1:
            case 2:
            case 3:
              var b2 = 3;
              break;
            default:
              b2 = y2;
          }
          var c = y2;
          y2 = b2;
          try {
            return a();
          } finally {
            y2 = c;
          }
        };
        exports2.unstable_pauseExecution = function() {
        };
        exports2.unstable_requestPaint = function() {
        };
        exports2.unstable_runWithPriority = function(a, b2) {
          switch (a) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
              break;
            default:
              a = 3;
          }
          var c = y2;
          y2 = a;
          try {
            return b2();
          } finally {
            y2 = c;
          }
        };
        exports2.unstable_scheduleCallback = function(a, b2, c) {
          var d = exports2.unstable_now();
          "object" === typeof c && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;
          switch (a) {
            case 1:
              var e = -1;
              break;
            case 2:
              e = 250;
              break;
            case 5:
              e = 1073741823;
              break;
            case 4:
              e = 1e4;
              break;
            default:
              e = 5e3;
          }
          e = c + e;
          a = { id: u++, callback: b2, priorityLevel: a, startTime: c, expirationTime: e, sortIndex: -1 };
          c > d ? (a.sortIndex = c, f(t, a), null === h2(r) && a === h2(t) && (B2 ? (E2(L2), L2 = -1) : B2 = true, K2(H2, c - d))) : (a.sortIndex = e, f(r, a), A || z2 || (A = true, I2(J2)));
          return a;
        };
        exports2.unstable_shouldYield = M2;
        exports2.unstable_wrapCallback = function(a) {
          var b2 = y2;
          return function() {
            var c = y2;
            y2 = b2;
            try {
              return a.apply(this, arguments);
            } finally {
              y2 = c;
            }
          };
        };
      })(scheduler_production_min);
      return scheduler_production_min;
    }
    var scheduler_development = {};
    var hasRequiredScheduler_development;
    function requireScheduler_development() {
      if (hasRequiredScheduler_development)
        return scheduler_development;
      hasRequiredScheduler_development = 1;
      (function(exports2) {
        if (process.env.NODE_ENV !== "production") {
          (function() {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
              __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
            }
            var enableSchedulerDebugging = false;
            var enableProfiling = false;
            var frameYieldMs = 5;
            function push(heap, node) {
              var index2 = heap.length;
              heap.push(node);
              siftUp(heap, node, index2);
            }
            function peek(heap) {
              return heap.length === 0 ? null : heap[0];
            }
            function pop(heap) {
              if (heap.length === 0) {
                return null;
              }
              var first = heap[0];
              var last = heap.pop();
              if (last !== first) {
                heap[0] = last;
                siftDown(heap, last, 0);
              }
              return first;
            }
            function siftUp(heap, node, i) {
              var index2 = i;
              while (index2 > 0) {
                var parentIndex = index2 - 1 >>> 1;
                var parent = heap[parentIndex];
                if (compare(parent, node) > 0) {
                  heap[parentIndex] = node;
                  heap[index2] = parent;
                  index2 = parentIndex;
                } else {
                  return;
                }
              }
            }
            function siftDown(heap, node, i) {
              var index2 = i;
              var length = heap.length;
              var halfLength = length >>> 1;
              while (index2 < halfLength) {
                var leftIndex = (index2 + 1) * 2 - 1;
                var left = heap[leftIndex];
                var rightIndex = leftIndex + 1;
                var right = heap[rightIndex];
                if (compare(left, node) < 0) {
                  if (rightIndex < length && compare(right, left) < 0) {
                    heap[index2] = right;
                    heap[rightIndex] = node;
                    index2 = rightIndex;
                  } else {
                    heap[index2] = left;
                    heap[leftIndex] = node;
                    index2 = leftIndex;
                  }
                } else if (rightIndex < length && compare(right, node) < 0) {
                  heap[index2] = right;
                  heap[rightIndex] = node;
                  index2 = rightIndex;
                } else {
                  return;
                }
              }
            }
            function compare(a, b2) {
              var diff = a.sortIndex - b2.sortIndex;
              return diff !== 0 ? diff : a.id - b2.id;
            }
            var ImmediatePriority = 1;
            var UserBlockingPriority = 2;
            var NormalPriority = 3;
            var LowPriority = 4;
            var IdlePriority = 5;
            function markTaskErrored(task, ms) {
            }
            var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
            if (hasPerformanceNow) {
              var localPerformance = performance;
              exports2.unstable_now = function() {
                return localPerformance.now();
              };
            } else {
              var localDate = Date;
              var initialTime = localDate.now();
              exports2.unstable_now = function() {
                return localDate.now() - initialTime;
              };
            }
            var maxSigned31BitInt = 1073741823;
            var IMMEDIATE_PRIORITY_TIMEOUT = -1;
            var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
            var NORMAL_PRIORITY_TIMEOUT = 5e3;
            var LOW_PRIORITY_TIMEOUT = 1e4;
            var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
            var taskQueue = [];
            var timerQueue = [];
            var taskIdCounter = 1;
            var currentTask = null;
            var currentPriorityLevel = NormalPriority;
            var isPerformingWork = false;
            var isHostCallbackScheduled = false;
            var isHostTimeoutScheduled = false;
            var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
            var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
            var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
            typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
            function advanceTimers(currentTime) {
              var timer = peek(timerQueue);
              while (timer !== null) {
                if (timer.callback === null) {
                  pop(timerQueue);
                } else if (timer.startTime <= currentTime) {
                  pop(timerQueue);
                  timer.sortIndex = timer.expirationTime;
                  push(taskQueue, timer);
                } else {
                  return;
                }
                timer = peek(timerQueue);
              }
            }
            function handleTimeout(currentTime) {
              isHostTimeoutScheduled = false;
              advanceTimers(currentTime);
              if (!isHostCallbackScheduled) {
                if (peek(taskQueue) !== null) {
                  isHostCallbackScheduled = true;
                  requestHostCallback(flushWork);
                } else {
                  var firstTimer = peek(timerQueue);
                  if (firstTimer !== null) {
                    requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                  }
                }
              }
            }
            function flushWork(hasTimeRemaining, initialTime2) {
              isHostCallbackScheduled = false;
              if (isHostTimeoutScheduled) {
                isHostTimeoutScheduled = false;
                cancelHostTimeout();
              }
              isPerformingWork = true;
              var previousPriorityLevel = currentPriorityLevel;
              try {
                var currentTime;
                if (enableProfiling)
                  ;
                else {
                  return workLoop(hasTimeRemaining, initialTime2);
                }
              } finally {
                currentTask = null;
                currentPriorityLevel = previousPriorityLevel;
                isPerformingWork = false;
              }
            }
            function workLoop(hasTimeRemaining, initialTime2) {
              var currentTime = initialTime2;
              advanceTimers(currentTime);
              currentTask = peek(taskQueue);
              while (currentTask !== null && !enableSchedulerDebugging) {
                if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                  break;
                }
                var callback = currentTask.callback;
                if (typeof callback === "function") {
                  currentTask.callback = null;
                  currentPriorityLevel = currentTask.priorityLevel;
                  var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                  var continuationCallback = callback(didUserCallbackTimeout);
                  currentTime = exports2.unstable_now();
                  if (typeof continuationCallback === "function") {
                    currentTask.callback = continuationCallback;
                  } else {
                    if (currentTask === peek(taskQueue)) {
                      pop(taskQueue);
                    }
                  }
                  advanceTimers(currentTime);
                } else {
                  pop(taskQueue);
                }
                currentTask = peek(taskQueue);
              }
              if (currentTask !== null) {
                return true;
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
                return false;
              }
            }
            function unstable_runWithPriority(priorityLevel, eventHandler) {
              switch (priorityLevel) {
                case ImmediatePriority:
                case UserBlockingPriority:
                case NormalPriority:
                case LowPriority:
                case IdlePriority:
                  break;
                default:
                  priorityLevel = NormalPriority;
              }
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = priorityLevel;
              try {
                return eventHandler();
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            }
            function unstable_next(eventHandler) {
              var priorityLevel;
              switch (currentPriorityLevel) {
                case ImmediatePriority:
                case UserBlockingPriority:
                case NormalPriority:
                  priorityLevel = NormalPriority;
                  break;
                default:
                  priorityLevel = currentPriorityLevel;
                  break;
              }
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = priorityLevel;
              try {
                return eventHandler();
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            }
            function unstable_wrapCallback(callback) {
              var parentPriorityLevel = currentPriorityLevel;
              return function() {
                var previousPriorityLevel = currentPriorityLevel;
                currentPriorityLevel = parentPriorityLevel;
                try {
                  return callback.apply(this, arguments);
                } finally {
                  currentPriorityLevel = previousPriorityLevel;
                }
              };
            }
            function unstable_scheduleCallback(priorityLevel, callback, options) {
              var currentTime = exports2.unstable_now();
              var startTime2;
              if (typeof options === "object" && options !== null) {
                var delay = options.delay;
                if (typeof delay === "number" && delay > 0) {
                  startTime2 = currentTime + delay;
                } else {
                  startTime2 = currentTime;
                }
              } else {
                startTime2 = currentTime;
              }
              var timeout;
              switch (priorityLevel) {
                case ImmediatePriority:
                  timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                  break;
                case UserBlockingPriority:
                  timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                  break;
                case IdlePriority:
                  timeout = IDLE_PRIORITY_TIMEOUT;
                  break;
                case LowPriority:
                  timeout = LOW_PRIORITY_TIMEOUT;
                  break;
                case NormalPriority:
                default:
                  timeout = NORMAL_PRIORITY_TIMEOUT;
                  break;
              }
              var expirationTime = startTime2 + timeout;
              var newTask = { id: taskIdCounter++, callback, priorityLevel, startTime: startTime2, expirationTime, sortIndex: -1 };
              if (startTime2 > currentTime) {
                newTask.sortIndex = startTime2;
                push(timerQueue, newTask);
                if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                  if (isHostTimeoutScheduled) {
                    cancelHostTimeout();
                  } else {
                    isHostTimeoutScheduled = true;
                  }
                  requestHostTimeout(handleTimeout, startTime2 - currentTime);
                }
              } else {
                newTask.sortIndex = expirationTime;
                push(taskQueue, newTask);
                if (!isHostCallbackScheduled && !isPerformingWork) {
                  isHostCallbackScheduled = true;
                  requestHostCallback(flushWork);
                }
              }
              return newTask;
            }
            function unstable_pauseExecution() {
            }
            function unstable_continueExecution() {
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            function unstable_getFirstCallbackNode() {
              return peek(taskQueue);
            }
            function unstable_cancelCallback(task) {
              task.callback = null;
            }
            function unstable_getCurrentPriorityLevel() {
              return currentPriorityLevel;
            }
            var isMessageLoopRunning = false;
            var scheduledHostCallback = null;
            var taskTimeoutID = -1;
            var frameInterval = frameYieldMs;
            var startTime = -1;
            function shouldYieldToHost() {
              var timeElapsed = exports2.unstable_now() - startTime;
              if (timeElapsed < frameInterval) {
                return false;
              }
              return true;
            }
            function requestPaint() {
            }
            function forceFrameRate(fps) {
              if (fps < 0 || fps > 125) {
                console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
              }
              if (fps > 0) {
                frameInterval = Math.floor(1e3 / fps);
              } else {
                frameInterval = frameYieldMs;
              }
            }
            var performWorkUntilDeadline = function() {
              if (scheduledHostCallback !== null) {
                var currentTime = exports2.unstable_now();
                startTime = currentTime;
                var hasTimeRemaining = true;
                var hasMoreWork = true;
                try {
                  hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                } finally {
                  if (hasMoreWork) {
                    schedulePerformWorkUntilDeadline();
                  } else {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                  }
                }
              } else {
                isMessageLoopRunning = false;
              }
            };
            var schedulePerformWorkUntilDeadline;
            if (typeof localSetImmediate === "function") {
              schedulePerformWorkUntilDeadline = function() {
                localSetImmediate(performWorkUntilDeadline);
              };
            } else if (typeof MessageChannel !== "undefined") {
              var channel = new MessageChannel();
              var port = channel.port2;
              channel.port1.onmessage = performWorkUntilDeadline;
              schedulePerformWorkUntilDeadline = function() {
                port.postMessage(null);
              };
            } else {
              schedulePerformWorkUntilDeadline = function() {
                localSetTimeout(performWorkUntilDeadline, 0);
              };
            }
            function requestHostCallback(callback) {
              scheduledHostCallback = callback;
              if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                schedulePerformWorkUntilDeadline();
              }
            }
            function requestHostTimeout(callback, ms) {
              taskTimeoutID = localSetTimeout(function() {
                callback(exports2.unstable_now());
              }, ms);
            }
            function cancelHostTimeout() {
              localClearTimeout(taskTimeoutID);
              taskTimeoutID = -1;
            }
            var unstable_requestPaint = requestPaint;
            var unstable_Profiling = null;
            exports2.unstable_IdlePriority = IdlePriority;
            exports2.unstable_ImmediatePriority = ImmediatePriority;
            exports2.unstable_LowPriority = LowPriority;
            exports2.unstable_NormalPriority = NormalPriority;
            exports2.unstable_Profiling = unstable_Profiling;
            exports2.unstable_UserBlockingPriority = UserBlockingPriority;
            exports2.unstable_cancelCallback = unstable_cancelCallback;
            exports2.unstable_continueExecution = unstable_continueExecution;
            exports2.unstable_forceFrameRate = forceFrameRate;
            exports2.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
            exports2.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
            exports2.unstable_next = unstable_next;
            exports2.unstable_pauseExecution = unstable_pauseExecution;
            exports2.unstable_requestPaint = unstable_requestPaint;
            exports2.unstable_runWithPriority = unstable_runWithPriority;
            exports2.unstable_scheduleCallback = unstable_scheduleCallback;
            exports2.unstable_shouldYield = shouldYieldToHost;
            exports2.unstable_wrapCallback = unstable_wrapCallback;
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
              __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
            }
          })();
        }
      })(scheduler_development);
      return scheduler_development;
    }
    var hasRequiredScheduler;
    function requireScheduler() {
      if (hasRequiredScheduler)
        return scheduler$1.exports;
      hasRequiredScheduler = 1;
      if (process.env.NODE_ENV === "production") {
        scheduler$1.exports = requireScheduler_production_min();
      } else {
        scheduler$1.exports = requireScheduler_development();
      }
      return scheduler$1.exports;
    }
    var hasRequiredReactDom_production_min;
    function requireReactDom_production_min() {
      if (hasRequiredReactDom_production_min)
        return reactDom_production_min;
      hasRequiredReactDom_production_min = 1;
      var aa = React__namespace.default, ca = requireScheduler();
      function p(a) {
        for (var b2 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++)
          b2 += "&args[]=" + encodeURIComponent(arguments[c]);
        return "Minified React error #" + a + "; visit " + b2 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
      }
      var da = /* @__PURE__ */ new Set(), ea = {};
      function fa(a, b2) {
        ha(a, b2);
        ha(a + "Capture", b2);
      }
      function ha(a, b2) {
        ea[a] = b2;
        for (a = 0; a < b2.length; a++)
          da.add(b2[a]);
      }
      var ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), ja = Object.prototype.hasOwnProperty, ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, la = {}, ma = {};
      function oa(a) {
        if (ja.call(ma, a))
          return true;
        if (ja.call(la, a))
          return false;
        if (ka.test(a))
          return ma[a] = true;
        la[a] = true;
        return false;
      }
      function pa(a, b2, c, d) {
        if (null !== c && 0 === c.type)
          return false;
        switch (typeof b2) {
          case "function":
          case "symbol":
            return true;
          case "boolean":
            if (d)
              return false;
            if (null !== c)
              return !c.acceptsBooleans;
            a = a.toLowerCase().slice(0, 5);
            return "data-" !== a && "aria-" !== a;
          default:
            return false;
        }
      }
      function qa(a, b2, c, d) {
        if (null === b2 || "undefined" === typeof b2 || pa(a, b2, c, d))
          return true;
        if (d)
          return false;
        if (null !== c)
          switch (c.type) {
            case 3:
              return !b2;
            case 4:
              return false === b2;
            case 5:
              return isNaN(b2);
            case 6:
              return isNaN(b2) || 1 > b2;
          }
        return false;
      }
      function v2(a, b2, c, d, e, f, g2) {
        this.acceptsBooleans = 2 === b2 || 3 === b2 || 4 === b2;
        this.attributeName = d;
        this.attributeNamespace = e;
        this.mustUseProperty = c;
        this.propertyName = a;
        this.type = b2;
        this.sanitizeURL = f;
        this.removeEmptyString = g2;
      }
      var z2 = {};
      "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a) {
        z2[a] = new v2(a, 0, false, a, null, false, false);
      });
      [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a) {
        var b2 = a[0];
        z2[b2] = new v2(b2, 1, false, a[1], null, false, false);
      });
      ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a) {
        z2[a] = new v2(a, 2, false, a.toLowerCase(), null, false, false);
      });
      ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a) {
        z2[a] = new v2(a, 2, false, a, null, false, false);
      });
      "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a) {
        z2[a] = new v2(a, 3, false, a.toLowerCase(), null, false, false);
      });
      ["checked", "multiple", "muted", "selected"].forEach(function(a) {
        z2[a] = new v2(a, 3, true, a, null, false, false);
      });
      ["capture", "download"].forEach(function(a) {
        z2[a] = new v2(a, 4, false, a, null, false, false);
      });
      ["cols", "rows", "size", "span"].forEach(function(a) {
        z2[a] = new v2(a, 6, false, a, null, false, false);
      });
      ["rowSpan", "start"].forEach(function(a) {
        z2[a] = new v2(a, 5, false, a.toLowerCase(), null, false, false);
      });
      var ra = /[\-:]([a-z])/g;
      function sa(a) {
        return a[1].toUpperCase();
      }
      "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a) {
        var b2 = a.replace(ra, sa);
        z2[b2] = new v2(b2, 1, false, a, null, false, false);
      });
      "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a) {
        var b2 = a.replace(ra, sa);
        z2[b2] = new v2(b2, 1, false, a, "http://www.w3.org/1999/xlink", false, false);
      });
      ["xml:base", "xml:lang", "xml:space"].forEach(function(a) {
        var b2 = a.replace(ra, sa);
        z2[b2] = new v2(b2, 1, false, a, "http://www.w3.org/XML/1998/namespace", false, false);
      });
      ["tabIndex", "crossOrigin"].forEach(function(a) {
        z2[a] = new v2(a, 1, false, a.toLowerCase(), null, false, false);
      });
      z2.xlinkHref = new v2("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
      ["src", "href", "action", "formAction"].forEach(function(a) {
        z2[a] = new v2(a, 1, false, a.toLowerCase(), null, true, true);
      });
      function ta(a, b2, c, d) {
        var e = z2.hasOwnProperty(b2) ? z2[b2] : null;
        if (null !== e ? 0 !== e.type : d || !(2 < b2.length) || "o" !== b2[0] && "O" !== b2[0] || "n" !== b2[1] && "N" !== b2[1])
          qa(b2, c, e, d) && (c = null), d || null === e ? oa(b2) && (null === c ? a.removeAttribute(b2) : a.setAttribute(b2, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? false : "" : c : (b2 = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b2) : (e = e.type, c = 3 === e || 4 === e && true === c ? "" : "" + c, d ? a.setAttributeNS(d, b2, c) : a.setAttribute(b2, c)));
      }
      var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, va = Symbol.for("react.element"), wa = Symbol.for("react.portal"), ya = Symbol.for("react.fragment"), za = Symbol.for("react.strict_mode"), Aa = Symbol.for("react.profiler"), Ba = Symbol.for("react.provider"), Ca = Symbol.for("react.context"), Da = Symbol.for("react.forward_ref"), Ea = Symbol.for("react.suspense"), Fa = Symbol.for("react.suspense_list"), Ga = Symbol.for("react.memo"), Ha = Symbol.for("react.lazy");
      var Ia = Symbol.for("react.offscreen");
      var Ja = Symbol.iterator;
      function Ka(a) {
        if (null === a || "object" !== typeof a)
          return null;
        a = Ja && a[Ja] || a["@@iterator"];
        return "function" === typeof a ? a : null;
      }
      var A = Object.assign, La;
      function Ma(a) {
        if (void 0 === La)
          try {
            throw Error();
          } catch (c) {
            var b2 = c.stack.trim().match(/\n( *(at )?)/);
            La = b2 && b2[1] || "";
          }
        return "\n" + La + a;
      }
      var Na = false;
      function Oa(a, b2) {
        if (!a || Na)
          return "";
        Na = true;
        var c = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        try {
          if (b2) {
            if (b2 = function() {
              throw Error();
            }, Object.defineProperty(b2.prototype, "props", { set: function() {
              throw Error();
            } }), "object" === typeof Reflect && Reflect.construct) {
              try {
                Reflect.construct(b2, []);
              } catch (l2) {
                var d = l2;
              }
              Reflect.construct(a, [], b2);
            } else {
              try {
                b2.call();
              } catch (l2) {
                d = l2;
              }
              a.call(b2.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (l2) {
              d = l2;
            }
            a();
          }
        } catch (l2) {
          if (l2 && d && "string" === typeof l2.stack) {
            for (var e = l2.stack.split("\n"), f = d.stack.split("\n"), g2 = e.length - 1, h2 = f.length - 1; 1 <= g2 && 0 <= h2 && e[g2] !== f[h2]; )
              h2--;
            for (; 1 <= g2 && 0 <= h2; g2--, h2--)
              if (e[g2] !== f[h2]) {
                if (1 !== g2 || 1 !== h2) {
                  do
                    if (g2--, h2--, 0 > h2 || e[g2] !== f[h2]) {
                      var k2 = "\n" + e[g2].replace(" at new ", " at ");
                      a.displayName && k2.includes("<anonymous>") && (k2 = k2.replace("<anonymous>", a.displayName));
                      return k2;
                    }
                  while (1 <= g2 && 0 <= h2);
                }
                break;
              }
          }
        } finally {
          Na = false, Error.prepareStackTrace = c;
        }
        return (a = a ? a.displayName || a.name : "") ? Ma(a) : "";
      }
      function Pa(a) {
        switch (a.tag) {
          case 5:
            return Ma(a.type);
          case 16:
            return Ma("Lazy");
          case 13:
            return Ma("Suspense");
          case 19:
            return Ma("SuspenseList");
          case 0:
          case 2:
          case 15:
            return a = Oa(a.type, false), a;
          case 11:
            return a = Oa(a.type.render, false), a;
          case 1:
            return a = Oa(a.type, true), a;
          default:
            return "";
        }
      }
      function Qa(a) {
        if (null == a)
          return null;
        if ("function" === typeof a)
          return a.displayName || a.name || null;
        if ("string" === typeof a)
          return a;
        switch (a) {
          case ya:
            return "Fragment";
          case wa:
            return "Portal";
          case Aa:
            return "Profiler";
          case za:
            return "StrictMode";
          case Ea:
            return "Suspense";
          case Fa:
            return "SuspenseList";
        }
        if ("object" === typeof a)
          switch (a.$$typeof) {
            case Ca:
              return (a.displayName || "Context") + ".Consumer";
            case Ba:
              return (a._context.displayName || "Context") + ".Provider";
            case Da:
              var b2 = a.render;
              a = a.displayName;
              a || (a = b2.displayName || b2.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
              return a;
            case Ga:
              return b2 = a.displayName || null, null !== b2 ? b2 : Qa(a.type) || "Memo";
            case Ha:
              b2 = a._payload;
              a = a._init;
              try {
                return Qa(a(b2));
              } catch (c) {
              }
          }
        return null;
      }
      function Ra(a) {
        var b2 = a.type;
        switch (a.tag) {
          case 24:
            return "Cache";
          case 9:
            return (b2.displayName || "Context") + ".Consumer";
          case 10:
            return (b2._context.displayName || "Context") + ".Provider";
          case 18:
            return "DehydratedFragment";
          case 11:
            return a = b2.render, a = a.displayName || a.name || "", b2.displayName || ("" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
          case 7:
            return "Fragment";
          case 5:
            return b2;
          case 4:
            return "Portal";
          case 3:
            return "Root";
          case 6:
            return "Text";
          case 16:
            return Qa(b2);
          case 8:
            return b2 === za ? "StrictMode" : "Mode";
          case 22:
            return "Offscreen";
          case 12:
            return "Profiler";
          case 21:
            return "Scope";
          case 13:
            return "Suspense";
          case 19:
            return "SuspenseList";
          case 25:
            return "TracingMarker";
          case 1:
          case 0:
          case 17:
          case 2:
          case 14:
          case 15:
            if ("function" === typeof b2)
              return b2.displayName || b2.name || null;
            if ("string" === typeof b2)
              return b2;
        }
        return null;
      }
      function Sa(a) {
        switch (typeof a) {
          case "boolean":
          case "number":
          case "string":
          case "undefined":
            return a;
          case "object":
            return a;
          default:
            return "";
        }
      }
      function Ta(a) {
        var b2 = a.type;
        return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b2 || "radio" === b2);
      }
      function Ua(a) {
        var b2 = Ta(a) ? "checked" : "value", c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b2), d = "" + a[b2];
        if (!a.hasOwnProperty(b2) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
          var e = c.get, f = c.set;
          Object.defineProperty(a, b2, { configurable: true, get: function() {
            return e.call(this);
          }, set: function(a2) {
            d = "" + a2;
            f.call(this, a2);
          } });
          Object.defineProperty(a, b2, { enumerable: c.enumerable });
          return { getValue: function() {
            return d;
          }, setValue: function(a2) {
            d = "" + a2;
          }, stopTracking: function() {
            a._valueTracker = null;
            delete a[b2];
          } };
        }
      }
      function Va(a) {
        a._valueTracker || (a._valueTracker = Ua(a));
      }
      function Wa(a) {
        if (!a)
          return false;
        var b2 = a._valueTracker;
        if (!b2)
          return true;
        var c = b2.getValue();
        var d = "";
        a && (d = Ta(a) ? a.checked ? "true" : "false" : a.value);
        a = d;
        return a !== c ? (b2.setValue(a), true) : false;
      }
      function Xa(a) {
        a = a || ("undefined" !== typeof document ? document : void 0);
        if ("undefined" === typeof a)
          return null;
        try {
          return a.activeElement || a.body;
        } catch (b2) {
          return a.body;
        }
      }
      function Ya(a, b2) {
        var c = b2.checked;
        return A({}, b2, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c ? c : a._wrapperState.initialChecked });
      }
      function Za(a, b2) {
        var c = null == b2.defaultValue ? "" : b2.defaultValue, d = null != b2.checked ? b2.checked : b2.defaultChecked;
        c = Sa(null != b2.value ? b2.value : c);
        a._wrapperState = { initialChecked: d, initialValue: c, controlled: "checkbox" === b2.type || "radio" === b2.type ? null != b2.checked : null != b2.value };
      }
      function ab(a, b2) {
        b2 = b2.checked;
        null != b2 && ta(a, "checked", b2, false);
      }
      function bb(a, b2) {
        ab(a, b2);
        var c = Sa(b2.value), d = b2.type;
        if (null != c) {
          if ("number" === d) {
            if (0 === c && "" === a.value || a.value != c)
              a.value = "" + c;
          } else
            a.value !== "" + c && (a.value = "" + c);
        } else if ("submit" === d || "reset" === d) {
          a.removeAttribute("value");
          return;
        }
        b2.hasOwnProperty("value") ? cb(a, b2.type, c) : b2.hasOwnProperty("defaultValue") && cb(a, b2.type, Sa(b2.defaultValue));
        null == b2.checked && null != b2.defaultChecked && (a.defaultChecked = !!b2.defaultChecked);
      }
      function db(a, b2, c) {
        if (b2.hasOwnProperty("value") || b2.hasOwnProperty("defaultValue")) {
          var d = b2.type;
          if (!("submit" !== d && "reset" !== d || void 0 !== b2.value && null !== b2.value))
            return;
          b2 = "" + a._wrapperState.initialValue;
          c || b2 === a.value || (a.value = b2);
          a.defaultValue = b2;
        }
        c = a.name;
        "" !== c && (a.name = "");
        a.defaultChecked = !!a._wrapperState.initialChecked;
        "" !== c && (a.name = c);
      }
      function cb(a, b2, c) {
        if ("number" !== b2 || Xa(a.ownerDocument) !== a)
          null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
      }
      var eb = Array.isArray;
      function fb(a, b2, c, d) {
        a = a.options;
        if (b2) {
          b2 = {};
          for (var e = 0; e < c.length; e++)
            b2["$" + c[e]] = true;
          for (c = 0; c < a.length; c++)
            e = b2.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = true);
        } else {
          c = "" + Sa(c);
          b2 = null;
          for (e = 0; e < a.length; e++) {
            if (a[e].value === c) {
              a[e].selected = true;
              d && (a[e].defaultSelected = true);
              return;
            }
            null !== b2 || a[e].disabled || (b2 = a[e]);
          }
          null !== b2 && (b2.selected = true);
        }
      }
      function gb(a, b2) {
        if (null != b2.dangerouslySetInnerHTML)
          throw Error(p(91));
        return A({}, b2, { value: void 0, defaultValue: void 0, children: "" + a._wrapperState.initialValue });
      }
      function hb(a, b2) {
        var c = b2.value;
        if (null == c) {
          c = b2.children;
          b2 = b2.defaultValue;
          if (null != c) {
            if (null != b2)
              throw Error(p(92));
            if (eb(c)) {
              if (1 < c.length)
                throw Error(p(93));
              c = c[0];
            }
            b2 = c;
          }
          null == b2 && (b2 = "");
          c = b2;
        }
        a._wrapperState = { initialValue: Sa(c) };
      }
      function ib(a, b2) {
        var c = Sa(b2.value), d = Sa(b2.defaultValue);
        null != c && (c = "" + c, c !== a.value && (a.value = c), null == b2.defaultValue && a.defaultValue !== c && (a.defaultValue = c));
        null != d && (a.defaultValue = "" + d);
      }
      function jb(a) {
        var b2 = a.textContent;
        b2 === a._wrapperState.initialValue && "" !== b2 && null !== b2 && (a.value = b2);
      }
      function kb(a) {
        switch (a) {
          case "svg":
            return "http://www.w3.org/2000/svg";
          case "math":
            return "http://www.w3.org/1998/Math/MathML";
          default:
            return "http://www.w3.org/1999/xhtml";
        }
      }
      function lb(a, b2) {
        return null == a || "http://www.w3.org/1999/xhtml" === a ? kb(b2) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b2 ? "http://www.w3.org/1999/xhtml" : a;
      }
      var mb, nb = function(a) {
        return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b2, c, d, e) {
          MSApp.execUnsafeLocalFunction(function() {
            return a(b2, c, d, e);
          });
        } : a;
      }(function(a, b2) {
        if ("http://www.w3.org/2000/svg" !== a.namespaceURI || "innerHTML" in a)
          a.innerHTML = b2;
        else {
          mb = mb || document.createElement("div");
          mb.innerHTML = "<svg>" + b2.valueOf().toString() + "</svg>";
          for (b2 = mb.firstChild; a.firstChild; )
            a.removeChild(a.firstChild);
          for (; b2.firstChild; )
            a.appendChild(b2.firstChild);
        }
      });
      function ob(a, b2) {
        if (b2) {
          var c = a.firstChild;
          if (c && c === a.lastChild && 3 === c.nodeType) {
            c.nodeValue = b2;
            return;
          }
        }
        a.textContent = b2;
      }
      var pb = { animationIterationCount: true, aspectRatio: true, borderImageOutset: true, borderImageSlice: true, borderImageWidth: true, boxFlex: true, boxFlexGroup: true, boxOrdinalGroup: true, columnCount: true, columns: true, flex: true, flexGrow: true, flexPositive: true, flexShrink: true, flexNegative: true, flexOrder: true, gridArea: true, gridRow: true, gridRowEnd: true, gridRowSpan: true, gridRowStart: true, gridColumn: true, gridColumnEnd: true, gridColumnSpan: true, gridColumnStart: true, fontWeight: true, lineClamp: true, lineHeight: true, opacity: true, order: true, orphans: true, tabSize: true, widows: true, zIndex: true, zoom: true, fillOpacity: true, floodOpacity: true, stopOpacity: true, strokeDasharray: true, strokeDashoffset: true, strokeMiterlimit: true, strokeOpacity: true, strokeWidth: true }, qb = ["Webkit", "ms", "Moz", "O"];
      Object.keys(pb).forEach(function(a) {
        qb.forEach(function(b2) {
          b2 = b2 + a.charAt(0).toUpperCase() + a.substring(1);
          pb[b2] = pb[a];
        });
      });
      function rb(a, b2, c) {
        return null == b2 || "boolean" === typeof b2 || "" === b2 ? "" : c || "number" !== typeof b2 || 0 === b2 || pb.hasOwnProperty(a) && pb[a] ? ("" + b2).trim() : b2 + "px";
      }
      function sb(a, b2) {
        a = a.style;
        for (var c in b2)
          if (b2.hasOwnProperty(c)) {
            var d = 0 === c.indexOf("--"), e = rb(c, b2[c], d);
            "float" === c && (c = "cssFloat");
            d ? a.setProperty(c, e) : a[c] = e;
          }
      }
      var tb = A({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
      function ub(a, b2) {
        if (b2) {
          if (tb[a] && (null != b2.children || null != b2.dangerouslySetInnerHTML))
            throw Error(p(137, a));
          if (null != b2.dangerouslySetInnerHTML) {
            if (null != b2.children)
              throw Error(p(60));
            if ("object" !== typeof b2.dangerouslySetInnerHTML || !("__html" in b2.dangerouslySetInnerHTML))
              throw Error(p(61));
          }
          if (null != b2.style && "object" !== typeof b2.style)
            throw Error(p(62));
        }
      }
      function vb(a, b2) {
        if (-1 === a.indexOf("-"))
          return "string" === typeof b2.is;
        switch (a) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return false;
          default:
            return true;
        }
      }
      var wb = null;
      function xb(a) {
        a = a.target || a.srcElement || window;
        a.correspondingUseElement && (a = a.correspondingUseElement);
        return 3 === a.nodeType ? a.parentNode : a;
      }
      var yb = null, zb = null, Ab = null;
      function Bb(a) {
        if (a = Cb(a)) {
          if ("function" !== typeof yb)
            throw Error(p(280));
          var b2 = a.stateNode;
          b2 && (b2 = Db(b2), yb(a.stateNode, a.type, b2));
        }
      }
      function Eb(a) {
        zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;
      }
      function Fb() {
        if (zb) {
          var a = zb, b2 = Ab;
          Ab = zb = null;
          Bb(a);
          if (b2)
            for (a = 0; a < b2.length; a++)
              Bb(b2[a]);
        }
      }
      function Gb(a, b2) {
        return a(b2);
      }
      function Hb() {
      }
      var Ib = false;
      function Jb(a, b2, c) {
        if (Ib)
          return a(b2, c);
        Ib = true;
        try {
          return Gb(a, b2, c);
        } finally {
          if (Ib = false, null !== zb || null !== Ab)
            Hb(), Fb();
        }
      }
      function Kb(a, b2) {
        var c = a.stateNode;
        if (null === c)
          return null;
        var d = Db(c);
        if (null === d)
          return null;
        c = d[b2];
        a:
          switch (b2) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));
              a = !d;
              break a;
            default:
              a = false;
          }
        if (a)
          return null;
        if (c && "function" !== typeof c)
          throw Error(p(231, b2, typeof c));
        return c;
      }
      var Lb = false;
      if (ia)
        try {
          var Mb = {};
          Object.defineProperty(Mb, "passive", { get: function() {
            Lb = true;
          } });
          window.addEventListener("test", Mb, Mb);
          window.removeEventListener("test", Mb, Mb);
        } catch (a) {
          Lb = false;
        }
      function Nb(a, b2, c, d, e, f, g2, h2, k2) {
        var l2 = Array.prototype.slice.call(arguments, 3);
        try {
          b2.apply(c, l2);
        } catch (m2) {
          this.onError(m2);
        }
      }
      var Ob = false, Pb = null, Qb = false, Rb = null, Sb = { onError: function(a) {
        Ob = true;
        Pb = a;
      } };
      function Tb(a, b2, c, d, e, f, g2, h2, k2) {
        Ob = false;
        Pb = null;
        Nb.apply(Sb, arguments);
      }
      function Ub(a, b2, c, d, e, f, g2, h2, k2) {
        Tb.apply(this, arguments);
        if (Ob) {
          if (Ob) {
            var l2 = Pb;
            Ob = false;
            Pb = null;
          } else
            throw Error(p(198));
          Qb || (Qb = true, Rb = l2);
        }
      }
      function Vb(a) {
        var b2 = a, c = a;
        if (a.alternate)
          for (; b2.return; )
            b2 = b2.return;
        else {
          a = b2;
          do
            b2 = a, 0 !== (b2.flags & 4098) && (c = b2.return), a = b2.return;
          while (a);
        }
        return 3 === b2.tag ? c : null;
      }
      function Wb(a) {
        if (13 === a.tag) {
          var b2 = a.memoizedState;
          null === b2 && (a = a.alternate, null !== a && (b2 = a.memoizedState));
          if (null !== b2)
            return b2.dehydrated;
        }
        return null;
      }
      function Xb(a) {
        if (Vb(a) !== a)
          throw Error(p(188));
      }
      function Yb(a) {
        var b2 = a.alternate;
        if (!b2) {
          b2 = Vb(a);
          if (null === b2)
            throw Error(p(188));
          return b2 !== a ? null : a;
        }
        for (var c = a, d = b2; ; ) {
          var e = c.return;
          if (null === e)
            break;
          var f = e.alternate;
          if (null === f) {
            d = e.return;
            if (null !== d) {
              c = d;
              continue;
            }
            break;
          }
          if (e.child === f.child) {
            for (f = e.child; f; ) {
              if (f === c)
                return Xb(e), a;
              if (f === d)
                return Xb(e), b2;
              f = f.sibling;
            }
            throw Error(p(188));
          }
          if (c.return !== d.return)
            c = e, d = f;
          else {
            for (var g2 = false, h2 = e.child; h2; ) {
              if (h2 === c) {
                g2 = true;
                c = e;
                d = f;
                break;
              }
              if (h2 === d) {
                g2 = true;
                d = e;
                c = f;
                break;
              }
              h2 = h2.sibling;
            }
            if (!g2) {
              for (h2 = f.child; h2; ) {
                if (h2 === c) {
                  g2 = true;
                  c = f;
                  d = e;
                  break;
                }
                if (h2 === d) {
                  g2 = true;
                  d = f;
                  c = e;
                  break;
                }
                h2 = h2.sibling;
              }
              if (!g2)
                throw Error(p(189));
            }
          }
          if (c.alternate !== d)
            throw Error(p(190));
        }
        if (3 !== c.tag)
          throw Error(p(188));
        return c.stateNode.current === c ? a : b2;
      }
      function Zb(a) {
        a = Yb(a);
        return null !== a ? $b(a) : null;
      }
      function $b(a) {
        if (5 === a.tag || 6 === a.tag)
          return a;
        for (a = a.child; null !== a; ) {
          var b2 = $b(a);
          if (null !== b2)
            return b2;
          a = a.sibling;
        }
        return null;
      }
      var ac2 = ca.unstable_scheduleCallback, bc = ca.unstable_cancelCallback, cc = ca.unstable_shouldYield, dc = ca.unstable_requestPaint, B2 = ca.unstable_now, ec = ca.unstable_getCurrentPriorityLevel, fc = ca.unstable_ImmediatePriority, gc = ca.unstable_UserBlockingPriority, hc = ca.unstable_NormalPriority, ic2 = ca.unstable_LowPriority, jc = ca.unstable_IdlePriority, kc = null, lc = null;
      function mc(a) {
        if (lc && "function" === typeof lc.onCommitFiberRoot)
          try {
            lc.onCommitFiberRoot(kc, a, void 0, 128 === (a.current.flags & 128));
          } catch (b2) {
          }
      }
      var oc = Math.clz32 ? Math.clz32 : nc, pc = Math.log, qc = Math.LN2;
      function nc(a) {
        a >>>= 0;
        return 0 === a ? 32 : 31 - (pc(a) / qc | 0) | 0;
      }
      var rc = 64, sc2 = 4194304;
      function tc(a) {
        switch (a & -a) {
          case 1:
            return 1;
          case 2:
            return 2;
          case 4:
            return 4;
          case 8:
            return 8;
          case 16:
            return 16;
          case 32:
            return 32;
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return a & 4194240;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
          case 67108864:
            return a & 130023424;
          case 134217728:
            return 134217728;
          case 268435456:
            return 268435456;
          case 536870912:
            return 536870912;
          case 1073741824:
            return 1073741824;
          default:
            return a;
        }
      }
      function uc(a, b2) {
        var c = a.pendingLanes;
        if (0 === c)
          return 0;
        var d = 0, e = a.suspendedLanes, f = a.pingedLanes, g2 = c & 268435455;
        if (0 !== g2) {
          var h2 = g2 & ~e;
          0 !== h2 ? d = tc(h2) : (f &= g2, 0 !== f && (d = tc(f)));
        } else
          g2 = c & ~e, 0 !== g2 ? d = tc(g2) : 0 !== f && (d = tc(f));
        if (0 === d)
          return 0;
        if (0 !== b2 && b2 !== d && 0 === (b2 & e) && (e = d & -d, f = b2 & -b2, e >= f || 16 === e && 0 !== (f & 4194240)))
          return b2;
        0 !== (d & 4) && (d |= c & 16);
        b2 = a.entangledLanes;
        if (0 !== b2)
          for (a = a.entanglements, b2 &= d; 0 < b2; )
            c = 31 - oc(b2), e = 1 << c, d |= a[c], b2 &= ~e;
        return d;
      }
      function vc(a, b2) {
        switch (a) {
          case 1:
          case 2:
          case 4:
            return b2 + 250;
          case 8:
          case 16:
          case 32:
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return b2 + 5e3;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
          case 67108864:
            return -1;
          case 134217728:
          case 268435456:
          case 536870912:
          case 1073741824:
            return -1;
          default:
            return -1;
        }
      }
      function wc(a, b2) {
        for (var c = a.suspendedLanes, d = a.pingedLanes, e = a.expirationTimes, f = a.pendingLanes; 0 < f; ) {
          var g2 = 31 - oc(f), h2 = 1 << g2, k2 = e[g2];
          if (-1 === k2) {
            if (0 === (h2 & c) || 0 !== (h2 & d))
              e[g2] = vc(h2, b2);
          } else
            k2 <= b2 && (a.expiredLanes |= h2);
          f &= ~h2;
        }
      }
      function xc(a) {
        a = a.pendingLanes & -1073741825;
        return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
      }
      function yc() {
        var a = rc;
        rc <<= 1;
        0 === (rc & 4194240) && (rc = 64);
        return a;
      }
      function zc(a) {
        for (var b2 = [], c = 0; 31 > c; c++)
          b2.push(a);
        return b2;
      }
      function Ac(a, b2, c) {
        a.pendingLanes |= b2;
        536870912 !== b2 && (a.suspendedLanes = 0, a.pingedLanes = 0);
        a = a.eventTimes;
        b2 = 31 - oc(b2);
        a[b2] = c;
      }
      function Bc(a, b2) {
        var c = a.pendingLanes & ~b2;
        a.pendingLanes = b2;
        a.suspendedLanes = 0;
        a.pingedLanes = 0;
        a.expiredLanes &= b2;
        a.mutableReadLanes &= b2;
        a.entangledLanes &= b2;
        b2 = a.entanglements;
        var d = a.eventTimes;
        for (a = a.expirationTimes; 0 < c; ) {
          var e = 31 - oc(c), f = 1 << e;
          b2[e] = 0;
          d[e] = -1;
          a[e] = -1;
          c &= ~f;
        }
      }
      function Cc(a, b2) {
        var c = a.entangledLanes |= b2;
        for (a = a.entanglements; c; ) {
          var d = 31 - oc(c), e = 1 << d;
          e & b2 | a[d] & b2 && (a[d] |= b2);
          c &= ~e;
        }
      }
      var C2 = 0;
      function Dc(a) {
        a &= -a;
        return 1 < a ? 4 < a ? 0 !== (a & 268435455) ? 16 : 536870912 : 4 : 1;
      }
      var Ec, Fc, Gc, Hc, Ic, Jc = false, Kc = [], Lc = null, Mc = null, Nc = null, Oc = /* @__PURE__ */ new Map(), Pc = /* @__PURE__ */ new Map(), Qc = [], Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
      function Sc2(a, b2) {
        switch (a) {
          case "focusin":
          case "focusout":
            Lc = null;
            break;
          case "dragenter":
          case "dragleave":
            Mc = null;
            break;
          case "mouseover":
          case "mouseout":
            Nc = null;
            break;
          case "pointerover":
          case "pointerout":
            Oc.delete(b2.pointerId);
            break;
          case "gotpointercapture":
          case "lostpointercapture":
            Pc.delete(b2.pointerId);
        }
      }
      function Tc(a, b2, c, d, e, f) {
        if (null === a || a.nativeEvent !== f)
          return a = { blockedOn: b2, domEventName: c, eventSystemFlags: d, nativeEvent: f, targetContainers: [e] }, null !== b2 && (b2 = Cb(b2), null !== b2 && Fc(b2)), a;
        a.eventSystemFlags |= d;
        b2 = a.targetContainers;
        null !== e && -1 === b2.indexOf(e) && b2.push(e);
        return a;
      }
      function Uc(a, b2, c, d, e) {
        switch (b2) {
          case "focusin":
            return Lc = Tc(Lc, a, b2, c, d, e), true;
          case "dragenter":
            return Mc = Tc(Mc, a, b2, c, d, e), true;
          case "mouseover":
            return Nc = Tc(Nc, a, b2, c, d, e), true;
          case "pointerover":
            var f = e.pointerId;
            Oc.set(f, Tc(Oc.get(f) || null, a, b2, c, d, e));
            return true;
          case "gotpointercapture":
            return f = e.pointerId, Pc.set(f, Tc(Pc.get(f) || null, a, b2, c, d, e)), true;
        }
        return false;
      }
      function Vc(a) {
        var b2 = Wc(a.target);
        if (null !== b2) {
          var c = Vb(b2);
          if (null !== c) {
            if (b2 = c.tag, 13 === b2) {
              if (b2 = Wb(c), null !== b2) {
                a.blockedOn = b2;
                Ic(a.priority, function() {
                  Gc(c);
                });
                return;
              }
            } else if (3 === b2 && c.stateNode.current.memoizedState.isDehydrated) {
              a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;
              return;
            }
          }
        }
        a.blockedOn = null;
      }
      function Xc(a) {
        if (null !== a.blockedOn)
          return false;
        for (var b2 = a.targetContainers; 0 < b2.length; ) {
          var c = Yc(a.domEventName, a.eventSystemFlags, b2[0], a.nativeEvent);
          if (null === c) {
            c = a.nativeEvent;
            var d = new c.constructor(c.type, c);
            wb = d;
            c.target.dispatchEvent(d);
            wb = null;
          } else
            return b2 = Cb(c), null !== b2 && Fc(b2), a.blockedOn = c, false;
          b2.shift();
        }
        return true;
      }
      function Zc(a, b2, c) {
        Xc(a) && c.delete(b2);
      }
      function $c() {
        Jc = false;
        null !== Lc && Xc(Lc) && (Lc = null);
        null !== Mc && Xc(Mc) && (Mc = null);
        null !== Nc && Xc(Nc) && (Nc = null);
        Oc.forEach(Zc);
        Pc.forEach(Zc);
      }
      function ad(a, b2) {
        a.blockedOn === b2 && (a.blockedOn = null, Jc || (Jc = true, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
      }
      function bd(a) {
        function b2(b3) {
          return ad(b3, a);
        }
        if (0 < Kc.length) {
          ad(Kc[0], a);
          for (var c = 1; c < Kc.length; c++) {
            var d = Kc[c];
            d.blockedOn === a && (d.blockedOn = null);
          }
        }
        null !== Lc && ad(Lc, a);
        null !== Mc && ad(Mc, a);
        null !== Nc && ad(Nc, a);
        Oc.forEach(b2);
        Pc.forEach(b2);
        for (c = 0; c < Qc.length; c++)
          d = Qc[c], d.blockedOn === a && (d.blockedOn = null);
        for (; 0 < Qc.length && (c = Qc[0], null === c.blockedOn); )
          Vc(c), null === c.blockedOn && Qc.shift();
      }
      var cd = ua.ReactCurrentBatchConfig, dd2 = true;
      function ed(a, b2, c, d) {
        var e = C2, f = cd.transition;
        cd.transition = null;
        try {
          C2 = 1, fd(a, b2, c, d);
        } finally {
          C2 = e, cd.transition = f;
        }
      }
      function gd(a, b2, c, d) {
        var e = C2, f = cd.transition;
        cd.transition = null;
        try {
          C2 = 4, fd(a, b2, c, d);
        } finally {
          C2 = e, cd.transition = f;
        }
      }
      function fd(a, b2, c, d) {
        if (dd2) {
          var e = Yc(a, b2, c, d);
          if (null === e)
            hd(a, b2, d, id, c), Sc2(a, d);
          else if (Uc(e, a, b2, c, d))
            d.stopPropagation();
          else if (Sc2(a, d), b2 & 4 && -1 < Rc.indexOf(a)) {
            for (; null !== e; ) {
              var f = Cb(e);
              null !== f && Ec(f);
              f = Yc(a, b2, c, d);
              null === f && hd(a, b2, d, id, c);
              if (f === e)
                break;
              e = f;
            }
            null !== e && d.stopPropagation();
          } else
            hd(a, b2, d, null, c);
        }
      }
      var id = null;
      function Yc(a, b2, c, d) {
        id = null;
        a = xb(d);
        a = Wc(a);
        if (null !== a)
          if (b2 = Vb(a), null === b2)
            a = null;
          else if (c = b2.tag, 13 === c) {
            a = Wb(b2);
            if (null !== a)
              return a;
            a = null;
          } else if (3 === c) {
            if (b2.stateNode.current.memoizedState.isDehydrated)
              return 3 === b2.tag ? b2.stateNode.containerInfo : null;
            a = null;
          } else
            b2 !== a && (a = null);
        id = a;
        return null;
      }
      function jd(a) {
        switch (a) {
          case "cancel":
          case "click":
          case "close":
          case "contextmenu":
          case "copy":
          case "cut":
          case "auxclick":
          case "dblclick":
          case "dragend":
          case "dragstart":
          case "drop":
          case "focusin":
          case "focusout":
          case "input":
          case "invalid":
          case "keydown":
          case "keypress":
          case "keyup":
          case "mousedown":
          case "mouseup":
          case "paste":
          case "pause":
          case "play":
          case "pointercancel":
          case "pointerdown":
          case "pointerup":
          case "ratechange":
          case "reset":
          case "resize":
          case "seeked":
          case "submit":
          case "touchcancel":
          case "touchend":
          case "touchstart":
          case "volumechange":
          case "change":
          case "selectionchange":
          case "textInput":
          case "compositionstart":
          case "compositionend":
          case "compositionupdate":
          case "beforeblur":
          case "afterblur":
          case "beforeinput":
          case "blur":
          case "fullscreenchange":
          case "focus":
          case "hashchange":
          case "popstate":
          case "select":
          case "selectstart":
            return 1;
          case "drag":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "mousemove":
          case "mouseout":
          case "mouseover":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "scroll":
          case "toggle":
          case "touchmove":
          case "wheel":
          case "mouseenter":
          case "mouseleave":
          case "pointerenter":
          case "pointerleave":
            return 4;
          case "message":
            switch (ec()) {
              case fc:
                return 1;
              case gc:
                return 4;
              case hc:
              case ic2:
                return 16;
              case jc:
                return 536870912;
              default:
                return 16;
            }
          default:
            return 16;
        }
      }
      var kd = null, ld = null, md = null;
      function nd() {
        if (md)
          return md;
        var a, b2 = ld, c = b2.length, d, e = "value" in kd ? kd.value : kd.textContent, f = e.length;
        for (a = 0; a < c && b2[a] === e[a]; a++)
          ;
        var g2 = c - a;
        for (d = 1; d <= g2 && b2[c - d] === e[f - d]; d++)
          ;
        return md = e.slice(a, 1 < d ? 1 - d : void 0);
      }
      function od(a) {
        var b2 = a.keyCode;
        "charCode" in a ? (a = a.charCode, 0 === a && 13 === b2 && (a = 13)) : a = b2;
        10 === a && (a = 13);
        return 32 <= a || 13 === a ? a : 0;
      }
      function pd() {
        return true;
      }
      function qd() {
        return false;
      }
      function rd(a) {
        function b2(b3, d, e, f, g2) {
          this._reactName = b3;
          this._targetInst = e;
          this.type = d;
          this.nativeEvent = f;
          this.target = g2;
          this.currentTarget = null;
          for (var c in a)
            a.hasOwnProperty(c) && (b3 = a[c], this[c] = b3 ? b3(f) : f[c]);
          this.isDefaultPrevented = (null != f.defaultPrevented ? f.defaultPrevented : false === f.returnValue) ? pd : qd;
          this.isPropagationStopped = qd;
          return this;
        }
        A(b2.prototype, { preventDefault: function() {
          this.defaultPrevented = true;
          var a2 = this.nativeEvent;
          a2 && (a2.preventDefault ? a2.preventDefault() : "unknown" !== typeof a2.returnValue && (a2.returnValue = false), this.isDefaultPrevented = pd);
        }, stopPropagation: function() {
          var a2 = this.nativeEvent;
          a2 && (a2.stopPropagation ? a2.stopPropagation() : "unknown" !== typeof a2.cancelBubble && (a2.cancelBubble = true), this.isPropagationStopped = pd);
        }, persist: function() {
        }, isPersistent: pd });
        return b2;
      }
      var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a) {
        return a.timeStamp || Date.now();
      }, defaultPrevented: 0, isTrusted: 0 }, td = rd(sd), ud = A({}, sd, { view: 0, detail: 0 }), vd = rd(ud), wd, xd, yd, Ad = A({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a) {
        return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
      }, movementX: function(a) {
        if ("movementX" in a)
          return a.movementX;
        a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);
        return wd;
      }, movementY: function(a) {
        return "movementY" in a ? a.movementY : xd;
      } }), Bd = rd(Ad), Cd = A({}, Ad, { dataTransfer: 0 }), Dd = rd(Cd), Ed = A({}, ud, { relatedTarget: 0 }), Fd = rd(Ed), Gd = A({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }), Hd = rd(Gd), Id = A({}, sd, { clipboardData: function(a) {
        return "clipboardData" in a ? a.clipboardData : window.clipboardData;
      } }), Jd = rd(Id), Kd = A({}, sd, { data: 0 }), Ld = rd(Kd), Md = { Esc: "Escape", Spacebar: " ", Left: "ArrowLeft", Up: "ArrowUp", Right: "ArrowRight", Down: "ArrowDown", Del: "Delete", Win: "OS", Menu: "ContextMenu", Apps: "ContextMenu", Scroll: "ScrollLock", MozPrintableKey: "Unidentified" }, Nd = { 8: "Backspace", 9: "Tab", 12: "Clear", 13: "Enter", 16: "Shift", 17: "Control", 18: "Alt", 19: "Pause", 20: "CapsLock", 27: "Escape", 32: " ", 33: "PageUp", 34: "PageDown", 35: "End", 36: "Home", 37: "ArrowLeft", 38: "ArrowUp", 39: "ArrowRight", 40: "ArrowDown", 45: "Insert", 46: "Delete", 112: "F1", 113: "F2", 114: "F3", 115: "F4", 116: "F5", 117: "F6", 118: "F7", 119: "F8", 120: "F9", 121: "F10", 122: "F11", 123: "F12", 144: "NumLock", 145: "ScrollLock", 224: "Meta" }, Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
      function Pd(a) {
        var b2 = this.nativeEvent;
        return b2.getModifierState ? b2.getModifierState(a) : (a = Od[a]) ? !!b2[a] : false;
      }
      function zd() {
        return Pd;
      }
      var Qd = A({}, ud, { key: function(a) {
        if (a.key) {
          var b2 = Md[a.key] || a.key;
          if ("Unidentified" !== b2)
            return b2;
        }
        return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";
      }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a) {
        return "keypress" === a.type ? od(a) : 0;
      }, keyCode: function(a) {
        return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
      }, which: function(a) {
        return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
      } }), Rd = rd(Qd), Sd = A({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }), Td = rd(Sd), Ud = A({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd }), Vd = rd(Ud), Wd = A({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }), Xd = rd(Wd), Yd = A({}, Ad, { deltaX: function(a) {
        return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
      }, deltaY: function(a) {
        return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
      }, deltaZ: 0, deltaMode: 0 }), Zd = rd(Yd), $d = [9, 13, 27, 32], ae2 = ia && "CompositionEvent" in window, be2 = null;
      ia && "documentMode" in document && (be2 = document.documentMode);
      var ce2 = ia && "TextEvent" in window && !be2, de2 = ia && (!ae2 || be2 && 8 < be2 && 11 >= be2), ee2 = String.fromCharCode(32), fe2 = false;
      function ge2(a, b2) {
        switch (a) {
          case "keyup":
            return -1 !== $d.indexOf(b2.keyCode);
          case "keydown":
            return 229 !== b2.keyCode;
          case "keypress":
          case "mousedown":
          case "focusout":
            return true;
          default:
            return false;
        }
      }
      function he2(a) {
        a = a.detail;
        return "object" === typeof a && "data" in a ? a.data : null;
      }
      var ie2 = false;
      function je2(a, b2) {
        switch (a) {
          case "compositionend":
            return he2(b2);
          case "keypress":
            if (32 !== b2.which)
              return null;
            fe2 = true;
            return ee2;
          case "textInput":
            return a = b2.data, a === ee2 && fe2 ? null : a;
          default:
            return null;
        }
      }
      function ke2(a, b2) {
        if (ie2)
          return "compositionend" === a || !ae2 && ge2(a, b2) ? (a = nd(), md = ld = kd = null, ie2 = false, a) : null;
        switch (a) {
          case "paste":
            return null;
          case "keypress":
            if (!(b2.ctrlKey || b2.altKey || b2.metaKey) || b2.ctrlKey && b2.altKey) {
              if (b2.char && 1 < b2.char.length)
                return b2.char;
              if (b2.which)
                return String.fromCharCode(b2.which);
            }
            return null;
          case "compositionend":
            return de2 && "ko" !== b2.locale ? null : b2.data;
          default:
            return null;
        }
      }
      var le2 = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
      function me(a) {
        var b2 = a && a.nodeName && a.nodeName.toLowerCase();
        return "input" === b2 ? !!le2[a.type] : "textarea" === b2 ? true : false;
      }
      function ne2(a, b2, c, d) {
        Eb(d);
        b2 = oe2(b2, "onChange");
        0 < b2.length && (c = new td("onChange", "change", null, c, d), a.push({ event: c, listeners: b2 }));
      }
      var pe2 = null, qe2 = null;
      function re2(a) {
        se2(a, 0);
      }
      function te2(a) {
        var b2 = ue(a);
        if (Wa(b2))
          return a;
      }
      function ve2(a, b2) {
        if ("change" === a)
          return b2;
      }
      var we2 = false;
      if (ia) {
        var xe2;
        if (ia) {
          var ye2 = "oninput" in document;
          if (!ye2) {
            var ze2 = document.createElement("div");
            ze2.setAttribute("oninput", "return;");
            ye2 = "function" === typeof ze2.oninput;
          }
          xe2 = ye2;
        } else
          xe2 = false;
        we2 = xe2 && (!document.documentMode || 9 < document.documentMode);
      }
      function Ae2() {
        pe2 && (pe2.detachEvent("onpropertychange", Be2), qe2 = pe2 = null);
      }
      function Be2(a) {
        if ("value" === a.propertyName && te2(qe2)) {
          var b2 = [];
          ne2(b2, qe2, a, xb(a));
          Jb(re2, b2);
        }
      }
      function Ce2(a, b2, c) {
        "focusin" === a ? (Ae2(), pe2 = b2, qe2 = c, pe2.attachEvent("onpropertychange", Be2)) : "focusout" === a && Ae2();
      }
      function De2(a) {
        if ("selectionchange" === a || "keyup" === a || "keydown" === a)
          return te2(qe2);
      }
      function Ee2(a, b2) {
        if ("click" === a)
          return te2(b2);
      }
      function Fe2(a, b2) {
        if ("input" === a || "change" === a)
          return te2(b2);
      }
      function Ge(a, b2) {
        return a === b2 && (0 !== a || 1 / a === 1 / b2) || a !== a && b2 !== b2;
      }
      var He2 = "function" === typeof Object.is ? Object.is : Ge;
      function Ie2(a, b2) {
        if (He2(a, b2))
          return true;
        if ("object" !== typeof a || null === a || "object" !== typeof b2 || null === b2)
          return false;
        var c = Object.keys(a), d = Object.keys(b2);
        if (c.length !== d.length)
          return false;
        for (d = 0; d < c.length; d++) {
          var e = c[d];
          if (!ja.call(b2, e) || !He2(a[e], b2[e]))
            return false;
        }
        return true;
      }
      function Je(a) {
        for (; a && a.firstChild; )
          a = a.firstChild;
        return a;
      }
      function Ke(a, b2) {
        var c = Je(a);
        a = 0;
        for (var d; c; ) {
          if (3 === c.nodeType) {
            d = a + c.textContent.length;
            if (a <= b2 && d >= b2)
              return { node: c, offset: b2 - a };
            a = d;
          }
          a: {
            for (; c; ) {
              if (c.nextSibling) {
                c = c.nextSibling;
                break a;
              }
              c = c.parentNode;
            }
            c = void 0;
          }
          c = Je(c);
        }
      }
      function Le2(a, b2) {
        return a && b2 ? a === b2 ? true : a && 3 === a.nodeType ? false : b2 && 3 === b2.nodeType ? Le2(a, b2.parentNode) : "contains" in a ? a.contains(b2) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b2) & 16) : false : false;
      }
      function Me2() {
        for (var a = window, b2 = Xa(); b2 instanceof a.HTMLIFrameElement; ) {
          try {
            var c = "string" === typeof b2.contentWindow.location.href;
          } catch (d) {
            c = false;
          }
          if (c)
            a = b2.contentWindow;
          else
            break;
          b2 = Xa(a.document);
        }
        return b2;
      }
      function Ne2(a) {
        var b2 = a && a.nodeName && a.nodeName.toLowerCase();
        return b2 && ("input" === b2 && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b2 || "true" === a.contentEditable);
      }
      function Oe2(a) {
        var b2 = Me2(), c = a.focusedElem, d = a.selectionRange;
        if (b2 !== c && c && c.ownerDocument && Le2(c.ownerDocument.documentElement, c)) {
          if (null !== d && Ne2(c)) {
            if (b2 = d.start, a = d.end, void 0 === a && (a = b2), "selectionStart" in c)
              c.selectionStart = b2, c.selectionEnd = Math.min(a, c.value.length);
            else if (a = (b2 = c.ownerDocument || document) && b2.defaultView || window, a.getSelection) {
              a = a.getSelection();
              var e = c.textContent.length, f = Math.min(d.start, e);
              d = void 0 === d.end ? f : Math.min(d.end, e);
              !a.extend && f > d && (e = d, d = f, f = e);
              e = Ke(c, f);
              var g2 = Ke(c, d);
              e && g2 && (1 !== a.rangeCount || a.anchorNode !== e.node || a.anchorOffset !== e.offset || a.focusNode !== g2.node || a.focusOffset !== g2.offset) && (b2 = b2.createRange(), b2.setStart(e.node, e.offset), a.removeAllRanges(), f > d ? (a.addRange(b2), a.extend(g2.node, g2.offset)) : (b2.setEnd(g2.node, g2.offset), a.addRange(b2)));
            }
          }
          b2 = [];
          for (a = c; a = a.parentNode; )
            1 === a.nodeType && b2.push({ element: a, left: a.scrollLeft, top: a.scrollTop });
          "function" === typeof c.focus && c.focus();
          for (c = 0; c < b2.length; c++)
            a = b2[c], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;
        }
      }
      var Pe2 = ia && "documentMode" in document && 11 >= document.documentMode, Qe = null, Re2 = null, Se2 = null, Te2 = false;
      function Ue(a, b2, c) {
        var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;
        Te2 || null == Qe || Qe !== Xa(d) || (d = Qe, "selectionStart" in d && Ne2(d) ? d = { start: d.selectionStart, end: d.selectionEnd } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = { anchorNode: d.anchorNode, anchorOffset: d.anchorOffset, focusNode: d.focusNode, focusOffset: d.focusOffset }), Se2 && Ie2(Se2, d) || (Se2 = d, d = oe2(Re2, "onSelect"), 0 < d.length && (b2 = new td("onSelect", "select", null, b2, c), a.push({ event: b2, listeners: d }), b2.target = Qe)));
      }
      function Ve2(a, b2) {
        var c = {};
        c[a.toLowerCase()] = b2.toLowerCase();
        c["Webkit" + a] = "webkit" + b2;
        c["Moz" + a] = "moz" + b2;
        return c;
      }
      var We2 = { animationend: Ve2("Animation", "AnimationEnd"), animationiteration: Ve2("Animation", "AnimationIteration"), animationstart: Ve2("Animation", "AnimationStart"), transitionend: Ve2("Transition", "TransitionEnd") }, Xe = {}, Ye2 = {};
      ia && (Ye2 = document.createElement("div").style, "AnimationEvent" in window || (delete We2.animationend.animation, delete We2.animationiteration.animation, delete We2.animationstart.animation), "TransitionEvent" in window || delete We2.transitionend.transition);
      function Ze2(a) {
        if (Xe[a])
          return Xe[a];
        if (!We2[a])
          return a;
        var b2 = We2[a], c;
        for (c in b2)
          if (b2.hasOwnProperty(c) && c in Ye2)
            return Xe[a] = b2[c];
        return a;
      }
      var $e2 = Ze2("animationend"), af2 = Ze2("animationiteration"), bf = Ze2("animationstart"), cf = Ze2("transitionend"), df = /* @__PURE__ */ new Map(), ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
      function ff(a, b2) {
        df.set(a, b2);
        fa(b2, [a]);
      }
      for (var gf = 0; gf < ef.length; gf++) {
        var hf = ef[gf], jf = hf.toLowerCase(), kf = hf[0].toUpperCase() + hf.slice(1);
        ff(jf, "on" + kf);
      }
      ff($e2, "onAnimationEnd");
      ff(af2, "onAnimationIteration");
      ff(bf, "onAnimationStart");
      ff("dblclick", "onDoubleClick");
      ff("focusin", "onFocus");
      ff("focusout", "onBlur");
      ff(cf, "onTransitionEnd");
      ha("onMouseEnter", ["mouseout", "mouseover"]);
      ha("onMouseLeave", ["mouseout", "mouseover"]);
      ha("onPointerEnter", ["pointerout", "pointerover"]);
      ha("onPointerLeave", ["pointerout", "pointerover"]);
      fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
      fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
      fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
      fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
      fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
      fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
      var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
      function nf(a, b2, c) {
        var d = a.type || "unknown-event";
        a.currentTarget = c;
        Ub(d, b2, void 0, a);
        a.currentTarget = null;
      }
      function se2(a, b2) {
        b2 = 0 !== (b2 & 4);
        for (var c = 0; c < a.length; c++) {
          var d = a[c], e = d.event;
          d = d.listeners;
          a: {
            var f = void 0;
            if (b2)
              for (var g2 = d.length - 1; 0 <= g2; g2--) {
                var h2 = d[g2], k2 = h2.instance, l2 = h2.currentTarget;
                h2 = h2.listener;
                if (k2 !== f && e.isPropagationStopped())
                  break a;
                nf(e, h2, l2);
                f = k2;
              }
            else
              for (g2 = 0; g2 < d.length; g2++) {
                h2 = d[g2];
                k2 = h2.instance;
                l2 = h2.currentTarget;
                h2 = h2.listener;
                if (k2 !== f && e.isPropagationStopped())
                  break a;
                nf(e, h2, l2);
                f = k2;
              }
          }
        }
        if (Qb)
          throw a = Rb, Qb = false, Rb = null, a;
      }
      function D2(a, b2) {
        var c = b2[of];
        void 0 === c && (c = b2[of] = /* @__PURE__ */ new Set());
        var d = a + "__bubble";
        c.has(d) || (pf(b2, a, 2, false), c.add(d));
      }
      function qf(a, b2, c) {
        var d = 0;
        b2 && (d |= 4);
        pf(c, a, d, b2);
      }
      var rf = "_reactListening" + Math.random().toString(36).slice(2);
      function sf(a) {
        if (!a[rf]) {
          a[rf] = true;
          da.forEach(function(b3) {
            "selectionchange" !== b3 && (mf.has(b3) || qf(b3, false, a), qf(b3, true, a));
          });
          var b2 = 9 === a.nodeType ? a : a.ownerDocument;
          null === b2 || b2[rf] || (b2[rf] = true, qf("selectionchange", false, b2));
        }
      }
      function pf(a, b2, c, d) {
        switch (jd(b2)) {
          case 1:
            var e = ed;
            break;
          case 4:
            e = gd;
            break;
          default:
            e = fd;
        }
        c = e.bind(null, b2, c, a);
        e = void 0;
        !Lb || "touchstart" !== b2 && "touchmove" !== b2 && "wheel" !== b2 || (e = true);
        d ? void 0 !== e ? a.addEventListener(b2, c, { capture: true, passive: e }) : a.addEventListener(b2, c, true) : void 0 !== e ? a.addEventListener(b2, c, { passive: e }) : a.addEventListener(b2, c, false);
      }
      function hd(a, b2, c, d, e) {
        var f = d;
        if (0 === (b2 & 1) && 0 === (b2 & 2) && null !== d)
          a:
            for (; ; ) {
              if (null === d)
                return;
              var g2 = d.tag;
              if (3 === g2 || 4 === g2) {
                var h2 = d.stateNode.containerInfo;
                if (h2 === e || 8 === h2.nodeType && h2.parentNode === e)
                  break;
                if (4 === g2)
                  for (g2 = d.return; null !== g2; ) {
                    var k2 = g2.tag;
                    if (3 === k2 || 4 === k2) {
                      if (k2 = g2.stateNode.containerInfo, k2 === e || 8 === k2.nodeType && k2.parentNode === e)
                        return;
                    }
                    g2 = g2.return;
                  }
                for (; null !== h2; ) {
                  g2 = Wc(h2);
                  if (null === g2)
                    return;
                  k2 = g2.tag;
                  if (5 === k2 || 6 === k2) {
                    d = f = g2;
                    continue a;
                  }
                  h2 = h2.parentNode;
                }
              }
              d = d.return;
            }
        Jb(function() {
          var d2 = f, e2 = xb(c), g3 = [];
          a: {
            var h3 = df.get(a);
            if (void 0 !== h3) {
              var k3 = td, n = a;
              switch (a) {
                case "keypress":
                  if (0 === od(c))
                    break a;
                case "keydown":
                case "keyup":
                  k3 = Rd;
                  break;
                case "focusin":
                  n = "focus";
                  k3 = Fd;
                  break;
                case "focusout":
                  n = "blur";
                  k3 = Fd;
                  break;
                case "beforeblur":
                case "afterblur":
                  k3 = Fd;
                  break;
                case "click":
                  if (2 === c.button)
                    break a;
                case "auxclick":
                case "dblclick":
                case "mousedown":
                case "mousemove":
                case "mouseup":
                case "mouseout":
                case "mouseover":
                case "contextmenu":
                  k3 = Bd;
                  break;
                case "drag":
                case "dragend":
                case "dragenter":
                case "dragexit":
                case "dragleave":
                case "dragover":
                case "dragstart":
                case "drop":
                  k3 = Dd;
                  break;
                case "touchcancel":
                case "touchend":
                case "touchmove":
                case "touchstart":
                  k3 = Vd;
                  break;
                case $e2:
                case af2:
                case bf:
                  k3 = Hd;
                  break;
                case cf:
                  k3 = Xd;
                  break;
                case "scroll":
                  k3 = vd;
                  break;
                case "wheel":
                  k3 = Zd;
                  break;
                case "copy":
                case "cut":
                case "paste":
                  k3 = Jd;
                  break;
                case "gotpointercapture":
                case "lostpointercapture":
                case "pointercancel":
                case "pointerdown":
                case "pointermove":
                case "pointerout":
                case "pointerover":
                case "pointerup":
                  k3 = Td;
              }
              var t = 0 !== (b2 & 4), J2 = !t && "scroll" === a, x2 = t ? null !== h3 ? h3 + "Capture" : null : h3;
              t = [];
              for (var w2 = d2, u; null !== w2; ) {
                u = w2;
                var F2 = u.stateNode;
                5 === u.tag && null !== F2 && (u = F2, null !== x2 && (F2 = Kb(w2, x2), null != F2 && t.push(tf(w2, F2, u))));
                if (J2)
                  break;
                w2 = w2.return;
              }
              0 < t.length && (h3 = new k3(h3, n, null, c, e2), g3.push({ event: h3, listeners: t }));
            }
          }
          if (0 === (b2 & 7)) {
            a: {
              h3 = "mouseover" === a || "pointerover" === a;
              k3 = "mouseout" === a || "pointerout" === a;
              if (h3 && c !== wb && (n = c.relatedTarget || c.fromElement) && (Wc(n) || n[uf]))
                break a;
              if (k3 || h3) {
                h3 = e2.window === e2 ? e2 : (h3 = e2.ownerDocument) ? h3.defaultView || h3.parentWindow : window;
                if (k3) {
                  if (n = c.relatedTarget || c.toElement, k3 = d2, n = n ? Wc(n) : null, null !== n && (J2 = Vb(n), n !== J2 || 5 !== n.tag && 6 !== n.tag))
                    n = null;
                } else
                  k3 = null, n = d2;
                if (k3 !== n) {
                  t = Bd;
                  F2 = "onMouseLeave";
                  x2 = "onMouseEnter";
                  w2 = "mouse";
                  if ("pointerout" === a || "pointerover" === a)
                    t = Td, F2 = "onPointerLeave", x2 = "onPointerEnter", w2 = "pointer";
                  J2 = null == k3 ? h3 : ue(k3);
                  u = null == n ? h3 : ue(n);
                  h3 = new t(F2, w2 + "leave", k3, c, e2);
                  h3.target = J2;
                  h3.relatedTarget = u;
                  F2 = null;
                  Wc(e2) === d2 && (t = new t(x2, w2 + "enter", n, c, e2), t.target = u, t.relatedTarget = J2, F2 = t);
                  J2 = F2;
                  if (k3 && n)
                    b: {
                      t = k3;
                      x2 = n;
                      w2 = 0;
                      for (u = t; u; u = vf(u))
                        w2++;
                      u = 0;
                      for (F2 = x2; F2; F2 = vf(F2))
                        u++;
                      for (; 0 < w2 - u; )
                        t = vf(t), w2--;
                      for (; 0 < u - w2; )
                        x2 = vf(x2), u--;
                      for (; w2--; ) {
                        if (t === x2 || null !== x2 && t === x2.alternate)
                          break b;
                        t = vf(t);
                        x2 = vf(x2);
                      }
                      t = null;
                    }
                  else
                    t = null;
                  null !== k3 && wf(g3, h3, k3, t, false);
                  null !== n && null !== J2 && wf(g3, J2, n, t, true);
                }
              }
            }
            a: {
              h3 = d2 ? ue(d2) : window;
              k3 = h3.nodeName && h3.nodeName.toLowerCase();
              if ("select" === k3 || "input" === k3 && "file" === h3.type)
                var na = ve2;
              else if (me(h3)) {
                if (we2)
                  na = Fe2;
                else {
                  na = De2;
                  var xa = Ce2;
                }
              } else
                (k3 = h3.nodeName) && "input" === k3.toLowerCase() && ("checkbox" === h3.type || "radio" === h3.type) && (na = Ee2);
              if (na && (na = na(a, d2))) {
                ne2(g3, na, c, e2);
                break a;
              }
              xa && xa(a, h3, d2);
              "focusout" === a && (xa = h3._wrapperState) && xa.controlled && "number" === h3.type && cb(h3, "number", h3.value);
            }
            xa = d2 ? ue(d2) : window;
            switch (a) {
              case "focusin":
                if (me(xa) || "true" === xa.contentEditable)
                  Qe = xa, Re2 = d2, Se2 = null;
                break;
              case "focusout":
                Se2 = Re2 = Qe = null;
                break;
              case "mousedown":
                Te2 = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                Te2 = false;
                Ue(g3, c, e2);
                break;
              case "selectionchange":
                if (Pe2)
                  break;
              case "keydown":
              case "keyup":
                Ue(g3, c, e2);
            }
            var $a;
            if (ae2)
              b: {
                switch (a) {
                  case "compositionstart":
                    var ba = "onCompositionStart";
                    break b;
                  case "compositionend":
                    ba = "onCompositionEnd";
                    break b;
                  case "compositionupdate":
                    ba = "onCompositionUpdate";
                    break b;
                }
                ba = void 0;
              }
            else
              ie2 ? ge2(a, c) && (ba = "onCompositionEnd") : "keydown" === a && 229 === c.keyCode && (ba = "onCompositionStart");
            ba && (de2 && "ko" !== c.locale && (ie2 || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie2 && ($a = nd()) : (kd = e2, ld = "value" in kd ? kd.value : kd.textContent, ie2 = true)), xa = oe2(d2, ba), 0 < xa.length && (ba = new Ld(ba, a, null, c, e2), g3.push({ event: ba, listeners: xa }), $a ? ba.data = $a : ($a = he2(c), null !== $a && (ba.data = $a))));
            if ($a = ce2 ? je2(a, c) : ke2(a, c))
              d2 = oe2(d2, "onBeforeInput"), 0 < d2.length && (e2 = new Ld("onBeforeInput", "beforeinput", null, c, e2), g3.push({ event: e2, listeners: d2 }), e2.data = $a);
          }
          se2(g3, b2);
        });
      }
      function tf(a, b2, c) {
        return { instance: a, listener: b2, currentTarget: c };
      }
      function oe2(a, b2) {
        for (var c = b2 + "Capture", d = []; null !== a; ) {
          var e = a, f = e.stateNode;
          5 === e.tag && null !== f && (e = f, f = Kb(a, c), null != f && d.unshift(tf(a, f, e)), f = Kb(a, b2), null != f && d.push(tf(a, f, e)));
          a = a.return;
        }
        return d;
      }
      function vf(a) {
        if (null === a)
          return null;
        do
          a = a.return;
        while (a && 5 !== a.tag);
        return a ? a : null;
      }
      function wf(a, b2, c, d, e) {
        for (var f = b2._reactName, g2 = []; null !== c && c !== d; ) {
          var h2 = c, k2 = h2.alternate, l2 = h2.stateNode;
          if (null !== k2 && k2 === d)
            break;
          5 === h2.tag && null !== l2 && (h2 = l2, e ? (k2 = Kb(c, f), null != k2 && g2.unshift(tf(c, k2, h2))) : e || (k2 = Kb(c, f), null != k2 && g2.push(tf(c, k2, h2))));
          c = c.return;
        }
        0 !== g2.length && a.push({ event: b2, listeners: g2 });
      }
      var xf = /\r\n?/g, yf = /\u0000|\uFFFD/g;
      function zf(a) {
        return ("string" === typeof a ? a : "" + a).replace(xf, "\n").replace(yf, "");
      }
      function Af(a, b2, c) {
        b2 = zf(b2);
        if (zf(a) !== b2 && c)
          throw Error(p(425));
      }
      function Bf() {
      }
      var Cf = null, Df = null;
      function Ef(a, b2) {
        return "textarea" === a || "noscript" === a || "string" === typeof b2.children || "number" === typeof b2.children || "object" === typeof b2.dangerouslySetInnerHTML && null !== b2.dangerouslySetInnerHTML && null != b2.dangerouslySetInnerHTML.__html;
      }
      var Ff = "function" === typeof setTimeout ? setTimeout : void 0, Gf = "function" === typeof clearTimeout ? clearTimeout : void 0, Hf = "function" === typeof Promise ? Promise : void 0, Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function(a) {
        return Hf.resolve(null).then(a).catch(If);
      } : Ff;
      function If(a) {
        setTimeout(function() {
          throw a;
        });
      }
      function Kf(a, b2) {
        var c = b2, d = 0;
        do {
          var e = c.nextSibling;
          a.removeChild(c);
          if (e && 8 === e.nodeType)
            if (c = e.data, "/$" === c) {
              if (0 === d) {
                a.removeChild(e);
                bd(b2);
                return;
              }
              d--;
            } else
              "$" !== c && "$?" !== c && "$!" !== c || d++;
          c = e;
        } while (c);
        bd(b2);
      }
      function Lf(a) {
        for (; null != a; a = a.nextSibling) {
          var b2 = a.nodeType;
          if (1 === b2 || 3 === b2)
            break;
          if (8 === b2) {
            b2 = a.data;
            if ("$" === b2 || "$!" === b2 || "$?" === b2)
              break;
            if ("/$" === b2)
              return null;
          }
        }
        return a;
      }
      function Mf(a) {
        a = a.previousSibling;
        for (var b2 = 0; a; ) {
          if (8 === a.nodeType) {
            var c = a.data;
            if ("$" === c || "$!" === c || "$?" === c) {
              if (0 === b2)
                return a;
              b2--;
            } else
              "/$" === c && b2++;
          }
          a = a.previousSibling;
        }
        return null;
      }
      var Nf = Math.random().toString(36).slice(2), Of = "__reactFiber$" + Nf, Pf = "__reactProps$" + Nf, uf = "__reactContainer$" + Nf, of = "__reactEvents$" + Nf, Qf = "__reactListeners$" + Nf, Rf = "__reactHandles$" + Nf;
      function Wc(a) {
        var b2 = a[Of];
        if (b2)
          return b2;
        for (var c = a.parentNode; c; ) {
          if (b2 = c[uf] || c[Of]) {
            c = b2.alternate;
            if (null !== b2.child || null !== c && null !== c.child)
              for (a = Mf(a); null !== a; ) {
                if (c = a[Of])
                  return c;
                a = Mf(a);
              }
            return b2;
          }
          a = c;
          c = a.parentNode;
        }
        return null;
      }
      function Cb(a) {
        a = a[Of] || a[uf];
        return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
      }
      function ue(a) {
        if (5 === a.tag || 6 === a.tag)
          return a.stateNode;
        throw Error(p(33));
      }
      function Db(a) {
        return a[Pf] || null;
      }
      var Sf = [], Tf = -1;
      function Uf(a) {
        return { current: a };
      }
      function E2(a) {
        0 > Tf || (a.current = Sf[Tf], Sf[Tf] = null, Tf--);
      }
      function G2(a, b2) {
        Tf++;
        Sf[Tf] = a.current;
        a.current = b2;
      }
      var Vf = {}, H2 = Uf(Vf), Wf = Uf(false), Xf = Vf;
      function Yf(a, b2) {
        var c = a.type.contextTypes;
        if (!c)
          return Vf;
        var d = a.stateNode;
        if (d && d.__reactInternalMemoizedUnmaskedChildContext === b2)
          return d.__reactInternalMemoizedMaskedChildContext;
        var e = {}, f;
        for (f in c)
          e[f] = b2[f];
        d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b2, a.__reactInternalMemoizedMaskedChildContext = e);
        return e;
      }
      function Zf(a) {
        a = a.childContextTypes;
        return null !== a && void 0 !== a;
      }
      function $f() {
        E2(Wf);
        E2(H2);
      }
      function ag(a, b2, c) {
        if (H2.current !== Vf)
          throw Error(p(168));
        G2(H2, b2);
        G2(Wf, c);
      }
      function bg(a, b2, c) {
        var d = a.stateNode;
        b2 = b2.childContextTypes;
        if ("function" !== typeof d.getChildContext)
          return c;
        d = d.getChildContext();
        for (var e in d)
          if (!(e in b2))
            throw Error(p(108, Ra(a) || "Unknown", e));
        return A({}, c, d);
      }
      function cg(a) {
        a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Vf;
        Xf = H2.current;
        G2(H2, a);
        G2(Wf, Wf.current);
        return true;
      }
      function dg(a, b2, c) {
        var d = a.stateNode;
        if (!d)
          throw Error(p(169));
        c ? (a = bg(a, b2, Xf), d.__reactInternalMemoizedMergedChildContext = a, E2(Wf), E2(H2), G2(H2, a)) : E2(Wf);
        G2(Wf, c);
      }
      var eg2 = null, fg = false, gg2 = false;
      function hg(a) {
        null === eg2 ? eg2 = [a] : eg2.push(a);
      }
      function ig(a) {
        fg = true;
        hg(a);
      }
      function jg() {
        if (!gg2 && null !== eg2) {
          gg2 = true;
          var a = 0, b2 = C2;
          try {
            var c = eg2;
            for (C2 = 1; a < c.length; a++) {
              var d = c[a];
              do
                d = d(true);
              while (null !== d);
            }
            eg2 = null;
            fg = false;
          } catch (e) {
            throw null !== eg2 && (eg2 = eg2.slice(a + 1)), ac2(fc, jg), e;
          } finally {
            C2 = b2, gg2 = false;
          }
        }
        return null;
      }
      var kg = [], lg2 = 0, mg = null, ng = 0, og = [], pg = 0, qg = null, rg = 1, sg = "";
      function tg(a, b2) {
        kg[lg2++] = ng;
        kg[lg2++] = mg;
        mg = a;
        ng = b2;
      }
      function ug(a, b2, c) {
        og[pg++] = rg;
        og[pg++] = sg;
        og[pg++] = qg;
        qg = a;
        var d = rg;
        a = sg;
        var e = 32 - oc(d) - 1;
        d &= ~(1 << e);
        c += 1;
        var f = 32 - oc(b2) + e;
        if (30 < f) {
          var g2 = e - e % 5;
          f = (d & (1 << g2) - 1).toString(32);
          d >>= g2;
          e -= g2;
          rg = 1 << 32 - oc(b2) + e | c << e | d;
          sg = f + a;
        } else
          rg = 1 << f | c << e | d, sg = a;
      }
      function vg(a) {
        null !== a.return && (tg(a, 1), ug(a, 1, 0));
      }
      function wg(a) {
        for (; a === mg; )
          mg = kg[--lg2], kg[lg2] = null, ng = kg[--lg2], kg[lg2] = null;
        for (; a === qg; )
          qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
      }
      var xg = null, yg = null, I2 = false, zg = null;
      function Ag(a, b2) {
        var c = Bg(5, null, null, 0);
        c.elementType = "DELETED";
        c.stateNode = b2;
        c.return = a;
        b2 = a.deletions;
        null === b2 ? (a.deletions = [c], a.flags |= 16) : b2.push(c);
      }
      function Cg(a, b2) {
        switch (a.tag) {
          case 5:
            var c = a.type;
            b2 = 1 !== b2.nodeType || c.toLowerCase() !== b2.nodeName.toLowerCase() ? null : b2;
            return null !== b2 ? (a.stateNode = b2, xg = a, yg = Lf(b2.firstChild), true) : false;
          case 6:
            return b2 = "" === a.pendingProps || 3 !== b2.nodeType ? null : b2, null !== b2 ? (a.stateNode = b2, xg = a, yg = null, true) : false;
          case 13:
            return b2 = 8 !== b2.nodeType ? null : b2, null !== b2 ? (c = null !== qg ? { id: rg, overflow: sg } : null, a.memoizedState = { dehydrated: b2, treeContext: c, retryLane: 1073741824 }, c = Bg(18, null, null, 0), c.stateNode = b2, c.return = a, a.child = c, xg = a, yg = null, true) : false;
          default:
            return false;
        }
      }
      function Dg(a) {
        return 0 !== (a.mode & 1) && 0 === (a.flags & 128);
      }
      function Eg(a) {
        if (I2) {
          var b2 = yg;
          if (b2) {
            var c = b2;
            if (!Cg(a, b2)) {
              if (Dg(a))
                throw Error(p(418));
              b2 = Lf(c.nextSibling);
              var d = xg;
              b2 && Cg(a, b2) ? Ag(d, c) : (a.flags = a.flags & -4097 | 2, I2 = false, xg = a);
            }
          } else {
            if (Dg(a))
              throw Error(p(418));
            a.flags = a.flags & -4097 | 2;
            I2 = false;
            xg = a;
          }
        }
      }
      function Fg(a) {
        for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag; )
          a = a.return;
        xg = a;
      }
      function Gg2(a) {
        if (a !== xg)
          return false;
        if (!I2)
          return Fg(a), I2 = true, false;
        var b2;
        (b2 = 3 !== a.tag) && !(b2 = 5 !== a.tag) && (b2 = a.type, b2 = "head" !== b2 && "body" !== b2 && !Ef(a.type, a.memoizedProps));
        if (b2 && (b2 = yg)) {
          if (Dg(a))
            throw Hg(), Error(p(418));
          for (; b2; )
            Ag(a, b2), b2 = Lf(b2.nextSibling);
        }
        Fg(a);
        if (13 === a.tag) {
          a = a.memoizedState;
          a = null !== a ? a.dehydrated : null;
          if (!a)
            throw Error(p(317));
          a: {
            a = a.nextSibling;
            for (b2 = 0; a; ) {
              if (8 === a.nodeType) {
                var c = a.data;
                if ("/$" === c) {
                  if (0 === b2) {
                    yg = Lf(a.nextSibling);
                    break a;
                  }
                  b2--;
                } else
                  "$" !== c && "$!" !== c && "$?" !== c || b2++;
              }
              a = a.nextSibling;
            }
            yg = null;
          }
        } else
          yg = xg ? Lf(a.stateNode.nextSibling) : null;
        return true;
      }
      function Hg() {
        for (var a = yg; a; )
          a = Lf(a.nextSibling);
      }
      function Ig() {
        yg = xg = null;
        I2 = false;
      }
      function Jg(a) {
        null === zg ? zg = [a] : zg.push(a);
      }
      var Kg = ua.ReactCurrentBatchConfig;
      function Lg(a, b2) {
        if (a && a.defaultProps) {
          b2 = A({}, b2);
          a = a.defaultProps;
          for (var c in a)
            void 0 === b2[c] && (b2[c] = a[c]);
          return b2;
        }
        return b2;
      }
      var Mg = Uf(null), Ng = null, Og = null, Pg = null;
      function Qg() {
        Pg = Og = Ng = null;
      }
      function Rg(a) {
        var b2 = Mg.current;
        E2(Mg);
        a._currentValue = b2;
      }
      function Sg(a, b2, c) {
        for (; null !== a; ) {
          var d = a.alternate;
          (a.childLanes & b2) !== b2 ? (a.childLanes |= b2, null !== d && (d.childLanes |= b2)) : null !== d && (d.childLanes & b2) !== b2 && (d.childLanes |= b2);
          if (a === c)
            break;
          a = a.return;
        }
      }
      function Tg(a, b2) {
        Ng = a;
        Pg = Og = null;
        a = a.dependencies;
        null !== a && null !== a.firstContext && (0 !== (a.lanes & b2) && (Ug = true), a.firstContext = null);
      }
      function Vg(a) {
        var b2 = a._currentValue;
        if (Pg !== a)
          if (a = { context: a, memoizedValue: b2, next: null }, null === Og) {
            if (null === Ng)
              throw Error(p(308));
            Og = a;
            Ng.dependencies = { lanes: 0, firstContext: a };
          } else
            Og = Og.next = a;
        return b2;
      }
      var Wg = null;
      function Xg(a) {
        null === Wg ? Wg = [a] : Wg.push(a);
      }
      function Yg(a, b2, c, d) {
        var e = b2.interleaved;
        null === e ? (c.next = c, Xg(b2)) : (c.next = e.next, e.next = c);
        b2.interleaved = c;
        return Zg(a, d);
      }
      function Zg(a, b2) {
        a.lanes |= b2;
        var c = a.alternate;
        null !== c && (c.lanes |= b2);
        c = a;
        for (a = a.return; null !== a; )
          a.childLanes |= b2, c = a.alternate, null !== c && (c.childLanes |= b2), c = a, a = a.return;
        return 3 === c.tag ? c.stateNode : null;
      }
      var $g = false;
      function ah(a) {
        a.updateQueue = { baseState: a.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
      }
      function bh(a, b2) {
        a = a.updateQueue;
        b2.updateQueue === a && (b2.updateQueue = { baseState: a.baseState, firstBaseUpdate: a.firstBaseUpdate, lastBaseUpdate: a.lastBaseUpdate, shared: a.shared, effects: a.effects });
      }
      function ch(a, b2) {
        return { eventTime: a, lane: b2, tag: 0, payload: null, callback: null, next: null };
      }
      function dh(a, b2, c) {
        var d = a.updateQueue;
        if (null === d)
          return null;
        d = d.shared;
        if (0 !== (K2 & 2)) {
          var e = d.pending;
          null === e ? b2.next = b2 : (b2.next = e.next, e.next = b2);
          d.pending = b2;
          return Zg(a, c);
        }
        e = d.interleaved;
        null === e ? (b2.next = b2, Xg(d)) : (b2.next = e.next, e.next = b2);
        d.interleaved = b2;
        return Zg(a, c);
      }
      function eh(a, b2, c) {
        b2 = b2.updateQueue;
        if (null !== b2 && (b2 = b2.shared, 0 !== (c & 4194240))) {
          var d = b2.lanes;
          d &= a.pendingLanes;
          c |= d;
          b2.lanes = c;
          Cc(a, c);
        }
      }
      function fh(a, b2) {
        var c = a.updateQueue, d = a.alternate;
        if (null !== d && (d = d.updateQueue, c === d)) {
          var e = null, f = null;
          c = c.firstBaseUpdate;
          if (null !== c) {
            do {
              var g2 = { eventTime: c.eventTime, lane: c.lane, tag: c.tag, payload: c.payload, callback: c.callback, next: null };
              null === f ? e = f = g2 : f = f.next = g2;
              c = c.next;
            } while (null !== c);
            null === f ? e = f = b2 : f = f.next = b2;
          } else
            e = f = b2;
          c = { baseState: d.baseState, firstBaseUpdate: e, lastBaseUpdate: f, shared: d.shared, effects: d.effects };
          a.updateQueue = c;
          return;
        }
        a = c.lastBaseUpdate;
        null === a ? c.firstBaseUpdate = b2 : a.next = b2;
        c.lastBaseUpdate = b2;
      }
      function gh(a, b2, c, d) {
        var e = a.updateQueue;
        $g = false;
        var f = e.firstBaseUpdate, g2 = e.lastBaseUpdate, h2 = e.shared.pending;
        if (null !== h2) {
          e.shared.pending = null;
          var k2 = h2, l2 = k2.next;
          k2.next = null;
          null === g2 ? f = l2 : g2.next = l2;
          g2 = k2;
          var m2 = a.alternate;
          null !== m2 && (m2 = m2.updateQueue, h2 = m2.lastBaseUpdate, h2 !== g2 && (null === h2 ? m2.firstBaseUpdate = l2 : h2.next = l2, m2.lastBaseUpdate = k2));
        }
        if (null !== f) {
          var q2 = e.baseState;
          g2 = 0;
          m2 = l2 = k2 = null;
          h2 = f;
          do {
            var r = h2.lane, y2 = h2.eventTime;
            if ((d & r) === r) {
              null !== m2 && (m2 = m2.next = { eventTime: y2, lane: 0, tag: h2.tag, payload: h2.payload, callback: h2.callback, next: null });
              a: {
                var n = a, t = h2;
                r = b2;
                y2 = c;
                switch (t.tag) {
                  case 1:
                    n = t.payload;
                    if ("function" === typeof n) {
                      q2 = n.call(y2, q2, r);
                      break a;
                    }
                    q2 = n;
                    break a;
                  case 3:
                    n.flags = n.flags & -65537 | 128;
                  case 0:
                    n = t.payload;
                    r = "function" === typeof n ? n.call(y2, q2, r) : n;
                    if (null === r || void 0 === r)
                      break a;
                    q2 = A({}, q2, r);
                    break a;
                  case 2:
                    $g = true;
                }
              }
              null !== h2.callback && 0 !== h2.lane && (a.flags |= 64, r = e.effects, null === r ? e.effects = [h2] : r.push(h2));
            } else
              y2 = { eventTime: y2, lane: r, tag: h2.tag, payload: h2.payload, callback: h2.callback, next: null }, null === m2 ? (l2 = m2 = y2, k2 = q2) : m2 = m2.next = y2, g2 |= r;
            h2 = h2.next;
            if (null === h2)
              if (h2 = e.shared.pending, null === h2)
                break;
              else
                r = h2, h2 = r.next, r.next = null, e.lastBaseUpdate = r, e.shared.pending = null;
          } while (1);
          null === m2 && (k2 = q2);
          e.baseState = k2;
          e.firstBaseUpdate = l2;
          e.lastBaseUpdate = m2;
          b2 = e.shared.interleaved;
          if (null !== b2) {
            e = b2;
            do
              g2 |= e.lane, e = e.next;
            while (e !== b2);
          } else
            null === f && (e.shared.lanes = 0);
          hh |= g2;
          a.lanes = g2;
          a.memoizedState = q2;
        }
      }
      function ih(a, b2, c) {
        a = b2.effects;
        b2.effects = null;
        if (null !== a)
          for (b2 = 0; b2 < a.length; b2++) {
            var d = a[b2], e = d.callback;
            if (null !== e) {
              d.callback = null;
              d = c;
              if ("function" !== typeof e)
                throw Error(p(191, e));
              e.call(d);
            }
          }
      }
      var jh = new aa.Component().refs;
      function kh(a, b2, c, d) {
        b2 = a.memoizedState;
        c = c(d, b2);
        c = null === c || void 0 === c ? b2 : A({}, b2, c);
        a.memoizedState = c;
        0 === a.lanes && (a.updateQueue.baseState = c);
      }
      var nh = { isMounted: function(a) {
        return (a = a._reactInternals) ? Vb(a) === a : false;
      }, enqueueSetState: function(a, b2, c) {
        a = a._reactInternals;
        var d = L2(), e = lh(a), f = ch(d, e);
        f.payload = b2;
        void 0 !== c && null !== c && (f.callback = c);
        b2 = dh(a, f, e);
        null !== b2 && (mh(b2, a, e, d), eh(b2, a, e));
      }, enqueueReplaceState: function(a, b2, c) {
        a = a._reactInternals;
        var d = L2(), e = lh(a), f = ch(d, e);
        f.tag = 1;
        f.payload = b2;
        void 0 !== c && null !== c && (f.callback = c);
        b2 = dh(a, f, e);
        null !== b2 && (mh(b2, a, e, d), eh(b2, a, e));
      }, enqueueForceUpdate: function(a, b2) {
        a = a._reactInternals;
        var c = L2(), d = lh(a), e = ch(c, d);
        e.tag = 2;
        void 0 !== b2 && null !== b2 && (e.callback = b2);
        b2 = dh(a, e, d);
        null !== b2 && (mh(b2, a, d, c), eh(b2, a, d));
      } };
      function oh(a, b2, c, d, e, f, g2) {
        a = a.stateNode;
        return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g2) : b2.prototype && b2.prototype.isPureReactComponent ? !Ie2(c, d) || !Ie2(e, f) : true;
      }
      function ph(a, b2, c) {
        var d = false, e = Vf;
        var f = b2.contextType;
        "object" === typeof f && null !== f ? f = Vg(f) : (e = Zf(b2) ? Xf : H2.current, d = b2.contextTypes, f = (d = null !== d && void 0 !== d) ? Yf(a, e) : Vf);
        b2 = new b2(c, f);
        a.memoizedState = null !== b2.state && void 0 !== b2.state ? b2.state : null;
        b2.updater = nh;
        a.stateNode = b2;
        b2._reactInternals = a;
        d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);
        return b2;
      }
      function qh(a, b2, c, d) {
        a = b2.state;
        "function" === typeof b2.componentWillReceiveProps && b2.componentWillReceiveProps(c, d);
        "function" === typeof b2.UNSAFE_componentWillReceiveProps && b2.UNSAFE_componentWillReceiveProps(c, d);
        b2.state !== a && nh.enqueueReplaceState(b2, b2.state, null);
      }
      function rh(a, b2, c, d) {
        var e = a.stateNode;
        e.props = c;
        e.state = a.memoizedState;
        e.refs = jh;
        ah(a);
        var f = b2.contextType;
        "object" === typeof f && null !== f ? e.context = Vg(f) : (f = Zf(b2) ? Xf : H2.current, e.context = Yf(a, f));
        e.state = a.memoizedState;
        f = b2.getDerivedStateFromProps;
        "function" === typeof f && (kh(a, b2, f, c), e.state = a.memoizedState);
        "function" === typeof b2.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b2 = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b2 !== e.state && nh.enqueueReplaceState(e, e.state, null), gh(a, c, e, d), e.state = a.memoizedState);
        "function" === typeof e.componentDidMount && (a.flags |= 4194308);
      }
      function sh2(a, b2, c) {
        a = c.ref;
        if (null !== a && "function" !== typeof a && "object" !== typeof a) {
          if (c._owner) {
            c = c._owner;
            if (c) {
              if (1 !== c.tag)
                throw Error(p(309));
              var d = c.stateNode;
            }
            if (!d)
              throw Error(p(147, a));
            var e = d, f = "" + a;
            if (null !== b2 && null !== b2.ref && "function" === typeof b2.ref && b2.ref._stringRef === f)
              return b2.ref;
            b2 = function(a2) {
              var b3 = e.refs;
              b3 === jh && (b3 = e.refs = {});
              null === a2 ? delete b3[f] : b3[f] = a2;
            };
            b2._stringRef = f;
            return b2;
          }
          if ("string" !== typeof a)
            throw Error(p(284));
          if (!c._owner)
            throw Error(p(290, a));
        }
        return a;
      }
      function th(a, b2) {
        a = Object.prototype.toString.call(b2);
        throw Error(p(31, "[object Object]" === a ? "object with keys {" + Object.keys(b2).join(", ") + "}" : a));
      }
      function uh(a) {
        var b2 = a._init;
        return b2(a._payload);
      }
      function vh(a) {
        function b2(b3, c2) {
          if (a) {
            var d2 = b3.deletions;
            null === d2 ? (b3.deletions = [c2], b3.flags |= 16) : d2.push(c2);
          }
        }
        function c(c2, d2) {
          if (!a)
            return null;
          for (; null !== d2; )
            b2(c2, d2), d2 = d2.sibling;
          return null;
        }
        function d(a2, b3) {
          for (a2 = /* @__PURE__ */ new Map(); null !== b3; )
            null !== b3.key ? a2.set(b3.key, b3) : a2.set(b3.index, b3), b3 = b3.sibling;
          return a2;
        }
        function e(a2, b3) {
          a2 = wh(a2, b3);
          a2.index = 0;
          a2.sibling = null;
          return a2;
        }
        function f(b3, c2, d2) {
          b3.index = d2;
          if (!a)
            return b3.flags |= 1048576, c2;
          d2 = b3.alternate;
          if (null !== d2)
            return d2 = d2.index, d2 < c2 ? (b3.flags |= 2, c2) : d2;
          b3.flags |= 2;
          return c2;
        }
        function g2(b3) {
          a && null === b3.alternate && (b3.flags |= 2);
          return b3;
        }
        function h2(a2, b3, c2, d2) {
          if (null === b3 || 6 !== b3.tag)
            return b3 = xh(c2, a2.mode, d2), b3.return = a2, b3;
          b3 = e(b3, c2);
          b3.return = a2;
          return b3;
        }
        function k2(a2, b3, c2, d2) {
          var f2 = c2.type;
          if (f2 === ya)
            return m2(a2, b3, c2.props.children, d2, c2.key);
          if (null !== b3 && (b3.elementType === f2 || "object" === typeof f2 && null !== f2 && f2.$$typeof === Ha && uh(f2) === b3.type))
            return d2 = e(b3, c2.props), d2.ref = sh2(a2, b3, c2), d2.return = a2, d2;
          d2 = yh(c2.type, c2.key, c2.props, null, a2.mode, d2);
          d2.ref = sh2(a2, b3, c2);
          d2.return = a2;
          return d2;
        }
        function l2(a2, b3, c2, d2) {
          if (null === b3 || 4 !== b3.tag || b3.stateNode.containerInfo !== c2.containerInfo || b3.stateNode.implementation !== c2.implementation)
            return b3 = zh(c2, a2.mode, d2), b3.return = a2, b3;
          b3 = e(b3, c2.children || []);
          b3.return = a2;
          return b3;
        }
        function m2(a2, b3, c2, d2, f2) {
          if (null === b3 || 7 !== b3.tag)
            return b3 = Ah(c2, a2.mode, d2, f2), b3.return = a2, b3;
          b3 = e(b3, c2);
          b3.return = a2;
          return b3;
        }
        function q2(a2, b3, c2) {
          if ("string" === typeof b3 && "" !== b3 || "number" === typeof b3)
            return b3 = xh("" + b3, a2.mode, c2), b3.return = a2, b3;
          if ("object" === typeof b3 && null !== b3) {
            switch (b3.$$typeof) {
              case va:
                return c2 = yh(b3.type, b3.key, b3.props, null, a2.mode, c2), c2.ref = sh2(a2, null, b3), c2.return = a2, c2;
              case wa:
                return b3 = zh(b3, a2.mode, c2), b3.return = a2, b3;
              case Ha:
                var d2 = b3._init;
                return q2(a2, d2(b3._payload), c2);
            }
            if (eb(b3) || Ka(b3))
              return b3 = Ah(b3, a2.mode, c2, null), b3.return = a2, b3;
            th(a2, b3);
          }
          return null;
        }
        function r(a2, b3, c2, d2) {
          var e2 = null !== b3 ? b3.key : null;
          if ("string" === typeof c2 && "" !== c2 || "number" === typeof c2)
            return null !== e2 ? null : h2(a2, b3, "" + c2, d2);
          if ("object" === typeof c2 && null !== c2) {
            switch (c2.$$typeof) {
              case va:
                return c2.key === e2 ? k2(a2, b3, c2, d2) : null;
              case wa:
                return c2.key === e2 ? l2(a2, b3, c2, d2) : null;
              case Ha:
                return e2 = c2._init, r(a2, b3, e2(c2._payload), d2);
            }
            if (eb(c2) || Ka(c2))
              return null !== e2 ? null : m2(a2, b3, c2, d2, null);
            th(a2, c2);
          }
          return null;
        }
        function y2(a2, b3, c2, d2, e2) {
          if ("string" === typeof d2 && "" !== d2 || "number" === typeof d2)
            return a2 = a2.get(c2) || null, h2(b3, a2, "" + d2, e2);
          if ("object" === typeof d2 && null !== d2) {
            switch (d2.$$typeof) {
              case va:
                return a2 = a2.get(null === d2.key ? c2 : d2.key) || null, k2(b3, a2, d2, e2);
              case wa:
                return a2 = a2.get(null === d2.key ? c2 : d2.key) || null, l2(b3, a2, d2, e2);
              case Ha:
                var f2 = d2._init;
                return y2(a2, b3, c2, f2(d2._payload), e2);
            }
            if (eb(d2) || Ka(d2))
              return a2 = a2.get(c2) || null, m2(b3, a2, d2, e2, null);
            th(b3, d2);
          }
          return null;
        }
        function n(e2, g3, h3, k3) {
          for (var l3 = null, m3 = null, u = g3, w2 = g3 = 0, x2 = null; null !== u && w2 < h3.length; w2++) {
            u.index > w2 ? (x2 = u, u = null) : x2 = u.sibling;
            var n2 = r(e2, u, h3[w2], k3);
            if (null === n2) {
              null === u && (u = x2);
              break;
            }
            a && u && null === n2.alternate && b2(e2, u);
            g3 = f(n2, g3, w2);
            null === m3 ? l3 = n2 : m3.sibling = n2;
            m3 = n2;
            u = x2;
          }
          if (w2 === h3.length)
            return c(e2, u), I2 && tg(e2, w2), l3;
          if (null === u) {
            for (; w2 < h3.length; w2++)
              u = q2(e2, h3[w2], k3), null !== u && (g3 = f(u, g3, w2), null === m3 ? l3 = u : m3.sibling = u, m3 = u);
            I2 && tg(e2, w2);
            return l3;
          }
          for (u = d(e2, u); w2 < h3.length; w2++)
            x2 = y2(u, e2, w2, h3[w2], k3), null !== x2 && (a && null !== x2.alternate && u.delete(null === x2.key ? w2 : x2.key), g3 = f(x2, g3, w2), null === m3 ? l3 = x2 : m3.sibling = x2, m3 = x2);
          a && u.forEach(function(a2) {
            return b2(e2, a2);
          });
          I2 && tg(e2, w2);
          return l3;
        }
        function t(e2, g3, h3, k3) {
          var l3 = Ka(h3);
          if ("function" !== typeof l3)
            throw Error(p(150));
          h3 = l3.call(h3);
          if (null == h3)
            throw Error(p(151));
          for (var u = l3 = null, m3 = g3, w2 = g3 = 0, x2 = null, n2 = h3.next(); null !== m3 && !n2.done; w2++, n2 = h3.next()) {
            m3.index > w2 ? (x2 = m3, m3 = null) : x2 = m3.sibling;
            var t2 = r(e2, m3, n2.value, k3);
            if (null === t2) {
              null === m3 && (m3 = x2);
              break;
            }
            a && m3 && null === t2.alternate && b2(e2, m3);
            g3 = f(t2, g3, w2);
            null === u ? l3 = t2 : u.sibling = t2;
            u = t2;
            m3 = x2;
          }
          if (n2.done)
            return c(e2, m3), I2 && tg(e2, w2), l3;
          if (null === m3) {
            for (; !n2.done; w2++, n2 = h3.next())
              n2 = q2(e2, n2.value, k3), null !== n2 && (g3 = f(n2, g3, w2), null === u ? l3 = n2 : u.sibling = n2, u = n2);
            I2 && tg(e2, w2);
            return l3;
          }
          for (m3 = d(e2, m3); !n2.done; w2++, n2 = h3.next())
            n2 = y2(m3, e2, w2, n2.value, k3), null !== n2 && (a && null !== n2.alternate && m3.delete(null === n2.key ? w2 : n2.key), g3 = f(n2, g3, w2), null === u ? l3 = n2 : u.sibling = n2, u = n2);
          a && m3.forEach(function(a2) {
            return b2(e2, a2);
          });
          I2 && tg(e2, w2);
          return l3;
        }
        function J2(a2, d2, f2, h3) {
          "object" === typeof f2 && null !== f2 && f2.type === ya && null === f2.key && (f2 = f2.props.children);
          if ("object" === typeof f2 && null !== f2) {
            switch (f2.$$typeof) {
              case va:
                a: {
                  for (var k3 = f2.key, l3 = d2; null !== l3; ) {
                    if (l3.key === k3) {
                      k3 = f2.type;
                      if (k3 === ya) {
                        if (7 === l3.tag) {
                          c(a2, l3.sibling);
                          d2 = e(l3, f2.props.children);
                          d2.return = a2;
                          a2 = d2;
                          break a;
                        }
                      } else if (l3.elementType === k3 || "object" === typeof k3 && null !== k3 && k3.$$typeof === Ha && uh(k3) === l3.type) {
                        c(a2, l3.sibling);
                        d2 = e(l3, f2.props);
                        d2.ref = sh2(a2, l3, f2);
                        d2.return = a2;
                        a2 = d2;
                        break a;
                      }
                      c(a2, l3);
                      break;
                    } else
                      b2(a2, l3);
                    l3 = l3.sibling;
                  }
                  f2.type === ya ? (d2 = Ah(f2.props.children, a2.mode, h3, f2.key), d2.return = a2, a2 = d2) : (h3 = yh(f2.type, f2.key, f2.props, null, a2.mode, h3), h3.ref = sh2(a2, d2, f2), h3.return = a2, a2 = h3);
                }
                return g2(a2);
              case wa:
                a: {
                  for (l3 = f2.key; null !== d2; ) {
                    if (d2.key === l3) {
                      if (4 === d2.tag && d2.stateNode.containerInfo === f2.containerInfo && d2.stateNode.implementation === f2.implementation) {
                        c(a2, d2.sibling);
                        d2 = e(d2, f2.children || []);
                        d2.return = a2;
                        a2 = d2;
                        break a;
                      } else {
                        c(a2, d2);
                        break;
                      }
                    } else
                      b2(a2, d2);
                    d2 = d2.sibling;
                  }
                  d2 = zh(f2, a2.mode, h3);
                  d2.return = a2;
                  a2 = d2;
                }
                return g2(a2);
              case Ha:
                return l3 = f2._init, J2(a2, d2, l3(f2._payload), h3);
            }
            if (eb(f2))
              return n(a2, d2, f2, h3);
            if (Ka(f2))
              return t(a2, d2, f2, h3);
            th(a2, f2);
          }
          return "string" === typeof f2 && "" !== f2 || "number" === typeof f2 ? (f2 = "" + f2, null !== d2 && 6 === d2.tag ? (c(a2, d2.sibling), d2 = e(d2, f2), d2.return = a2, a2 = d2) : (c(a2, d2), d2 = xh(f2, a2.mode, h3), d2.return = a2, a2 = d2), g2(a2)) : c(a2, d2);
        }
        return J2;
      }
      var Bh = vh(true), Ch = vh(false), Dh = {}, Eh = Uf(Dh), Fh = Uf(Dh), Gh = Uf(Dh);
      function Hh(a) {
        if (a === Dh)
          throw Error(p(174));
        return a;
      }
      function Ih(a, b2) {
        G2(Gh, b2);
        G2(Fh, a);
        G2(Eh, Dh);
        a = b2.nodeType;
        switch (a) {
          case 9:
          case 11:
            b2 = (b2 = b2.documentElement) ? b2.namespaceURI : lb(null, "");
            break;
          default:
            a = 8 === a ? b2.parentNode : b2, b2 = a.namespaceURI || null, a = a.tagName, b2 = lb(b2, a);
        }
        E2(Eh);
        G2(Eh, b2);
      }
      function Jh() {
        E2(Eh);
        E2(Fh);
        E2(Gh);
      }
      function Kh(a) {
        Hh(Gh.current);
        var b2 = Hh(Eh.current);
        var c = lb(b2, a.type);
        b2 !== c && (G2(Fh, a), G2(Eh, c));
      }
      function Lh(a) {
        Fh.current === a && (E2(Eh), E2(Fh));
      }
      var M2 = Uf(0);
      function Mh(a) {
        for (var b2 = a; null !== b2; ) {
          if (13 === b2.tag) {
            var c = b2.memoizedState;
            if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data))
              return b2;
          } else if (19 === b2.tag && void 0 !== b2.memoizedProps.revealOrder) {
            if (0 !== (b2.flags & 128))
              return b2;
          } else if (null !== b2.child) {
            b2.child.return = b2;
            b2 = b2.child;
            continue;
          }
          if (b2 === a)
            break;
          for (; null === b2.sibling; ) {
            if (null === b2.return || b2.return === a)
              return null;
            b2 = b2.return;
          }
          b2.sibling.return = b2.return;
          b2 = b2.sibling;
        }
        return null;
      }
      var Nh = [];
      function Oh() {
        for (var a = 0; a < Nh.length; a++)
          Nh[a]._workInProgressVersionPrimary = null;
        Nh.length = 0;
      }
      var Ph = ua.ReactCurrentDispatcher, Qh = ua.ReactCurrentBatchConfig, Rh = 0, N2 = null, O2 = null, P2 = null, Sh = false, Th = false, Uh = 0, Vh = 0;
      function Q2() {
        throw Error(p(321));
      }
      function Wh(a, b2) {
        if (null === b2)
          return false;
        for (var c = 0; c < b2.length && c < a.length; c++)
          if (!He2(a[c], b2[c]))
            return false;
        return true;
      }
      function Xh(a, b2, c, d, e, f) {
        Rh = f;
        N2 = b2;
        b2.memoizedState = null;
        b2.updateQueue = null;
        b2.lanes = 0;
        Ph.current = null === a || null === a.memoizedState ? Yh : Zh;
        a = c(d, e);
        if (Th) {
          f = 0;
          do {
            Th = false;
            Uh = 0;
            if (25 <= f)
              throw Error(p(301));
            f += 1;
            P2 = O2 = null;
            b2.updateQueue = null;
            Ph.current = $h;
            a = c(d, e);
          } while (Th);
        }
        Ph.current = ai;
        b2 = null !== O2 && null !== O2.next;
        Rh = 0;
        P2 = O2 = N2 = null;
        Sh = false;
        if (b2)
          throw Error(p(300));
        return a;
      }
      function bi() {
        var a = 0 !== Uh;
        Uh = 0;
        return a;
      }
      function ci() {
        var a = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
        null === P2 ? N2.memoizedState = P2 = a : P2 = P2.next = a;
        return P2;
      }
      function di() {
        if (null === O2) {
          var a = N2.alternate;
          a = null !== a ? a.memoizedState : null;
        } else
          a = O2.next;
        var b2 = null === P2 ? N2.memoizedState : P2.next;
        if (null !== b2)
          P2 = b2, O2 = a;
        else {
          if (null === a)
            throw Error(p(310));
          O2 = a;
          a = { memoizedState: O2.memoizedState, baseState: O2.baseState, baseQueue: O2.baseQueue, queue: O2.queue, next: null };
          null === P2 ? N2.memoizedState = P2 = a : P2 = P2.next = a;
        }
        return P2;
      }
      function ei(a, b2) {
        return "function" === typeof b2 ? b2(a) : b2;
      }
      function fi(a) {
        var b2 = di(), c = b2.queue;
        if (null === c)
          throw Error(p(311));
        c.lastRenderedReducer = a;
        var d = O2, e = d.baseQueue, f = c.pending;
        if (null !== f) {
          if (null !== e) {
            var g2 = e.next;
            e.next = f.next;
            f.next = g2;
          }
          d.baseQueue = e = f;
          c.pending = null;
        }
        if (null !== e) {
          f = e.next;
          d = d.baseState;
          var h2 = g2 = null, k2 = null, l2 = f;
          do {
            var m2 = l2.lane;
            if ((Rh & m2) === m2)
              null !== k2 && (k2 = k2.next = { lane: 0, action: l2.action, hasEagerState: l2.hasEagerState, eagerState: l2.eagerState, next: null }), d = l2.hasEagerState ? l2.eagerState : a(d, l2.action);
            else {
              var q2 = { lane: m2, action: l2.action, hasEagerState: l2.hasEagerState, eagerState: l2.eagerState, next: null };
              null === k2 ? (h2 = k2 = q2, g2 = d) : k2 = k2.next = q2;
              N2.lanes |= m2;
              hh |= m2;
            }
            l2 = l2.next;
          } while (null !== l2 && l2 !== f);
          null === k2 ? g2 = d : k2.next = h2;
          He2(d, b2.memoizedState) || (Ug = true);
          b2.memoizedState = d;
          b2.baseState = g2;
          b2.baseQueue = k2;
          c.lastRenderedState = d;
        }
        a = c.interleaved;
        if (null !== a) {
          e = a;
          do
            f = e.lane, N2.lanes |= f, hh |= f, e = e.next;
          while (e !== a);
        } else
          null === e && (c.lanes = 0);
        return [b2.memoizedState, c.dispatch];
      }
      function gi(a) {
        var b2 = di(), c = b2.queue;
        if (null === c)
          throw Error(p(311));
        c.lastRenderedReducer = a;
        var d = c.dispatch, e = c.pending, f = b2.memoizedState;
        if (null !== e) {
          c.pending = null;
          var g2 = e = e.next;
          do
            f = a(f, g2.action), g2 = g2.next;
          while (g2 !== e);
          He2(f, b2.memoizedState) || (Ug = true);
          b2.memoizedState = f;
          null === b2.baseQueue && (b2.baseState = f);
          c.lastRenderedState = f;
        }
        return [f, d];
      }
      function hi() {
      }
      function ii2(a, b2) {
        var c = N2, d = di(), e = b2(), f = !He2(d.memoizedState, e);
        f && (d.memoizedState = e, Ug = true);
        d = d.queue;
        ji(ki.bind(null, c, d, a), [a]);
        if (d.getSnapshot !== b2 || f || null !== P2 && P2.memoizedState.tag & 1) {
          c.flags |= 2048;
          li(9, mi.bind(null, c, d, e, b2), void 0, null);
          if (null === R2)
            throw Error(p(349));
          0 !== (Rh & 30) || ni2(c, b2, e);
        }
        return e;
      }
      function ni2(a, b2, c) {
        a.flags |= 16384;
        a = { getSnapshot: b2, value: c };
        b2 = N2.updateQueue;
        null === b2 ? (b2 = { lastEffect: null, stores: null }, N2.updateQueue = b2, b2.stores = [a]) : (c = b2.stores, null === c ? b2.stores = [a] : c.push(a));
      }
      function mi(a, b2, c, d) {
        b2.value = c;
        b2.getSnapshot = d;
        oi(b2) && pi2(a);
      }
      function ki(a, b2, c) {
        return c(function() {
          oi(b2) && pi2(a);
        });
      }
      function oi(a) {
        var b2 = a.getSnapshot;
        a = a.value;
        try {
          var c = b2();
          return !He2(a, c);
        } catch (d) {
          return true;
        }
      }
      function pi2(a) {
        var b2 = Zg(a, 1);
        null !== b2 && mh(b2, a, 1, -1);
      }
      function qi(a) {
        var b2 = ci();
        "function" === typeof a && (a = a());
        b2.memoizedState = b2.baseState = a;
        a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: ei, lastRenderedState: a };
        b2.queue = a;
        a = a.dispatch = ri.bind(null, N2, a);
        return [b2.memoizedState, a];
      }
      function li(a, b2, c, d) {
        a = { tag: a, create: b2, destroy: c, deps: d, next: null };
        b2 = N2.updateQueue;
        null === b2 ? (b2 = { lastEffect: null, stores: null }, N2.updateQueue = b2, b2.lastEffect = a.next = a) : (c = b2.lastEffect, null === c ? b2.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b2.lastEffect = a));
        return a;
      }
      function si() {
        return di().memoizedState;
      }
      function ti(a, b2, c, d) {
        var e = ci();
        N2.flags |= a;
        e.memoizedState = li(1 | b2, c, void 0, void 0 === d ? null : d);
      }
      function ui(a, b2, c, d) {
        var e = di();
        d = void 0 === d ? null : d;
        var f = void 0;
        if (null !== O2) {
          var g2 = O2.memoizedState;
          f = g2.destroy;
          if (null !== d && Wh(d, g2.deps)) {
            e.memoizedState = li(b2, c, f, d);
            return;
          }
        }
        N2.flags |= a;
        e.memoizedState = li(1 | b2, c, f, d);
      }
      function vi(a, b2) {
        return ti(8390656, 8, a, b2);
      }
      function ji(a, b2) {
        return ui(2048, 8, a, b2);
      }
      function wi(a, b2) {
        return ui(4, 2, a, b2);
      }
      function xi2(a, b2) {
        return ui(4, 4, a, b2);
      }
      function yi(a, b2) {
        if ("function" === typeof b2)
          return a = a(), b2(a), function() {
            b2(null);
          };
        if (null !== b2 && void 0 !== b2)
          return a = a(), b2.current = a, function() {
            b2.current = null;
          };
      }
      function zi(a, b2, c) {
        c = null !== c && void 0 !== c ? c.concat([a]) : null;
        return ui(4, 4, yi.bind(null, b2, a), c);
      }
      function Ai() {
      }
      function Bi(a, b2) {
        var c = di();
        b2 = void 0 === b2 ? null : b2;
        var d = c.memoizedState;
        if (null !== d && null !== b2 && Wh(b2, d[1]))
          return d[0];
        c.memoizedState = [a, b2];
        return a;
      }
      function Ci(a, b2) {
        var c = di();
        b2 = void 0 === b2 ? null : b2;
        var d = c.memoizedState;
        if (null !== d && null !== b2 && Wh(b2, d[1]))
          return d[0];
        a = a();
        c.memoizedState = [a, b2];
        return a;
      }
      function Di(a, b2, c) {
        if (0 === (Rh & 21))
          return a.baseState && (a.baseState = false, Ug = true), a.memoizedState = c;
        He2(c, b2) || (c = yc(), N2.lanes |= c, hh |= c, a.baseState = true);
        return b2;
      }
      function Ei(a, b2) {
        var c = C2;
        C2 = 0 !== c && 4 > c ? c : 4;
        a(true);
        var d = Qh.transition;
        Qh.transition = {};
        try {
          a(false), b2();
        } finally {
          C2 = c, Qh.transition = d;
        }
      }
      function Fi() {
        return di().memoizedState;
      }
      function Gi(a, b2, c) {
        var d = lh(a);
        c = { lane: d, action: c, hasEagerState: false, eagerState: null, next: null };
        if (Hi(a))
          Ii(b2, c);
        else if (c = Yg(a, b2, c, d), null !== c) {
          var e = L2();
          mh(c, a, d, e);
          Ji(c, b2, d);
        }
      }
      function ri(a, b2, c) {
        var d = lh(a), e = { lane: d, action: c, hasEagerState: false, eagerState: null, next: null };
        if (Hi(a))
          Ii(b2, e);
        else {
          var f = a.alternate;
          if (0 === a.lanes && (null === f || 0 === f.lanes) && (f = b2.lastRenderedReducer, null !== f))
            try {
              var g2 = b2.lastRenderedState, h2 = f(g2, c);
              e.hasEagerState = true;
              e.eagerState = h2;
              if (He2(h2, g2)) {
                var k2 = b2.interleaved;
                null === k2 ? (e.next = e, Xg(b2)) : (e.next = k2.next, k2.next = e);
                b2.interleaved = e;
                return;
              }
            } catch (l2) {
            } finally {
            }
          c = Yg(a, b2, e, d);
          null !== c && (e = L2(), mh(c, a, d, e), Ji(c, b2, d));
        }
      }
      function Hi(a) {
        var b2 = a.alternate;
        return a === N2 || null !== b2 && b2 === N2;
      }
      function Ii(a, b2) {
        Th = Sh = true;
        var c = a.pending;
        null === c ? b2.next = b2 : (b2.next = c.next, c.next = b2);
        a.pending = b2;
      }
      function Ji(a, b2, c) {
        if (0 !== (c & 4194240)) {
          var d = b2.lanes;
          d &= a.pendingLanes;
          c |= d;
          b2.lanes = c;
          Cc(a, c);
        }
      }
      var ai = { readContext: Vg, useCallback: Q2, useContext: Q2, useEffect: Q2, useImperativeHandle: Q2, useInsertionEffect: Q2, useLayoutEffect: Q2, useMemo: Q2, useReducer: Q2, useRef: Q2, useState: Q2, useDebugValue: Q2, useDeferredValue: Q2, useTransition: Q2, useMutableSource: Q2, useSyncExternalStore: Q2, useId: Q2, unstable_isNewReconciler: false }, Yh = { readContext: Vg, useCallback: function(a, b2) {
        ci().memoizedState = [a, void 0 === b2 ? null : b2];
        return a;
      }, useContext: Vg, useEffect: vi, useImperativeHandle: function(a, b2, c) {
        c = null !== c && void 0 !== c ? c.concat([a]) : null;
        return ti(4194308, 4, yi.bind(null, b2, a), c);
      }, useLayoutEffect: function(a, b2) {
        return ti(4194308, 4, a, b2);
      }, useInsertionEffect: function(a, b2) {
        return ti(4, 2, a, b2);
      }, useMemo: function(a, b2) {
        var c = ci();
        b2 = void 0 === b2 ? null : b2;
        a = a();
        c.memoizedState = [a, b2];
        return a;
      }, useReducer: function(a, b2, c) {
        var d = ci();
        b2 = void 0 !== c ? c(b2) : b2;
        d.memoizedState = d.baseState = b2;
        a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: a, lastRenderedState: b2 };
        d.queue = a;
        a = a.dispatch = Gi.bind(null, N2, a);
        return [d.memoizedState, a];
      }, useRef: function(a) {
        var b2 = ci();
        a = { current: a };
        return b2.memoizedState = a;
      }, useState: qi, useDebugValue: Ai, useDeferredValue: function(a) {
        return ci().memoizedState = a;
      }, useTransition: function() {
        var a = qi(false), b2 = a[0];
        a = Ei.bind(null, a[1]);
        ci().memoizedState = a;
        return [b2, a];
      }, useMutableSource: function() {
      }, useSyncExternalStore: function(a, b2, c) {
        var d = N2, e = ci();
        if (I2) {
          if (void 0 === c)
            throw Error(p(407));
          c = c();
        } else {
          c = b2();
          if (null === R2)
            throw Error(p(349));
          0 !== (Rh & 30) || ni2(d, b2, c);
        }
        e.memoizedState = c;
        var f = { value: c, getSnapshot: b2 };
        e.queue = f;
        vi(ki.bind(null, d, f, a), [a]);
        d.flags |= 2048;
        li(9, mi.bind(null, d, f, c, b2), void 0, null);
        return c;
      }, useId: function() {
        var a = ci(), b2 = R2.identifierPrefix;
        if (I2) {
          var c = sg;
          var d = rg;
          c = (d & ~(1 << 32 - oc(d) - 1)).toString(32) + c;
          b2 = ":" + b2 + "R" + c;
          c = Uh++;
          0 < c && (b2 += "H" + c.toString(32));
          b2 += ":";
        } else
          c = Vh++, b2 = ":" + b2 + "r" + c.toString(32) + ":";
        return a.memoizedState = b2;
      }, unstable_isNewReconciler: false }, Zh = { readContext: Vg, useCallback: Bi, useContext: Vg, useEffect: ji, useImperativeHandle: zi, useInsertionEffect: wi, useLayoutEffect: xi2, useMemo: Ci, useReducer: fi, useRef: si, useState: function() {
        return fi(ei);
      }, useDebugValue: Ai, useDeferredValue: function(a) {
        var b2 = di();
        return Di(b2, O2.memoizedState, a);
      }, useTransition: function() {
        var a = fi(ei)[0], b2 = di().memoizedState;
        return [a, b2];
      }, useMutableSource: hi, useSyncExternalStore: ii2, useId: Fi, unstable_isNewReconciler: false }, $h = { readContext: Vg, useCallback: Bi, useContext: Vg, useEffect: ji, useImperativeHandle: zi, useInsertionEffect: wi, useLayoutEffect: xi2, useMemo: Ci, useReducer: gi, useRef: si, useState: function() {
        return gi(ei);
      }, useDebugValue: Ai, useDeferredValue: function(a) {
        var b2 = di();
        return null === O2 ? b2.memoizedState = a : Di(b2, O2.memoizedState, a);
      }, useTransition: function() {
        var a = gi(ei)[0], b2 = di().memoizedState;
        return [a, b2];
      }, useMutableSource: hi, useSyncExternalStore: ii2, useId: Fi, unstable_isNewReconciler: false };
      function Ki(a, b2) {
        try {
          var c = "", d = b2;
          do
            c += Pa(d), d = d.return;
          while (d);
          var e = c;
        } catch (f) {
          e = "\nError generating stack: " + f.message + "\n" + f.stack;
        }
        return { value: a, source: b2, stack: e, digest: null };
      }
      function Li(a, b2, c) {
        return { value: a, source: null, stack: null != c ? c : null, digest: null != b2 ? b2 : null };
      }
      function Mi(a, b2) {
        try {
          console.error(b2.value);
        } catch (c) {
          setTimeout(function() {
            throw c;
          });
        }
      }
      var Ni = "function" === typeof WeakMap ? WeakMap : Map;
      function Oi(a, b2, c) {
        c = ch(-1, c);
        c.tag = 3;
        c.payload = { element: null };
        var d = b2.value;
        c.callback = function() {
          Pi2 || (Pi2 = true, Qi = d);
          Mi(a, b2);
        };
        return c;
      }
      function Ri(a, b2, c) {
        c = ch(-1, c);
        c.tag = 3;
        var d = a.type.getDerivedStateFromError;
        if ("function" === typeof d) {
          var e = b2.value;
          c.payload = function() {
            return d(e);
          };
          c.callback = function() {
            Mi(a, b2);
          };
        }
        var f = a.stateNode;
        null !== f && "function" === typeof f.componentDidCatch && (c.callback = function() {
          Mi(a, b2);
          "function" !== typeof d && (null === Si ? Si = /* @__PURE__ */ new Set([this]) : Si.add(this));
          var c2 = b2.stack;
          this.componentDidCatch(b2.value, { componentStack: null !== c2 ? c2 : "" });
        });
        return c;
      }
      function Ti(a, b2, c) {
        var d = a.pingCache;
        if (null === d) {
          d = a.pingCache = new Ni();
          var e = /* @__PURE__ */ new Set();
          d.set(b2, e);
        } else
          e = d.get(b2), void 0 === e && (e = /* @__PURE__ */ new Set(), d.set(b2, e));
        e.has(c) || (e.add(c), a = Ui.bind(null, a, b2, c), b2.then(a, a));
      }
      function Vi(a) {
        do {
          var b2;
          if (b2 = 13 === a.tag)
            b2 = a.memoizedState, b2 = null !== b2 ? null !== b2.dehydrated ? true : false : true;
          if (b2)
            return a;
          a = a.return;
        } while (null !== a);
        return null;
      }
      function Wi(a, b2, c, d, e) {
        if (0 === (a.mode & 1))
          return a === b2 ? a.flags |= 65536 : (a.flags |= 128, c.flags |= 131072, c.flags &= -52805, 1 === c.tag && (null === c.alternate ? c.tag = 17 : (b2 = ch(-1, 1), b2.tag = 2, dh(c, b2, 1))), c.lanes |= 1), a;
        a.flags |= 65536;
        a.lanes = e;
        return a;
      }
      var Xi2 = ua.ReactCurrentOwner, Ug = false;
      function Yi(a, b2, c, d) {
        b2.child = null === a ? Ch(b2, null, c, d) : Bh(b2, a.child, c, d);
      }
      function Zi(a, b2, c, d, e) {
        c = c.render;
        var f = b2.ref;
        Tg(b2, e);
        d = Xh(a, b2, c, d, f, e);
        c = bi();
        if (null !== a && !Ug)
          return b2.updateQueue = a.updateQueue, b2.flags &= -2053, a.lanes &= ~e, $i(a, b2, e);
        I2 && c && vg(b2);
        b2.flags |= 1;
        Yi(a, b2, d, e);
        return b2.child;
      }
      function aj(a, b2, c, d, e) {
        if (null === a) {
          var f = c.type;
          if ("function" === typeof f && !bj(f) && void 0 === f.defaultProps && null === c.compare && void 0 === c.defaultProps)
            return b2.tag = 15, b2.type = f, cj(a, b2, f, d, e);
          a = yh(c.type, null, d, b2, b2.mode, e);
          a.ref = b2.ref;
          a.return = b2;
          return b2.child = a;
        }
        f = a.child;
        if (0 === (a.lanes & e)) {
          var g2 = f.memoizedProps;
          c = c.compare;
          c = null !== c ? c : Ie2;
          if (c(g2, d) && a.ref === b2.ref)
            return $i(a, b2, e);
        }
        b2.flags |= 1;
        a = wh(f, d);
        a.ref = b2.ref;
        a.return = b2;
        return b2.child = a;
      }
      function cj(a, b2, c, d, e) {
        if (null !== a) {
          var f = a.memoizedProps;
          if (Ie2(f, d) && a.ref === b2.ref)
            if (Ug = false, b2.pendingProps = d = f, 0 !== (a.lanes & e))
              0 !== (a.flags & 131072) && (Ug = true);
            else
              return b2.lanes = a.lanes, $i(a, b2, e);
        }
        return dj(a, b2, c, d, e);
      }
      function ej(a, b2, c) {
        var d = b2.pendingProps, e = d.children, f = null !== a ? a.memoizedState : null;
        if ("hidden" === d.mode) {
          if (0 === (b2.mode & 1))
            b2.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, G2(fj, gj), gj |= c;
          else {
            if (0 === (c & 1073741824))
              return a = null !== f ? f.baseLanes | c : c, b2.lanes = b2.childLanes = 1073741824, b2.memoizedState = { baseLanes: a, cachePool: null, transitions: null }, b2.updateQueue = null, G2(fj, gj), gj |= a, null;
            b2.memoizedState = { baseLanes: 0, cachePool: null, transitions: null };
            d = null !== f ? f.baseLanes : c;
            G2(fj, gj);
            gj |= d;
          }
        } else
          null !== f ? (d = f.baseLanes | c, b2.memoizedState = null) : d = c, G2(fj, gj), gj |= d;
        Yi(a, b2, e, c);
        return b2.child;
      }
      function hj(a, b2) {
        var c = b2.ref;
        if (null === a && null !== c || null !== a && a.ref !== c)
          b2.flags |= 512, b2.flags |= 2097152;
      }
      function dj(a, b2, c, d, e) {
        var f = Zf(c) ? Xf : H2.current;
        f = Yf(b2, f);
        Tg(b2, e);
        c = Xh(a, b2, c, d, f, e);
        d = bi();
        if (null !== a && !Ug)
          return b2.updateQueue = a.updateQueue, b2.flags &= -2053, a.lanes &= ~e, $i(a, b2, e);
        I2 && d && vg(b2);
        b2.flags |= 1;
        Yi(a, b2, c, e);
        return b2.child;
      }
      function ij(a, b2, c, d, e) {
        if (Zf(c)) {
          var f = true;
          cg(b2);
        } else
          f = false;
        Tg(b2, e);
        if (null === b2.stateNode)
          jj(a, b2), ph(b2, c, d), rh(b2, c, d, e), d = true;
        else if (null === a) {
          var g2 = b2.stateNode, h2 = b2.memoizedProps;
          g2.props = h2;
          var k2 = g2.context, l2 = c.contextType;
          "object" === typeof l2 && null !== l2 ? l2 = Vg(l2) : (l2 = Zf(c) ? Xf : H2.current, l2 = Yf(b2, l2));
          var m2 = c.getDerivedStateFromProps, q2 = "function" === typeof m2 || "function" === typeof g2.getSnapshotBeforeUpdate;
          q2 || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h2 !== d || k2 !== l2) && qh(b2, g2, d, l2);
          $g = false;
          var r = b2.memoizedState;
          g2.state = r;
          gh(b2, d, g2, e);
          k2 = b2.memoizedState;
          h2 !== d || r !== k2 || Wf.current || $g ? ("function" === typeof m2 && (kh(b2, c, m2, d), k2 = b2.memoizedState), (h2 = $g || oh(b2, c, h2, d, r, k2, l2)) ? (q2 || "function" !== typeof g2.UNSAFE_componentWillMount && "function" !== typeof g2.componentWillMount || ("function" === typeof g2.componentWillMount && g2.componentWillMount(), "function" === typeof g2.UNSAFE_componentWillMount && g2.UNSAFE_componentWillMount()), "function" === typeof g2.componentDidMount && (b2.flags |= 4194308)) : ("function" === typeof g2.componentDidMount && (b2.flags |= 4194308), b2.memoizedProps = d, b2.memoizedState = k2), g2.props = d, g2.state = k2, g2.context = l2, d = h2) : ("function" === typeof g2.componentDidMount && (b2.flags |= 4194308), d = false);
        } else {
          g2 = b2.stateNode;
          bh(a, b2);
          h2 = b2.memoizedProps;
          l2 = b2.type === b2.elementType ? h2 : Lg(b2.type, h2);
          g2.props = l2;
          q2 = b2.pendingProps;
          r = g2.context;
          k2 = c.contextType;
          "object" === typeof k2 && null !== k2 ? k2 = Vg(k2) : (k2 = Zf(c) ? Xf : H2.current, k2 = Yf(b2, k2));
          var y2 = c.getDerivedStateFromProps;
          (m2 = "function" === typeof y2 || "function" === typeof g2.getSnapshotBeforeUpdate) || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h2 !== q2 || r !== k2) && qh(b2, g2, d, k2);
          $g = false;
          r = b2.memoizedState;
          g2.state = r;
          gh(b2, d, g2, e);
          var n = b2.memoizedState;
          h2 !== q2 || r !== n || Wf.current || $g ? ("function" === typeof y2 && (kh(b2, c, y2, d), n = b2.memoizedState), (l2 = $g || oh(b2, c, l2, d, r, n, k2) || false) ? (m2 || "function" !== typeof g2.UNSAFE_componentWillUpdate && "function" !== typeof g2.componentWillUpdate || ("function" === typeof g2.componentWillUpdate && g2.componentWillUpdate(d, n, k2), "function" === typeof g2.UNSAFE_componentWillUpdate && g2.UNSAFE_componentWillUpdate(d, n, k2)), "function" === typeof g2.componentDidUpdate && (b2.flags |= 4), "function" === typeof g2.getSnapshotBeforeUpdate && (b2.flags |= 1024)) : ("function" !== typeof g2.componentDidUpdate || h2 === a.memoizedProps && r === a.memoizedState || (b2.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h2 === a.memoizedProps && r === a.memoizedState || (b2.flags |= 1024), b2.memoizedProps = d, b2.memoizedState = n), g2.props = d, g2.state = n, g2.context = k2, d = l2) : ("function" !== typeof g2.componentDidUpdate || h2 === a.memoizedProps && r === a.memoizedState || (b2.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h2 === a.memoizedProps && r === a.memoizedState || (b2.flags |= 1024), d = false);
        }
        return kj(a, b2, c, d, f, e);
      }
      function kj(a, b2, c, d, e, f) {
        hj(a, b2);
        var g2 = 0 !== (b2.flags & 128);
        if (!d && !g2)
          return e && dg(b2, c, false), $i(a, b2, f);
        d = b2.stateNode;
        Xi2.current = b2;
        var h2 = g2 && "function" !== typeof c.getDerivedStateFromError ? null : d.render();
        b2.flags |= 1;
        null !== a && g2 ? (b2.child = Bh(b2, a.child, null, f), b2.child = Bh(b2, null, h2, f)) : Yi(a, b2, h2, f);
        b2.memoizedState = d.state;
        e && dg(b2, c, true);
        return b2.child;
      }
      function lj(a) {
        var b2 = a.stateNode;
        b2.pendingContext ? ag(a, b2.pendingContext, b2.pendingContext !== b2.context) : b2.context && ag(a, b2.context, false);
        Ih(a, b2.containerInfo);
      }
      function mj(a, b2, c, d, e) {
        Ig();
        Jg(e);
        b2.flags |= 256;
        Yi(a, b2, c, d);
        return b2.child;
      }
      var nj = { dehydrated: null, treeContext: null, retryLane: 0 };
      function oj(a) {
        return { baseLanes: a, cachePool: null, transitions: null };
      }
      function pj(a, b2, c) {
        var d = b2.pendingProps, e = M2.current, f = false, g2 = 0 !== (b2.flags & 128), h2;
        (h2 = g2) || (h2 = null !== a && null === a.memoizedState ? false : 0 !== (e & 2));
        if (h2)
          f = true, b2.flags &= -129;
        else if (null === a || null !== a.memoizedState)
          e |= 1;
        G2(M2, e & 1);
        if (null === a) {
          Eg(b2);
          a = b2.memoizedState;
          if (null !== a && (a = a.dehydrated, null !== a))
            return 0 === (b2.mode & 1) ? b2.lanes = 1 : "$!" === a.data ? b2.lanes = 8 : b2.lanes = 1073741824, null;
          g2 = d.children;
          a = d.fallback;
          return f ? (d = b2.mode, f = b2.child, g2 = { mode: "hidden", children: g2 }, 0 === (d & 1) && null !== f ? (f.childLanes = 0, f.pendingProps = g2) : f = qj(g2, d, 0, null), a = Ah(a, d, c, null), f.return = b2, a.return = b2, f.sibling = a, b2.child = f, b2.child.memoizedState = oj(c), b2.memoizedState = nj, a) : rj(b2, g2);
        }
        e = a.memoizedState;
        if (null !== e && (h2 = e.dehydrated, null !== h2))
          return sj(a, b2, g2, d, h2, e, c);
        if (f) {
          f = d.fallback;
          g2 = b2.mode;
          e = a.child;
          h2 = e.sibling;
          var k2 = { mode: "hidden", children: d.children };
          0 === (g2 & 1) && b2.child !== e ? (d = b2.child, d.childLanes = 0, d.pendingProps = k2, b2.deletions = null) : (d = wh(e, k2), d.subtreeFlags = e.subtreeFlags & 14680064);
          null !== h2 ? f = wh(h2, f) : (f = Ah(f, g2, c, null), f.flags |= 2);
          f.return = b2;
          d.return = b2;
          d.sibling = f;
          b2.child = d;
          d = f;
          f = b2.child;
          g2 = a.child.memoizedState;
          g2 = null === g2 ? oj(c) : { baseLanes: g2.baseLanes | c, cachePool: null, transitions: g2.transitions };
          f.memoizedState = g2;
          f.childLanes = a.childLanes & ~c;
          b2.memoizedState = nj;
          return d;
        }
        f = a.child;
        a = f.sibling;
        d = wh(f, { mode: "visible", children: d.children });
        0 === (b2.mode & 1) && (d.lanes = c);
        d.return = b2;
        d.sibling = null;
        null !== a && (c = b2.deletions, null === c ? (b2.deletions = [a], b2.flags |= 16) : c.push(a));
        b2.child = d;
        b2.memoizedState = null;
        return d;
      }
      function rj(a, b2) {
        b2 = qj({ mode: "visible", children: b2 }, a.mode, 0, null);
        b2.return = a;
        return a.child = b2;
      }
      function tj(a, b2, c, d) {
        null !== d && Jg(d);
        Bh(b2, a.child, null, c);
        a = rj(b2, b2.pendingProps.children);
        a.flags |= 2;
        b2.memoizedState = null;
        return a;
      }
      function sj(a, b2, c, d, e, f, g2) {
        if (c) {
          if (b2.flags & 256)
            return b2.flags &= -257, d = Li(Error(p(422))), tj(a, b2, g2, d);
          if (null !== b2.memoizedState)
            return b2.child = a.child, b2.flags |= 128, null;
          f = d.fallback;
          e = b2.mode;
          d = qj({ mode: "visible", children: d.children }, e, 0, null);
          f = Ah(f, e, g2, null);
          f.flags |= 2;
          d.return = b2;
          f.return = b2;
          d.sibling = f;
          b2.child = d;
          0 !== (b2.mode & 1) && Bh(b2, a.child, null, g2);
          b2.child.memoizedState = oj(g2);
          b2.memoizedState = nj;
          return f;
        }
        if (0 === (b2.mode & 1))
          return tj(a, b2, g2, null);
        if ("$!" === e.data) {
          d = e.nextSibling && e.nextSibling.dataset;
          if (d)
            var h2 = d.dgst;
          d = h2;
          f = Error(p(419));
          d = Li(f, d, void 0);
          return tj(a, b2, g2, d);
        }
        h2 = 0 !== (g2 & a.childLanes);
        if (Ug || h2) {
          d = R2;
          if (null !== d) {
            switch (g2 & -g2) {
              case 4:
                e = 2;
                break;
              case 16:
                e = 8;
                break;
              case 64:
              case 128:
              case 256:
              case 512:
              case 1024:
              case 2048:
              case 4096:
              case 8192:
              case 16384:
              case 32768:
              case 65536:
              case 131072:
              case 262144:
              case 524288:
              case 1048576:
              case 2097152:
              case 4194304:
              case 8388608:
              case 16777216:
              case 33554432:
              case 67108864:
                e = 32;
                break;
              case 536870912:
                e = 268435456;
                break;
              default:
                e = 0;
            }
            e = 0 !== (e & (d.suspendedLanes | g2)) ? 0 : e;
            0 !== e && e !== f.retryLane && (f.retryLane = e, Zg(a, e), mh(d, a, e, -1));
          }
          uj();
          d = Li(Error(p(421)));
          return tj(a, b2, g2, d);
        }
        if ("$?" === e.data)
          return b2.flags |= 128, b2.child = a.child, b2 = vj.bind(null, a), e._reactRetry = b2, null;
        a = f.treeContext;
        yg = Lf(e.nextSibling);
        xg = b2;
        I2 = true;
        zg = null;
        null !== a && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a.id, sg = a.overflow, qg = b2);
        b2 = rj(b2, d.children);
        b2.flags |= 4096;
        return b2;
      }
      function wj(a, b2, c) {
        a.lanes |= b2;
        var d = a.alternate;
        null !== d && (d.lanes |= b2);
        Sg(a.return, b2, c);
      }
      function xj(a, b2, c, d, e) {
        var f = a.memoizedState;
        null === f ? a.memoizedState = { isBackwards: b2, rendering: null, renderingStartTime: 0, last: d, tail: c, tailMode: e } : (f.isBackwards = b2, f.rendering = null, f.renderingStartTime = 0, f.last = d, f.tail = c, f.tailMode = e);
      }
      function yj(a, b2, c) {
        var d = b2.pendingProps, e = d.revealOrder, f = d.tail;
        Yi(a, b2, d.children, c);
        d = M2.current;
        if (0 !== (d & 2))
          d = d & 1 | 2, b2.flags |= 128;
        else {
          if (null !== a && 0 !== (a.flags & 128))
            a:
              for (a = b2.child; null !== a; ) {
                if (13 === a.tag)
                  null !== a.memoizedState && wj(a, c, b2);
                else if (19 === a.tag)
                  wj(a, c, b2);
                else if (null !== a.child) {
                  a.child.return = a;
                  a = a.child;
                  continue;
                }
                if (a === b2)
                  break a;
                for (; null === a.sibling; ) {
                  if (null === a.return || a.return === b2)
                    break a;
                  a = a.return;
                }
                a.sibling.return = a.return;
                a = a.sibling;
              }
          d &= 1;
        }
        G2(M2, d);
        if (0 === (b2.mode & 1))
          b2.memoizedState = null;
        else
          switch (e) {
            case "forwards":
              c = b2.child;
              for (e = null; null !== c; )
                a = c.alternate, null !== a && null === Mh(a) && (e = c), c = c.sibling;
              c = e;
              null === c ? (e = b2.child, b2.child = null) : (e = c.sibling, c.sibling = null);
              xj(b2, false, e, c, f);
              break;
            case "backwards":
              c = null;
              e = b2.child;
              for (b2.child = null; null !== e; ) {
                a = e.alternate;
                if (null !== a && null === Mh(a)) {
                  b2.child = e;
                  break;
                }
                a = e.sibling;
                e.sibling = c;
                c = e;
                e = a;
              }
              xj(b2, true, c, null, f);
              break;
            case "together":
              xj(b2, false, null, null, void 0);
              break;
            default:
              b2.memoizedState = null;
          }
        return b2.child;
      }
      function jj(a, b2) {
        0 === (b2.mode & 1) && null !== a && (a.alternate = null, b2.alternate = null, b2.flags |= 2);
      }
      function $i(a, b2, c) {
        null !== a && (b2.dependencies = a.dependencies);
        hh |= b2.lanes;
        if (0 === (c & b2.childLanes))
          return null;
        if (null !== a && b2.child !== a.child)
          throw Error(p(153));
        if (null !== b2.child) {
          a = b2.child;
          c = wh(a, a.pendingProps);
          b2.child = c;
          for (c.return = b2; null !== a.sibling; )
            a = a.sibling, c = c.sibling = wh(a, a.pendingProps), c.return = b2;
          c.sibling = null;
        }
        return b2.child;
      }
      function zj(a, b2, c) {
        switch (b2.tag) {
          case 3:
            lj(b2);
            Ig();
            break;
          case 5:
            Kh(b2);
            break;
          case 1:
            Zf(b2.type) && cg(b2);
            break;
          case 4:
            Ih(b2, b2.stateNode.containerInfo);
            break;
          case 10:
            var d = b2.type._context, e = b2.memoizedProps.value;
            G2(Mg, d._currentValue);
            d._currentValue = e;
            break;
          case 13:
            d = b2.memoizedState;
            if (null !== d) {
              if (null !== d.dehydrated)
                return G2(M2, M2.current & 1), b2.flags |= 128, null;
              if (0 !== (c & b2.child.childLanes))
                return pj(a, b2, c);
              G2(M2, M2.current & 1);
              a = $i(a, b2, c);
              return null !== a ? a.sibling : null;
            }
            G2(M2, M2.current & 1);
            break;
          case 19:
            d = 0 !== (c & b2.childLanes);
            if (0 !== (a.flags & 128)) {
              if (d)
                return yj(a, b2, c);
              b2.flags |= 128;
            }
            e = b2.memoizedState;
            null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);
            G2(M2, M2.current);
            if (d)
              break;
            else
              return null;
          case 22:
          case 23:
            return b2.lanes = 0, ej(a, b2, c);
        }
        return $i(a, b2, c);
      }
      var Aj, Bj, Cj, Dj;
      Aj = function(a, b2) {
        for (var c = b2.child; null !== c; ) {
          if (5 === c.tag || 6 === c.tag)
            a.appendChild(c.stateNode);
          else if (4 !== c.tag && null !== c.child) {
            c.child.return = c;
            c = c.child;
            continue;
          }
          if (c === b2)
            break;
          for (; null === c.sibling; ) {
            if (null === c.return || c.return === b2)
              return;
            c = c.return;
          }
          c.sibling.return = c.return;
          c = c.sibling;
        }
      };
      Bj = function() {
      };
      Cj = function(a, b2, c, d) {
        var e = a.memoizedProps;
        if (e !== d) {
          a = b2.stateNode;
          Hh(Eh.current);
          var f = null;
          switch (c) {
            case "input":
              e = Ya(a, e);
              d = Ya(a, d);
              f = [];
              break;
            case "select":
              e = A({}, e, { value: void 0 });
              d = A({}, d, { value: void 0 });
              f = [];
              break;
            case "textarea":
              e = gb(a, e);
              d = gb(a, d);
              f = [];
              break;
            default:
              "function" !== typeof e.onClick && "function" === typeof d.onClick && (a.onclick = Bf);
          }
          ub(c, d);
          var g2;
          c = null;
          for (l2 in e)
            if (!d.hasOwnProperty(l2) && e.hasOwnProperty(l2) && null != e[l2])
              if ("style" === l2) {
                var h2 = e[l2];
                for (g2 in h2)
                  h2.hasOwnProperty(g2) && (c || (c = {}), c[g2] = "");
              } else
                "dangerouslySetInnerHTML" !== l2 && "children" !== l2 && "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && "autoFocus" !== l2 && (ea.hasOwnProperty(l2) ? f || (f = []) : (f = f || []).push(l2, null));
          for (l2 in d) {
            var k2 = d[l2];
            h2 = null != e ? e[l2] : void 0;
            if (d.hasOwnProperty(l2) && k2 !== h2 && (null != k2 || null != h2))
              if ("style" === l2) {
                if (h2) {
                  for (g2 in h2)
                    !h2.hasOwnProperty(g2) || k2 && k2.hasOwnProperty(g2) || (c || (c = {}), c[g2] = "");
                  for (g2 in k2)
                    k2.hasOwnProperty(g2) && h2[g2] !== k2[g2] && (c || (c = {}), c[g2] = k2[g2]);
                } else
                  c || (f || (f = []), f.push(l2, c)), c = k2;
              } else
                "dangerouslySetInnerHTML" === l2 ? (k2 = k2 ? k2.__html : void 0, h2 = h2 ? h2.__html : void 0, null != k2 && h2 !== k2 && (f = f || []).push(l2, k2)) : "children" === l2 ? "string" !== typeof k2 && "number" !== typeof k2 || (f = f || []).push(l2, "" + k2) : "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && (ea.hasOwnProperty(l2) ? (null != k2 && "onScroll" === l2 && D2("scroll", a), f || h2 === k2 || (f = [])) : (f = f || []).push(l2, k2));
          }
          c && (f = f || []).push("style", c);
          var l2 = f;
          if (b2.updateQueue = l2)
            b2.flags |= 4;
        }
      };
      Dj = function(a, b2, c, d) {
        c !== d && (b2.flags |= 4);
      };
      function Ej(a, b2) {
        if (!I2)
          switch (a.tailMode) {
            case "hidden":
              b2 = a.tail;
              for (var c = null; null !== b2; )
                null !== b2.alternate && (c = b2), b2 = b2.sibling;
              null === c ? a.tail = null : c.sibling = null;
              break;
            case "collapsed":
              c = a.tail;
              for (var d = null; null !== c; )
                null !== c.alternate && (d = c), c = c.sibling;
              null === d ? b2 || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;
          }
      }
      function S2(a) {
        var b2 = null !== a.alternate && a.alternate.child === a.child, c = 0, d = 0;
        if (b2)
          for (var e = a.child; null !== e; )
            c |= e.lanes | e.childLanes, d |= e.subtreeFlags & 14680064, d |= e.flags & 14680064, e.return = a, e = e.sibling;
        else
          for (e = a.child; null !== e; )
            c |= e.lanes | e.childLanes, d |= e.subtreeFlags, d |= e.flags, e.return = a, e = e.sibling;
        a.subtreeFlags |= d;
        a.childLanes = c;
        return b2;
      }
      function Fj(a, b2, c) {
        var d = b2.pendingProps;
        wg(b2);
        switch (b2.tag) {
          case 2:
          case 16:
          case 15:
          case 0:
          case 11:
          case 7:
          case 8:
          case 12:
          case 9:
          case 14:
            return S2(b2), null;
          case 1:
            return Zf(b2.type) && $f(), S2(b2), null;
          case 3:
            d = b2.stateNode;
            Jh();
            E2(Wf);
            E2(H2);
            Oh();
            d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);
            if (null === a || null === a.child)
              Gg2(b2) ? b2.flags |= 4 : null === a || a.memoizedState.isDehydrated && 0 === (b2.flags & 256) || (b2.flags |= 1024, null !== zg && (Gj(zg), zg = null));
            Bj(a, b2);
            S2(b2);
            return null;
          case 5:
            Lh(b2);
            var e = Hh(Gh.current);
            c = b2.type;
            if (null !== a && null != b2.stateNode)
              Cj(a, b2, c, d, e), a.ref !== b2.ref && (b2.flags |= 512, b2.flags |= 2097152);
            else {
              if (!d) {
                if (null === b2.stateNode)
                  throw Error(p(166));
                S2(b2);
                return null;
              }
              a = Hh(Eh.current);
              if (Gg2(b2)) {
                d = b2.stateNode;
                c = b2.type;
                var f = b2.memoizedProps;
                d[Of] = b2;
                d[Pf] = f;
                a = 0 !== (b2.mode & 1);
                switch (c) {
                  case "dialog":
                    D2("cancel", d);
                    D2("close", d);
                    break;
                  case "iframe":
                  case "object":
                  case "embed":
                    D2("load", d);
                    break;
                  case "video":
                  case "audio":
                    for (e = 0; e < lf.length; e++)
                      D2(lf[e], d);
                    break;
                  case "source":
                    D2("error", d);
                    break;
                  case "img":
                  case "image":
                  case "link":
                    D2("error", d);
                    D2("load", d);
                    break;
                  case "details":
                    D2("toggle", d);
                    break;
                  case "input":
                    Za(d, f);
                    D2("invalid", d);
                    break;
                  case "select":
                    d._wrapperState = { wasMultiple: !!f.multiple };
                    D2("invalid", d);
                    break;
                  case "textarea":
                    hb(d, f), D2("invalid", d);
                }
                ub(c, f);
                e = null;
                for (var g2 in f)
                  if (f.hasOwnProperty(g2)) {
                    var h2 = f[g2];
                    "children" === g2 ? "string" === typeof h2 ? d.textContent !== h2 && (true !== f.suppressHydrationWarning && Af(d.textContent, h2, a), e = ["children", h2]) : "number" === typeof h2 && d.textContent !== "" + h2 && (true !== f.suppressHydrationWarning && Af(d.textContent, h2, a), e = ["children", "" + h2]) : ea.hasOwnProperty(g2) && null != h2 && "onScroll" === g2 && D2("scroll", d);
                  }
                switch (c) {
                  case "input":
                    Va(d);
                    db(d, f, true);
                    break;
                  case "textarea":
                    Va(d);
                    jb(d);
                    break;
                  case "select":
                  case "option":
                    break;
                  default:
                    "function" === typeof f.onClick && (d.onclick = Bf);
                }
                d = e;
                b2.updateQueue = d;
                null !== d && (b2.flags |= 4);
              } else {
                g2 = 9 === e.nodeType ? e : e.ownerDocument;
                "http://www.w3.org/1999/xhtml" === a && (a = kb(c));
                "http://www.w3.org/1999/xhtml" === a ? "script" === c ? (a = g2.createElement("div"), a.innerHTML = "<script></script>", a = a.removeChild(a.firstChild)) : "string" === typeof d.is ? a = g2.createElement(c, { is: d.is }) : (a = g2.createElement(c), "select" === c && (g2 = a, d.multiple ? g2.multiple = true : d.size && (g2.size = d.size))) : a = g2.createElementNS(a, c);
                a[Of] = b2;
                a[Pf] = d;
                Aj(a, b2, false, false);
                b2.stateNode = a;
                a: {
                  g2 = vb(c, d);
                  switch (c) {
                    case "dialog":
                      D2("cancel", a);
                      D2("close", a);
                      e = d;
                      break;
                    case "iframe":
                    case "object":
                    case "embed":
                      D2("load", a);
                      e = d;
                      break;
                    case "video":
                    case "audio":
                      for (e = 0; e < lf.length; e++)
                        D2(lf[e], a);
                      e = d;
                      break;
                    case "source":
                      D2("error", a);
                      e = d;
                      break;
                    case "img":
                    case "image":
                    case "link":
                      D2("error", a);
                      D2("load", a);
                      e = d;
                      break;
                    case "details":
                      D2("toggle", a);
                      e = d;
                      break;
                    case "input":
                      Za(a, d);
                      e = Ya(a, d);
                      D2("invalid", a);
                      break;
                    case "option":
                      e = d;
                      break;
                    case "select":
                      a._wrapperState = { wasMultiple: !!d.multiple };
                      e = A({}, d, { value: void 0 });
                      D2("invalid", a);
                      break;
                    case "textarea":
                      hb(a, d);
                      e = gb(a, d);
                      D2("invalid", a);
                      break;
                    default:
                      e = d;
                  }
                  ub(c, e);
                  h2 = e;
                  for (f in h2)
                    if (h2.hasOwnProperty(f)) {
                      var k2 = h2[f];
                      "style" === f ? sb(a, k2) : "dangerouslySetInnerHTML" === f ? (k2 = k2 ? k2.__html : void 0, null != k2 && nb(a, k2)) : "children" === f ? "string" === typeof k2 ? ("textarea" !== c || "" !== k2) && ob(a, k2) : "number" === typeof k2 && ob(a, "" + k2) : "suppressContentEditableWarning" !== f && "suppressHydrationWarning" !== f && "autoFocus" !== f && (ea.hasOwnProperty(f) ? null != k2 && "onScroll" === f && D2("scroll", a) : null != k2 && ta(a, f, k2, g2));
                    }
                  switch (c) {
                    case "input":
                      Va(a);
                      db(a, d, false);
                      break;
                    case "textarea":
                      Va(a);
                      jb(a);
                      break;
                    case "option":
                      null != d.value && a.setAttribute("value", "" + Sa(d.value));
                      break;
                    case "select":
                      a.multiple = !!d.multiple;
                      f = d.value;
                      null != f ? fb(a, !!d.multiple, f, false) : null != d.defaultValue && fb(a, !!d.multiple, d.defaultValue, true);
                      break;
                    default:
                      "function" === typeof e.onClick && (a.onclick = Bf);
                  }
                  switch (c) {
                    case "button":
                    case "input":
                    case "select":
                    case "textarea":
                      d = !!d.autoFocus;
                      break a;
                    case "img":
                      d = true;
                      break a;
                    default:
                      d = false;
                  }
                }
                d && (b2.flags |= 4);
              }
              null !== b2.ref && (b2.flags |= 512, b2.flags |= 2097152);
            }
            S2(b2);
            return null;
          case 6:
            if (a && null != b2.stateNode)
              Dj(a, b2, a.memoizedProps, d);
            else {
              if ("string" !== typeof d && null === b2.stateNode)
                throw Error(p(166));
              c = Hh(Gh.current);
              Hh(Eh.current);
              if (Gg2(b2)) {
                d = b2.stateNode;
                c = b2.memoizedProps;
                d[Of] = b2;
                if (f = d.nodeValue !== c) {
                  if (a = xg, null !== a)
                    switch (a.tag) {
                      case 3:
                        Af(d.nodeValue, c, 0 !== (a.mode & 1));
                        break;
                      case 5:
                        true !== a.memoizedProps.suppressHydrationWarning && Af(d.nodeValue, c, 0 !== (a.mode & 1));
                    }
                }
                f && (b2.flags |= 4);
              } else
                d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), d[Of] = b2, b2.stateNode = d;
            }
            S2(b2);
            return null;
          case 13:
            E2(M2);
            d = b2.memoizedState;
            if (null === a || null !== a.memoizedState && null !== a.memoizedState.dehydrated) {
              if (I2 && null !== yg && 0 !== (b2.mode & 1) && 0 === (b2.flags & 128))
                Hg(), Ig(), b2.flags |= 98560, f = false;
              else if (f = Gg2(b2), null !== d && null !== d.dehydrated) {
                if (null === a) {
                  if (!f)
                    throw Error(p(318));
                  f = b2.memoizedState;
                  f = null !== f ? f.dehydrated : null;
                  if (!f)
                    throw Error(p(317));
                  f[Of] = b2;
                } else
                  Ig(), 0 === (b2.flags & 128) && (b2.memoizedState = null), b2.flags |= 4;
                S2(b2);
                f = false;
              } else
                null !== zg && (Gj(zg), zg = null), f = true;
              if (!f)
                return b2.flags & 65536 ? b2 : null;
            }
            if (0 !== (b2.flags & 128))
              return b2.lanes = c, b2;
            d = null !== d;
            d !== (null !== a && null !== a.memoizedState) && d && (b2.child.flags |= 8192, 0 !== (b2.mode & 1) && (null === a || 0 !== (M2.current & 1) ? 0 === T2 && (T2 = 3) : uj()));
            null !== b2.updateQueue && (b2.flags |= 4);
            S2(b2);
            return null;
          case 4:
            return Jh(), Bj(a, b2), null === a && sf(b2.stateNode.containerInfo), S2(b2), null;
          case 10:
            return Rg(b2.type._context), S2(b2), null;
          case 17:
            return Zf(b2.type) && $f(), S2(b2), null;
          case 19:
            E2(M2);
            f = b2.memoizedState;
            if (null === f)
              return S2(b2), null;
            d = 0 !== (b2.flags & 128);
            g2 = f.rendering;
            if (null === g2) {
              if (d)
                Ej(f, false);
              else {
                if (0 !== T2 || null !== a && 0 !== (a.flags & 128))
                  for (a = b2.child; null !== a; ) {
                    g2 = Mh(a);
                    if (null !== g2) {
                      b2.flags |= 128;
                      Ej(f, false);
                      d = g2.updateQueue;
                      null !== d && (b2.updateQueue = d, b2.flags |= 4);
                      b2.subtreeFlags = 0;
                      d = c;
                      for (c = b2.child; null !== c; )
                        f = c, a = d, f.flags &= 14680066, g2 = f.alternate, null === g2 ? (f.childLanes = 0, f.lanes = a, f.child = null, f.subtreeFlags = 0, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g2.childLanes, f.lanes = g2.lanes, f.child = g2.child, f.subtreeFlags = 0, f.deletions = null, f.memoizedProps = g2.memoizedProps, f.memoizedState = g2.memoizedState, f.updateQueue = g2.updateQueue, f.type = g2.type, a = g2.dependencies, f.dependencies = null === a ? null : { lanes: a.lanes, firstContext: a.firstContext }), c = c.sibling;
                      G2(M2, M2.current & 1 | 2);
                      return b2.child;
                    }
                    a = a.sibling;
                  }
                null !== f.tail && B2() > Hj && (b2.flags |= 128, d = true, Ej(f, false), b2.lanes = 4194304);
              }
            } else {
              if (!d)
                if (a = Mh(g2), null !== a) {
                  if (b2.flags |= 128, d = true, c = a.updateQueue, null !== c && (b2.updateQueue = c, b2.flags |= 4), Ej(f, true), null === f.tail && "hidden" === f.tailMode && !g2.alternate && !I2)
                    return S2(b2), null;
                } else
                  2 * B2() - f.renderingStartTime > Hj && 1073741824 !== c && (b2.flags |= 128, d = true, Ej(f, false), b2.lanes = 4194304);
              f.isBackwards ? (g2.sibling = b2.child, b2.child = g2) : (c = f.last, null !== c ? c.sibling = g2 : b2.child = g2, f.last = g2);
            }
            if (null !== f.tail)
              return b2 = f.tail, f.rendering = b2, f.tail = b2.sibling, f.renderingStartTime = B2(), b2.sibling = null, c = M2.current, G2(M2, d ? c & 1 | 2 : c & 1), b2;
            S2(b2);
            return null;
          case 22:
          case 23:
            return Ij(), d = null !== b2.memoizedState, null !== a && null !== a.memoizedState !== d && (b2.flags |= 8192), d && 0 !== (b2.mode & 1) ? 0 !== (gj & 1073741824) && (S2(b2), b2.subtreeFlags & 6 && (b2.flags |= 8192)) : S2(b2), null;
          case 24:
            return null;
          case 25:
            return null;
        }
        throw Error(p(156, b2.tag));
      }
      function Jj(a, b2) {
        wg(b2);
        switch (b2.tag) {
          case 1:
            return Zf(b2.type) && $f(), a = b2.flags, a & 65536 ? (b2.flags = a & -65537 | 128, b2) : null;
          case 3:
            return Jh(), E2(Wf), E2(H2), Oh(), a = b2.flags, 0 !== (a & 65536) && 0 === (a & 128) ? (b2.flags = a & -65537 | 128, b2) : null;
          case 5:
            return Lh(b2), null;
          case 13:
            E2(M2);
            a = b2.memoizedState;
            if (null !== a && null !== a.dehydrated) {
              if (null === b2.alternate)
                throw Error(p(340));
              Ig();
            }
            a = b2.flags;
            return a & 65536 ? (b2.flags = a & -65537 | 128, b2) : null;
          case 19:
            return E2(M2), null;
          case 4:
            return Jh(), null;
          case 10:
            return Rg(b2.type._context), null;
          case 22:
          case 23:
            return Ij(), null;
          case 24:
            return null;
          default:
            return null;
        }
      }
      var Kj = false, U2 = false, Lj = "function" === typeof WeakSet ? WeakSet : Set, V2 = null;
      function Mj(a, b2) {
        var c = a.ref;
        if (null !== c)
          if ("function" === typeof c)
            try {
              c(null);
            } catch (d) {
              W2(a, b2, d);
            }
          else
            c.current = null;
      }
      function Nj(a, b2, c) {
        try {
          c();
        } catch (d) {
          W2(a, b2, d);
        }
      }
      var Oj = false;
      function Pj(a, b2) {
        Cf = dd2;
        a = Me2();
        if (Ne2(a)) {
          if ("selectionStart" in a)
            var c = { start: a.selectionStart, end: a.selectionEnd };
          else
            a: {
              c = (c = a.ownerDocument) && c.defaultView || window;
              var d = c.getSelection && c.getSelection();
              if (d && 0 !== d.rangeCount) {
                c = d.anchorNode;
                var e = d.anchorOffset, f = d.focusNode;
                d = d.focusOffset;
                try {
                  c.nodeType, f.nodeType;
                } catch (F2) {
                  c = null;
                  break a;
                }
                var g2 = 0, h2 = -1, k2 = -1, l2 = 0, m2 = 0, q2 = a, r = null;
                b:
                  for (; ; ) {
                    for (var y2; ; ) {
                      q2 !== c || 0 !== e && 3 !== q2.nodeType || (h2 = g2 + e);
                      q2 !== f || 0 !== d && 3 !== q2.nodeType || (k2 = g2 + d);
                      3 === q2.nodeType && (g2 += q2.nodeValue.length);
                      if (null === (y2 = q2.firstChild))
                        break;
                      r = q2;
                      q2 = y2;
                    }
                    for (; ; ) {
                      if (q2 === a)
                        break b;
                      r === c && ++l2 === e && (h2 = g2);
                      r === f && ++m2 === d && (k2 = g2);
                      if (null !== (y2 = q2.nextSibling))
                        break;
                      q2 = r;
                      r = q2.parentNode;
                    }
                    q2 = y2;
                  }
                c = -1 === h2 || -1 === k2 ? null : { start: h2, end: k2 };
              } else
                c = null;
            }
          c = c || { start: 0, end: 0 };
        } else
          c = null;
        Df = { focusedElem: a, selectionRange: c };
        dd2 = false;
        for (V2 = b2; null !== V2; )
          if (b2 = V2, a = b2.child, 0 !== (b2.subtreeFlags & 1028) && null !== a)
            a.return = b2, V2 = a;
          else
            for (; null !== V2; ) {
              b2 = V2;
              try {
                var n = b2.alternate;
                if (0 !== (b2.flags & 1024))
                  switch (b2.tag) {
                    case 0:
                    case 11:
                    case 15:
                      break;
                    case 1:
                      if (null !== n) {
                        var t = n.memoizedProps, J2 = n.memoizedState, x2 = b2.stateNode, w2 = x2.getSnapshotBeforeUpdate(b2.elementType === b2.type ? t : Lg(b2.type, t), J2);
                        x2.__reactInternalSnapshotBeforeUpdate = w2;
                      }
                      break;
                    case 3:
                      var u = b2.stateNode.containerInfo;
                      1 === u.nodeType ? u.textContent = "" : 9 === u.nodeType && u.documentElement && u.removeChild(u.documentElement);
                      break;
                    case 5:
                    case 6:
                    case 4:
                    case 17:
                      break;
                    default:
                      throw Error(p(163));
                  }
              } catch (F2) {
                W2(b2, b2.return, F2);
              }
              a = b2.sibling;
              if (null !== a) {
                a.return = b2.return;
                V2 = a;
                break;
              }
              V2 = b2.return;
            }
        n = Oj;
        Oj = false;
        return n;
      }
      function Qj(a, b2, c) {
        var d = b2.updateQueue;
        d = null !== d ? d.lastEffect : null;
        if (null !== d) {
          var e = d = d.next;
          do {
            if ((e.tag & a) === a) {
              var f = e.destroy;
              e.destroy = void 0;
              void 0 !== f && Nj(b2, c, f);
            }
            e = e.next;
          } while (e !== d);
        }
      }
      function Rj(a, b2) {
        b2 = b2.updateQueue;
        b2 = null !== b2 ? b2.lastEffect : null;
        if (null !== b2) {
          var c = b2 = b2.next;
          do {
            if ((c.tag & a) === a) {
              var d = c.create;
              c.destroy = d();
            }
            c = c.next;
          } while (c !== b2);
        }
      }
      function Sj(a) {
        var b2 = a.ref;
        if (null !== b2) {
          var c = a.stateNode;
          switch (a.tag) {
            case 5:
              a = c;
              break;
            default:
              a = c;
          }
          "function" === typeof b2 ? b2(a) : b2.current = a;
        }
      }
      function Tj(a) {
        var b2 = a.alternate;
        null !== b2 && (a.alternate = null, Tj(b2));
        a.child = null;
        a.deletions = null;
        a.sibling = null;
        5 === a.tag && (b2 = a.stateNode, null !== b2 && (delete b2[Of], delete b2[Pf], delete b2[of], delete b2[Qf], delete b2[Rf]));
        a.stateNode = null;
        a.return = null;
        a.dependencies = null;
        a.memoizedProps = null;
        a.memoizedState = null;
        a.pendingProps = null;
        a.stateNode = null;
        a.updateQueue = null;
      }
      function Uj(a) {
        return 5 === a.tag || 3 === a.tag || 4 === a.tag;
      }
      function Vj(a) {
        a:
          for (; ; ) {
            for (; null === a.sibling; ) {
              if (null === a.return || Uj(a.return))
                return null;
              a = a.return;
            }
            a.sibling.return = a.return;
            for (a = a.sibling; 5 !== a.tag && 6 !== a.tag && 18 !== a.tag; ) {
              if (a.flags & 2)
                continue a;
              if (null === a.child || 4 === a.tag)
                continue a;
              else
                a.child.return = a, a = a.child;
            }
            if (!(a.flags & 2))
              return a.stateNode;
          }
      }
      function Wj(a, b2, c) {
        var d = a.tag;
        if (5 === d || 6 === d)
          a = a.stateNode, b2 ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b2) : c.insertBefore(a, b2) : (8 === c.nodeType ? (b2 = c.parentNode, b2.insertBefore(a, c)) : (b2 = c, b2.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b2.onclick || (b2.onclick = Bf));
        else if (4 !== d && (a = a.child, null !== a))
          for (Wj(a, b2, c), a = a.sibling; null !== a; )
            Wj(a, b2, c), a = a.sibling;
      }
      function Xj(a, b2, c) {
        var d = a.tag;
        if (5 === d || 6 === d)
          a = a.stateNode, b2 ? c.insertBefore(a, b2) : c.appendChild(a);
        else if (4 !== d && (a = a.child, null !== a))
          for (Xj(a, b2, c), a = a.sibling; null !== a; )
            Xj(a, b2, c), a = a.sibling;
      }
      var X2 = null, Yj = false;
      function Zj(a, b2, c) {
        for (c = c.child; null !== c; )
          ak(a, b2, c), c = c.sibling;
      }
      function ak(a, b2, c) {
        if (lc && "function" === typeof lc.onCommitFiberUnmount)
          try {
            lc.onCommitFiberUnmount(kc, c);
          } catch (h2) {
          }
        switch (c.tag) {
          case 5:
            U2 || Mj(c, b2);
          case 6:
            var d = X2, e = Yj;
            X2 = null;
            Zj(a, b2, c);
            X2 = d;
            Yj = e;
            null !== X2 && (Yj ? (a = X2, c = c.stateNode, 8 === a.nodeType ? a.parentNode.removeChild(c) : a.removeChild(c)) : X2.removeChild(c.stateNode));
            break;
          case 18:
            null !== X2 && (Yj ? (a = X2, c = c.stateNode, 8 === a.nodeType ? Kf(a.parentNode, c) : 1 === a.nodeType && Kf(a, c), bd(a)) : Kf(X2, c.stateNode));
            break;
          case 4:
            d = X2;
            e = Yj;
            X2 = c.stateNode.containerInfo;
            Yj = true;
            Zj(a, b2, c);
            X2 = d;
            Yj = e;
            break;
          case 0:
          case 11:
          case 14:
          case 15:
            if (!U2 && (d = c.updateQueue, null !== d && (d = d.lastEffect, null !== d))) {
              e = d = d.next;
              do {
                var f = e, g2 = f.destroy;
                f = f.tag;
                void 0 !== g2 && (0 !== (f & 2) ? Nj(c, b2, g2) : 0 !== (f & 4) && Nj(c, b2, g2));
                e = e.next;
              } while (e !== d);
            }
            Zj(a, b2, c);
            break;
          case 1:
            if (!U2 && (Mj(c, b2), d = c.stateNode, "function" === typeof d.componentWillUnmount))
              try {
                d.props = c.memoizedProps, d.state = c.memoizedState, d.componentWillUnmount();
              } catch (h2) {
                W2(c, b2, h2);
              }
            Zj(a, b2, c);
            break;
          case 21:
            Zj(a, b2, c);
            break;
          case 22:
            c.mode & 1 ? (U2 = (d = U2) || null !== c.memoizedState, Zj(a, b2, c), U2 = d) : Zj(a, b2, c);
            break;
          default:
            Zj(a, b2, c);
        }
      }
      function bk(a) {
        var b2 = a.updateQueue;
        if (null !== b2) {
          a.updateQueue = null;
          var c = a.stateNode;
          null === c && (c = a.stateNode = new Lj());
          b2.forEach(function(b3) {
            var d = ck.bind(null, a, b3);
            c.has(b3) || (c.add(b3), b3.then(d, d));
          });
        }
      }
      function dk(a, b2) {
        var c = b2.deletions;
        if (null !== c)
          for (var d = 0; d < c.length; d++) {
            var e = c[d];
            try {
              var f = a, g2 = b2, h2 = g2;
              a:
                for (; null !== h2; ) {
                  switch (h2.tag) {
                    case 5:
                      X2 = h2.stateNode;
                      Yj = false;
                      break a;
                    case 3:
                      X2 = h2.stateNode.containerInfo;
                      Yj = true;
                      break a;
                    case 4:
                      X2 = h2.stateNode.containerInfo;
                      Yj = true;
                      break a;
                  }
                  h2 = h2.return;
                }
              if (null === X2)
                throw Error(p(160));
              ak(f, g2, e);
              X2 = null;
              Yj = false;
              var k2 = e.alternate;
              null !== k2 && (k2.return = null);
              e.return = null;
            } catch (l2) {
              W2(e, b2, l2);
            }
          }
        if (b2.subtreeFlags & 12854)
          for (b2 = b2.child; null !== b2; )
            ek(b2, a), b2 = b2.sibling;
      }
      function ek(a, b2) {
        var c = a.alternate, d = a.flags;
        switch (a.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            dk(b2, a);
            fk(a);
            if (d & 4) {
              try {
                Qj(3, a, a.return), Rj(3, a);
              } catch (t) {
                W2(a, a.return, t);
              }
              try {
                Qj(5, a, a.return);
              } catch (t) {
                W2(a, a.return, t);
              }
            }
            break;
          case 1:
            dk(b2, a);
            fk(a);
            d & 512 && null !== c && Mj(c, c.return);
            break;
          case 5:
            dk(b2, a);
            fk(a);
            d & 512 && null !== c && Mj(c, c.return);
            if (a.flags & 32) {
              var e = a.stateNode;
              try {
                ob(e, "");
              } catch (t) {
                W2(a, a.return, t);
              }
            }
            if (d & 4 && (e = a.stateNode, null != e)) {
              var f = a.memoizedProps, g2 = null !== c ? c.memoizedProps : f, h2 = a.type, k2 = a.updateQueue;
              a.updateQueue = null;
              if (null !== k2)
                try {
                  "input" === h2 && "radio" === f.type && null != f.name && ab(e, f);
                  vb(h2, g2);
                  var l2 = vb(h2, f);
                  for (g2 = 0; g2 < k2.length; g2 += 2) {
                    var m2 = k2[g2], q2 = k2[g2 + 1];
                    "style" === m2 ? sb(e, q2) : "dangerouslySetInnerHTML" === m2 ? nb(e, q2) : "children" === m2 ? ob(e, q2) : ta(e, m2, q2, l2);
                  }
                  switch (h2) {
                    case "input":
                      bb(e, f);
                      break;
                    case "textarea":
                      ib(e, f);
                      break;
                    case "select":
                      var r = e._wrapperState.wasMultiple;
                      e._wrapperState.wasMultiple = !!f.multiple;
                      var y2 = f.value;
                      null != y2 ? fb(e, !!f.multiple, y2, false) : r !== !!f.multiple && (null != f.defaultValue ? fb(e, !!f.multiple, f.defaultValue, true) : fb(e, !!f.multiple, f.multiple ? [] : "", false));
                  }
                  e[Pf] = f;
                } catch (t) {
                  W2(a, a.return, t);
                }
            }
            break;
          case 6:
            dk(b2, a);
            fk(a);
            if (d & 4) {
              if (null === a.stateNode)
                throw Error(p(162));
              e = a.stateNode;
              f = a.memoizedProps;
              try {
                e.nodeValue = f;
              } catch (t) {
                W2(a, a.return, t);
              }
            }
            break;
          case 3:
            dk(b2, a);
            fk(a);
            if (d & 4 && null !== c && c.memoizedState.isDehydrated)
              try {
                bd(b2.containerInfo);
              } catch (t) {
                W2(a, a.return, t);
              }
            break;
          case 4:
            dk(b2, a);
            fk(a);
            break;
          case 13:
            dk(b2, a);
            fk(a);
            e = a.child;
            e.flags & 8192 && (f = null !== e.memoizedState, e.stateNode.isHidden = f, !f || null !== e.alternate && null !== e.alternate.memoizedState || (gk = B2()));
            d & 4 && bk(a);
            break;
          case 22:
            m2 = null !== c && null !== c.memoizedState;
            a.mode & 1 ? (U2 = (l2 = U2) || m2, dk(b2, a), U2 = l2) : dk(b2, a);
            fk(a);
            if (d & 8192) {
              l2 = null !== a.memoizedState;
              if ((a.stateNode.isHidden = l2) && !m2 && 0 !== (a.mode & 1))
                for (V2 = a, m2 = a.child; null !== m2; ) {
                  for (q2 = V2 = m2; null !== V2; ) {
                    r = V2;
                    y2 = r.child;
                    switch (r.tag) {
                      case 0:
                      case 11:
                      case 14:
                      case 15:
                        Qj(4, r, r.return);
                        break;
                      case 1:
                        Mj(r, r.return);
                        var n = r.stateNode;
                        if ("function" === typeof n.componentWillUnmount) {
                          d = r;
                          c = r.return;
                          try {
                            b2 = d, n.props = b2.memoizedProps, n.state = b2.memoizedState, n.componentWillUnmount();
                          } catch (t) {
                            W2(d, c, t);
                          }
                        }
                        break;
                      case 5:
                        Mj(r, r.return);
                        break;
                      case 22:
                        if (null !== r.memoizedState) {
                          hk(q2);
                          continue;
                        }
                    }
                    null !== y2 ? (y2.return = r, V2 = y2) : hk(q2);
                  }
                  m2 = m2.sibling;
                }
              a:
                for (m2 = null, q2 = a; ; ) {
                  if (5 === q2.tag) {
                    if (null === m2) {
                      m2 = q2;
                      try {
                        e = q2.stateNode, l2 ? (f = e.style, "function" === typeof f.setProperty ? f.setProperty("display", "none", "important") : f.display = "none") : (h2 = q2.stateNode, k2 = q2.memoizedProps.style, g2 = void 0 !== k2 && null !== k2 && k2.hasOwnProperty("display") ? k2.display : null, h2.style.display = rb("display", g2));
                      } catch (t) {
                        W2(a, a.return, t);
                      }
                    }
                  } else if (6 === q2.tag) {
                    if (null === m2)
                      try {
                        q2.stateNode.nodeValue = l2 ? "" : q2.memoizedProps;
                      } catch (t) {
                        W2(a, a.return, t);
                      }
                  } else if ((22 !== q2.tag && 23 !== q2.tag || null === q2.memoizedState || q2 === a) && null !== q2.child) {
                    q2.child.return = q2;
                    q2 = q2.child;
                    continue;
                  }
                  if (q2 === a)
                    break a;
                  for (; null === q2.sibling; ) {
                    if (null === q2.return || q2.return === a)
                      break a;
                    m2 === q2 && (m2 = null);
                    q2 = q2.return;
                  }
                  m2 === q2 && (m2 = null);
                  q2.sibling.return = q2.return;
                  q2 = q2.sibling;
                }
            }
            break;
          case 19:
            dk(b2, a);
            fk(a);
            d & 4 && bk(a);
            break;
          case 21:
            break;
          default:
            dk(b2, a), fk(a);
        }
      }
      function fk(a) {
        var b2 = a.flags;
        if (b2 & 2) {
          try {
            a: {
              for (var c = a.return; null !== c; ) {
                if (Uj(c)) {
                  var d = c;
                  break a;
                }
                c = c.return;
              }
              throw Error(p(160));
            }
            switch (d.tag) {
              case 5:
                var e = d.stateNode;
                d.flags & 32 && (ob(e, ""), d.flags &= -33);
                var f = Vj(a);
                Xj(a, f, e);
                break;
              case 3:
              case 4:
                var g2 = d.stateNode.containerInfo, h2 = Vj(a);
                Wj(a, h2, g2);
                break;
              default:
                throw Error(p(161));
            }
          } catch (k2) {
            W2(a, a.return, k2);
          }
          a.flags &= -3;
        }
        b2 & 4096 && (a.flags &= -4097);
      }
      function ik(a, b2, c) {
        V2 = a;
        jk(a);
      }
      function jk(a, b2, c) {
        for (var d = 0 !== (a.mode & 1); null !== V2; ) {
          var e = V2, f = e.child;
          if (22 === e.tag && d) {
            var g2 = null !== e.memoizedState || Kj;
            if (!g2) {
              var h2 = e.alternate, k2 = null !== h2 && null !== h2.memoizedState || U2;
              h2 = Kj;
              var l2 = U2;
              Kj = g2;
              if ((U2 = k2) && !l2)
                for (V2 = e; null !== V2; )
                  g2 = V2, k2 = g2.child, 22 === g2.tag && null !== g2.memoizedState ? kk(e) : null !== k2 ? (k2.return = g2, V2 = k2) : kk(e);
              for (; null !== f; )
                V2 = f, jk(f), f = f.sibling;
              V2 = e;
              Kj = h2;
              U2 = l2;
            }
            lk(a);
          } else
            0 !== (e.subtreeFlags & 8772) && null !== f ? (f.return = e, V2 = f) : lk(a);
        }
      }
      function lk(a) {
        for (; null !== V2; ) {
          var b2 = V2;
          if (0 !== (b2.flags & 8772)) {
            var c = b2.alternate;
            try {
              if (0 !== (b2.flags & 8772))
                switch (b2.tag) {
                  case 0:
                  case 11:
                  case 15:
                    U2 || Rj(5, b2);
                    break;
                  case 1:
                    var d = b2.stateNode;
                    if (b2.flags & 4 && !U2)
                      if (null === c)
                        d.componentDidMount();
                      else {
                        var e = b2.elementType === b2.type ? c.memoizedProps : Lg(b2.type, c.memoizedProps);
                        d.componentDidUpdate(e, c.memoizedState, d.__reactInternalSnapshotBeforeUpdate);
                      }
                    var f = b2.updateQueue;
                    null !== f && ih(b2, f, d);
                    break;
                  case 3:
                    var g2 = b2.updateQueue;
                    if (null !== g2) {
                      c = null;
                      if (null !== b2.child)
                        switch (b2.child.tag) {
                          case 5:
                            c = b2.child.stateNode;
                            break;
                          case 1:
                            c = b2.child.stateNode;
                        }
                      ih(b2, g2, c);
                    }
                    break;
                  case 5:
                    var h2 = b2.stateNode;
                    if (null === c && b2.flags & 4) {
                      c = h2;
                      var k2 = b2.memoizedProps;
                      switch (b2.type) {
                        case "button":
                        case "input":
                        case "select":
                        case "textarea":
                          k2.autoFocus && c.focus();
                          break;
                        case "img":
                          k2.src && (c.src = k2.src);
                      }
                    }
                    break;
                  case 6:
                    break;
                  case 4:
                    break;
                  case 12:
                    break;
                  case 13:
                    if (null === b2.memoizedState) {
                      var l2 = b2.alternate;
                      if (null !== l2) {
                        var m2 = l2.memoizedState;
                        if (null !== m2) {
                          var q2 = m2.dehydrated;
                          null !== q2 && bd(q2);
                        }
                      }
                    }
                    break;
                  case 19:
                  case 17:
                  case 21:
                  case 22:
                  case 23:
                  case 25:
                    break;
                  default:
                    throw Error(p(163));
                }
              U2 || b2.flags & 512 && Sj(b2);
            } catch (r) {
              W2(b2, b2.return, r);
            }
          }
          if (b2 === a) {
            V2 = null;
            break;
          }
          c = b2.sibling;
          if (null !== c) {
            c.return = b2.return;
            V2 = c;
            break;
          }
          V2 = b2.return;
        }
      }
      function hk(a) {
        for (; null !== V2; ) {
          var b2 = V2;
          if (b2 === a) {
            V2 = null;
            break;
          }
          var c = b2.sibling;
          if (null !== c) {
            c.return = b2.return;
            V2 = c;
            break;
          }
          V2 = b2.return;
        }
      }
      function kk(a) {
        for (; null !== V2; ) {
          var b2 = V2;
          try {
            switch (b2.tag) {
              case 0:
              case 11:
              case 15:
                var c = b2.return;
                try {
                  Rj(4, b2);
                } catch (k2) {
                  W2(b2, c, k2);
                }
                break;
              case 1:
                var d = b2.stateNode;
                if ("function" === typeof d.componentDidMount) {
                  var e = b2.return;
                  try {
                    d.componentDidMount();
                  } catch (k2) {
                    W2(b2, e, k2);
                  }
                }
                var f = b2.return;
                try {
                  Sj(b2);
                } catch (k2) {
                  W2(b2, f, k2);
                }
                break;
              case 5:
                var g2 = b2.return;
                try {
                  Sj(b2);
                } catch (k2) {
                  W2(b2, g2, k2);
                }
            }
          } catch (k2) {
            W2(b2, b2.return, k2);
          }
          if (b2 === a) {
            V2 = null;
            break;
          }
          var h2 = b2.sibling;
          if (null !== h2) {
            h2.return = b2.return;
            V2 = h2;
            break;
          }
          V2 = b2.return;
        }
      }
      var mk = Math.ceil, nk = ua.ReactCurrentDispatcher, ok2 = ua.ReactCurrentOwner, pk = ua.ReactCurrentBatchConfig, K2 = 0, R2 = null, Y2 = null, Z2 = 0, gj = 0, fj = Uf(0), T2 = 0, qk = null, hh = 0, rk = 0, sk = 0, tk = null, uk = null, gk = 0, Hj = Infinity, vk = null, Pi2 = false, Qi = null, Si = null, wk = false, xk = null, yk = 0, zk = 0, Ak = null, Bk = -1, Ck = 0;
      function L2() {
        return 0 !== (K2 & 6) ? B2() : -1 !== Bk ? Bk : Bk = B2();
      }
      function lh(a) {
        if (0 === (a.mode & 1))
          return 1;
        if (0 !== (K2 & 2) && 0 !== Z2)
          return Z2 & -Z2;
        if (null !== Kg.transition)
          return 0 === Ck && (Ck = yc()), Ck;
        a = C2;
        if (0 !== a)
          return a;
        a = window.event;
        a = void 0 === a ? 16 : jd(a.type);
        return a;
      }
      function mh(a, b2, c, d) {
        if (50 < zk)
          throw zk = 0, Ak = null, Error(p(185));
        Ac(a, c, d);
        if (0 === (K2 & 2) || a !== R2)
          a === R2 && (0 === (K2 & 2) && (rk |= c), 4 === T2 && Dk(a, Z2)), Ek(a, d), 1 === c && 0 === K2 && 0 === (b2.mode & 1) && (Hj = B2() + 500, fg && jg());
      }
      function Ek(a, b2) {
        var c = a.callbackNode;
        wc(a, b2);
        var d = uc(a, a === R2 ? Z2 : 0);
        if (0 === d)
          null !== c && bc(c), a.callbackNode = null, a.callbackPriority = 0;
        else if (b2 = d & -d, a.callbackPriority !== b2) {
          null != c && bc(c);
          if (1 === b2)
            0 === a.tag ? ig(Fk.bind(null, a)) : hg(Fk.bind(null, a)), Jf(function() {
              0 === (K2 & 6) && jg();
            }), c = null;
          else {
            switch (Dc(d)) {
              case 1:
                c = fc;
                break;
              case 4:
                c = gc;
                break;
              case 16:
                c = hc;
                break;
              case 536870912:
                c = jc;
                break;
              default:
                c = hc;
            }
            c = Gk(c, Hk.bind(null, a));
          }
          a.callbackPriority = b2;
          a.callbackNode = c;
        }
      }
      function Hk(a, b2) {
        Bk = -1;
        Ck = 0;
        if (0 !== (K2 & 6))
          throw Error(p(327));
        var c = a.callbackNode;
        if (Ik() && a.callbackNode !== c)
          return null;
        var d = uc(a, a === R2 ? Z2 : 0);
        if (0 === d)
          return null;
        if (0 !== (d & 30) || 0 !== (d & a.expiredLanes) || b2)
          b2 = Jk(a, d);
        else {
          b2 = d;
          var e = K2;
          K2 |= 2;
          var f = Kk();
          if (R2 !== a || Z2 !== b2)
            vk = null, Hj = B2() + 500, Lk(a, b2);
          do
            try {
              Mk();
              break;
            } catch (h2) {
              Nk(a, h2);
            }
          while (1);
          Qg();
          nk.current = f;
          K2 = e;
          null !== Y2 ? b2 = 0 : (R2 = null, Z2 = 0, b2 = T2);
        }
        if (0 !== b2) {
          2 === b2 && (e = xc(a), 0 !== e && (d = e, b2 = Ok(a, e)));
          if (1 === b2)
            throw c = qk, Lk(a, 0), Dk(a, d), Ek(a, B2()), c;
          if (6 === b2)
            Dk(a, d);
          else {
            e = a.current.alternate;
            if (0 === (d & 30) && !Pk(e) && (b2 = Jk(a, d), 2 === b2 && (f = xc(a), 0 !== f && (d = f, b2 = Ok(a, f))), 1 === b2))
              throw c = qk, Lk(a, 0), Dk(a, d), Ek(a, B2()), c;
            a.finishedWork = e;
            a.finishedLanes = d;
            switch (b2) {
              case 0:
              case 1:
                throw Error(p(345));
              case 2:
                Qk(a, uk, vk);
                break;
              case 3:
                Dk(a, d);
                if ((d & 130023424) === d && (b2 = gk + 500 - B2(), 10 < b2)) {
                  if (0 !== uc(a, 0))
                    break;
                  e = a.suspendedLanes;
                  if ((e & d) !== d) {
                    L2();
                    a.pingedLanes |= a.suspendedLanes & e;
                    break;
                  }
                  a.timeoutHandle = Ff(Qk.bind(null, a, uk, vk), b2);
                  break;
                }
                Qk(a, uk, vk);
                break;
              case 4:
                Dk(a, d);
                if ((d & 4194240) === d)
                  break;
                b2 = a.eventTimes;
                for (e = -1; 0 < d; ) {
                  var g2 = 31 - oc(d);
                  f = 1 << g2;
                  g2 = b2[g2];
                  g2 > e && (e = g2);
                  d &= ~f;
                }
                d = e;
                d = B2() - d;
                d = (120 > d ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3e3 > d ? 3e3 : 4320 > d ? 4320 : 1960 * mk(d / 1960)) - d;
                if (10 < d) {
                  a.timeoutHandle = Ff(Qk.bind(null, a, uk, vk), d);
                  break;
                }
                Qk(a, uk, vk);
                break;
              case 5:
                Qk(a, uk, vk);
                break;
              default:
                throw Error(p(329));
            }
          }
        }
        Ek(a, B2());
        return a.callbackNode === c ? Hk.bind(null, a) : null;
      }
      function Ok(a, b2) {
        var c = tk;
        a.current.memoizedState.isDehydrated && (Lk(a, b2).flags |= 256);
        a = Jk(a, b2);
        2 !== a && (b2 = uk, uk = c, null !== b2 && Gj(b2));
        return a;
      }
      function Gj(a) {
        null === uk ? uk = a : uk.push.apply(uk, a);
      }
      function Pk(a) {
        for (var b2 = a; ; ) {
          if (b2.flags & 16384) {
            var c = b2.updateQueue;
            if (null !== c && (c = c.stores, null !== c))
              for (var d = 0; d < c.length; d++) {
                var e = c[d], f = e.getSnapshot;
                e = e.value;
                try {
                  if (!He2(f(), e))
                    return false;
                } catch (g2) {
                  return false;
                }
              }
          }
          c = b2.child;
          if (b2.subtreeFlags & 16384 && null !== c)
            c.return = b2, b2 = c;
          else {
            if (b2 === a)
              break;
            for (; null === b2.sibling; ) {
              if (null === b2.return || b2.return === a)
                return true;
              b2 = b2.return;
            }
            b2.sibling.return = b2.return;
            b2 = b2.sibling;
          }
        }
        return true;
      }
      function Dk(a, b2) {
        b2 &= ~sk;
        b2 &= ~rk;
        a.suspendedLanes |= b2;
        a.pingedLanes &= ~b2;
        for (a = a.expirationTimes; 0 < b2; ) {
          var c = 31 - oc(b2), d = 1 << c;
          a[c] = -1;
          b2 &= ~d;
        }
      }
      function Fk(a) {
        if (0 !== (K2 & 6))
          throw Error(p(327));
        Ik();
        var b2 = uc(a, 0);
        if (0 === (b2 & 1))
          return Ek(a, B2()), null;
        var c = Jk(a, b2);
        if (0 !== a.tag && 2 === c) {
          var d = xc(a);
          0 !== d && (b2 = d, c = Ok(a, d));
        }
        if (1 === c)
          throw c = qk, Lk(a, 0), Dk(a, b2), Ek(a, B2()), c;
        if (6 === c)
          throw Error(p(345));
        a.finishedWork = a.current.alternate;
        a.finishedLanes = b2;
        Qk(a, uk, vk);
        Ek(a, B2());
        return null;
      }
      function Rk(a, b2) {
        var c = K2;
        K2 |= 1;
        try {
          return a(b2);
        } finally {
          K2 = c, 0 === K2 && (Hj = B2() + 500, fg && jg());
        }
      }
      function Sk(a) {
        null !== xk && 0 === xk.tag && 0 === (K2 & 6) && Ik();
        var b2 = K2;
        K2 |= 1;
        var c = pk.transition, d = C2;
        try {
          if (pk.transition = null, C2 = 1, a)
            return a();
        } finally {
          C2 = d, pk.transition = c, K2 = b2, 0 === (K2 & 6) && jg();
        }
      }
      function Ij() {
        gj = fj.current;
        E2(fj);
      }
      function Lk(a, b2) {
        a.finishedWork = null;
        a.finishedLanes = 0;
        var c = a.timeoutHandle;
        -1 !== c && (a.timeoutHandle = -1, Gf(c));
        if (null !== Y2)
          for (c = Y2.return; null !== c; ) {
            var d = c;
            wg(d);
            switch (d.tag) {
              case 1:
                d = d.type.childContextTypes;
                null !== d && void 0 !== d && $f();
                break;
              case 3:
                Jh();
                E2(Wf);
                E2(H2);
                Oh();
                break;
              case 5:
                Lh(d);
                break;
              case 4:
                Jh();
                break;
              case 13:
                E2(M2);
                break;
              case 19:
                E2(M2);
                break;
              case 10:
                Rg(d.type._context);
                break;
              case 22:
              case 23:
                Ij();
            }
            c = c.return;
          }
        R2 = a;
        Y2 = a = wh(a.current, null);
        Z2 = gj = b2;
        T2 = 0;
        qk = null;
        sk = rk = hh = 0;
        uk = tk = null;
        if (null !== Wg) {
          for (b2 = 0; b2 < Wg.length; b2++)
            if (c = Wg[b2], d = c.interleaved, null !== d) {
              c.interleaved = null;
              var e = d.next, f = c.pending;
              if (null !== f) {
                var g2 = f.next;
                f.next = e;
                d.next = g2;
              }
              c.pending = d;
            }
          Wg = null;
        }
        return a;
      }
      function Nk(a, b2) {
        do {
          var c = Y2;
          try {
            Qg();
            Ph.current = ai;
            if (Sh) {
              for (var d = N2.memoizedState; null !== d; ) {
                var e = d.queue;
                null !== e && (e.pending = null);
                d = d.next;
              }
              Sh = false;
            }
            Rh = 0;
            P2 = O2 = N2 = null;
            Th = false;
            Uh = 0;
            ok2.current = null;
            if (null === c || null === c.return) {
              T2 = 1;
              qk = b2;
              Y2 = null;
              break;
            }
            a: {
              var f = a, g2 = c.return, h2 = c, k2 = b2;
              b2 = Z2;
              h2.flags |= 32768;
              if (null !== k2 && "object" === typeof k2 && "function" === typeof k2.then) {
                var l2 = k2, m2 = h2, q2 = m2.tag;
                if (0 === (m2.mode & 1) && (0 === q2 || 11 === q2 || 15 === q2)) {
                  var r = m2.alternate;
                  r ? (m2.updateQueue = r.updateQueue, m2.memoizedState = r.memoizedState, m2.lanes = r.lanes) : (m2.updateQueue = null, m2.memoizedState = null);
                }
                var y2 = Vi(g2);
                if (null !== y2) {
                  y2.flags &= -257;
                  Wi(y2, g2, h2, f, b2);
                  y2.mode & 1 && Ti(f, l2, b2);
                  b2 = y2;
                  k2 = l2;
                  var n = b2.updateQueue;
                  if (null === n) {
                    var t = /* @__PURE__ */ new Set();
                    t.add(k2);
                    b2.updateQueue = t;
                  } else
                    n.add(k2);
                  break a;
                } else {
                  if (0 === (b2 & 1)) {
                    Ti(f, l2, b2);
                    uj();
                    break a;
                  }
                  k2 = Error(p(426));
                }
              } else if (I2 && h2.mode & 1) {
                var J2 = Vi(g2);
                if (null !== J2) {
                  0 === (J2.flags & 65536) && (J2.flags |= 256);
                  Wi(J2, g2, h2, f, b2);
                  Jg(Ki(k2, h2));
                  break a;
                }
              }
              f = k2 = Ki(k2, h2);
              4 !== T2 && (T2 = 2);
              null === tk ? tk = [f] : tk.push(f);
              f = g2;
              do {
                switch (f.tag) {
                  case 3:
                    f.flags |= 65536;
                    b2 &= -b2;
                    f.lanes |= b2;
                    var x2 = Oi(f, k2, b2);
                    fh(f, x2);
                    break a;
                  case 1:
                    h2 = k2;
                    var w2 = f.type, u = f.stateNode;
                    if (0 === (f.flags & 128) && ("function" === typeof w2.getDerivedStateFromError || null !== u && "function" === typeof u.componentDidCatch && (null === Si || !Si.has(u)))) {
                      f.flags |= 65536;
                      b2 &= -b2;
                      f.lanes |= b2;
                      var F2 = Ri(f, h2, b2);
                      fh(f, F2);
                      break a;
                    }
                }
                f = f.return;
              } while (null !== f);
            }
            Tk(c);
          } catch (na) {
            b2 = na;
            Y2 === c && null !== c && (Y2 = c = c.return);
            continue;
          }
          break;
        } while (1);
      }
      function Kk() {
        var a = nk.current;
        nk.current = ai;
        return null === a ? ai : a;
      }
      function uj() {
        if (0 === T2 || 3 === T2 || 2 === T2)
          T2 = 4;
        null === R2 || 0 === (hh & 268435455) && 0 === (rk & 268435455) || Dk(R2, Z2);
      }
      function Jk(a, b2) {
        var c = K2;
        K2 |= 2;
        var d = Kk();
        if (R2 !== a || Z2 !== b2)
          vk = null, Lk(a, b2);
        do
          try {
            Uk();
            break;
          } catch (e) {
            Nk(a, e);
          }
        while (1);
        Qg();
        K2 = c;
        nk.current = d;
        if (null !== Y2)
          throw Error(p(261));
        R2 = null;
        Z2 = 0;
        return T2;
      }
      function Uk() {
        for (; null !== Y2; )
          Vk(Y2);
      }
      function Mk() {
        for (; null !== Y2 && !cc(); )
          Vk(Y2);
      }
      function Vk(a) {
        var b2 = Wk(a.alternate, a, gj);
        a.memoizedProps = a.pendingProps;
        null === b2 ? Tk(a) : Y2 = b2;
        ok2.current = null;
      }
      function Tk(a) {
        var b2 = a;
        do {
          var c = b2.alternate;
          a = b2.return;
          if (0 === (b2.flags & 32768)) {
            if (c = Fj(c, b2, gj), null !== c) {
              Y2 = c;
              return;
            }
          } else {
            c = Jj(c, b2);
            if (null !== c) {
              c.flags &= 32767;
              Y2 = c;
              return;
            }
            if (null !== a)
              a.flags |= 32768, a.subtreeFlags = 0, a.deletions = null;
            else {
              T2 = 6;
              Y2 = null;
              return;
            }
          }
          b2 = b2.sibling;
          if (null !== b2) {
            Y2 = b2;
            return;
          }
          Y2 = b2 = a;
        } while (null !== b2);
        0 === T2 && (T2 = 5);
      }
      function Qk(a, b2, c) {
        var d = C2, e = pk.transition;
        try {
          pk.transition = null, C2 = 1, Xk(a, b2, c, d);
        } finally {
          pk.transition = e, C2 = d;
        }
        return null;
      }
      function Xk(a, b2, c, d) {
        do
          Ik();
        while (null !== xk);
        if (0 !== (K2 & 6))
          throw Error(p(327));
        c = a.finishedWork;
        var e = a.finishedLanes;
        if (null === c)
          return null;
        a.finishedWork = null;
        a.finishedLanes = 0;
        if (c === a.current)
          throw Error(p(177));
        a.callbackNode = null;
        a.callbackPriority = 0;
        var f = c.lanes | c.childLanes;
        Bc(a, f);
        a === R2 && (Y2 = R2 = null, Z2 = 0);
        0 === (c.subtreeFlags & 2064) && 0 === (c.flags & 2064) || wk || (wk = true, Gk(hc, function() {
          Ik();
          return null;
        }));
        f = 0 !== (c.flags & 15990);
        if (0 !== (c.subtreeFlags & 15990) || f) {
          f = pk.transition;
          pk.transition = null;
          var g2 = C2;
          C2 = 1;
          var h2 = K2;
          K2 |= 4;
          ok2.current = null;
          Pj(a, c);
          ek(c, a);
          Oe2(Df);
          dd2 = !!Cf;
          Df = Cf = null;
          a.current = c;
          ik(c);
          dc();
          K2 = h2;
          C2 = g2;
          pk.transition = f;
        } else
          a.current = c;
        wk && (wk = false, xk = a, yk = e);
        f = a.pendingLanes;
        0 === f && (Si = null);
        mc(c.stateNode);
        Ek(a, B2());
        if (null !== b2)
          for (d = a.onRecoverableError, c = 0; c < b2.length; c++)
            e = b2[c], d(e.value, { componentStack: e.stack, digest: e.digest });
        if (Pi2)
          throw Pi2 = false, a = Qi, Qi = null, a;
        0 !== (yk & 1) && 0 !== a.tag && Ik();
        f = a.pendingLanes;
        0 !== (f & 1) ? a === Ak ? zk++ : (zk = 0, Ak = a) : zk = 0;
        jg();
        return null;
      }
      function Ik() {
        if (null !== xk) {
          var a = Dc(yk), b2 = pk.transition, c = C2;
          try {
            pk.transition = null;
            C2 = 16 > a ? 16 : a;
            if (null === xk)
              var d = false;
            else {
              a = xk;
              xk = null;
              yk = 0;
              if (0 !== (K2 & 6))
                throw Error(p(331));
              var e = K2;
              K2 |= 4;
              for (V2 = a.current; null !== V2; ) {
                var f = V2, g2 = f.child;
                if (0 !== (V2.flags & 16)) {
                  var h2 = f.deletions;
                  if (null !== h2) {
                    for (var k2 = 0; k2 < h2.length; k2++) {
                      var l2 = h2[k2];
                      for (V2 = l2; null !== V2; ) {
                        var m2 = V2;
                        switch (m2.tag) {
                          case 0:
                          case 11:
                          case 15:
                            Qj(8, m2, f);
                        }
                        var q2 = m2.child;
                        if (null !== q2)
                          q2.return = m2, V2 = q2;
                        else
                          for (; null !== V2; ) {
                            m2 = V2;
                            var r = m2.sibling, y2 = m2.return;
                            Tj(m2);
                            if (m2 === l2) {
                              V2 = null;
                              break;
                            }
                            if (null !== r) {
                              r.return = y2;
                              V2 = r;
                              break;
                            }
                            V2 = y2;
                          }
                      }
                    }
                    var n = f.alternate;
                    if (null !== n) {
                      var t = n.child;
                      if (null !== t) {
                        n.child = null;
                        do {
                          var J2 = t.sibling;
                          t.sibling = null;
                          t = J2;
                        } while (null !== t);
                      }
                    }
                    V2 = f;
                  }
                }
                if (0 !== (f.subtreeFlags & 2064) && null !== g2)
                  g2.return = f, V2 = g2;
                else
                  b:
                    for (; null !== V2; ) {
                      f = V2;
                      if (0 !== (f.flags & 2048))
                        switch (f.tag) {
                          case 0:
                          case 11:
                          case 15:
                            Qj(9, f, f.return);
                        }
                      var x2 = f.sibling;
                      if (null !== x2) {
                        x2.return = f.return;
                        V2 = x2;
                        break b;
                      }
                      V2 = f.return;
                    }
              }
              var w2 = a.current;
              for (V2 = w2; null !== V2; ) {
                g2 = V2;
                var u = g2.child;
                if (0 !== (g2.subtreeFlags & 2064) && null !== u)
                  u.return = g2, V2 = u;
                else
                  b:
                    for (g2 = w2; null !== V2; ) {
                      h2 = V2;
                      if (0 !== (h2.flags & 2048))
                        try {
                          switch (h2.tag) {
                            case 0:
                            case 11:
                            case 15:
                              Rj(9, h2);
                          }
                        } catch (na) {
                          W2(h2, h2.return, na);
                        }
                      if (h2 === g2) {
                        V2 = null;
                        break b;
                      }
                      var F2 = h2.sibling;
                      if (null !== F2) {
                        F2.return = h2.return;
                        V2 = F2;
                        break b;
                      }
                      V2 = h2.return;
                    }
              }
              K2 = e;
              jg();
              if (lc && "function" === typeof lc.onPostCommitFiberRoot)
                try {
                  lc.onPostCommitFiberRoot(kc, a);
                } catch (na) {
                }
              d = true;
            }
            return d;
          } finally {
            C2 = c, pk.transition = b2;
          }
        }
        return false;
      }
      function Yk(a, b2, c) {
        b2 = Ki(c, b2);
        b2 = Oi(a, b2, 1);
        a = dh(a, b2, 1);
        b2 = L2();
        null !== a && (Ac(a, 1, b2), Ek(a, b2));
      }
      function W2(a, b2, c) {
        if (3 === a.tag)
          Yk(a, a, c);
        else
          for (; null !== b2; ) {
            if (3 === b2.tag) {
              Yk(b2, a, c);
              break;
            } else if (1 === b2.tag) {
              var d = b2.stateNode;
              if ("function" === typeof b2.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Si || !Si.has(d))) {
                a = Ki(c, a);
                a = Ri(b2, a, 1);
                b2 = dh(b2, a, 1);
                a = L2();
                null !== b2 && (Ac(b2, 1, a), Ek(b2, a));
                break;
              }
            }
            b2 = b2.return;
          }
      }
      function Ui(a, b2, c) {
        var d = a.pingCache;
        null !== d && d.delete(b2);
        b2 = L2();
        a.pingedLanes |= a.suspendedLanes & c;
        R2 === a && (Z2 & c) === c && (4 === T2 || 3 === T2 && (Z2 & 130023424) === Z2 && 500 > B2() - gk ? Lk(a, 0) : sk |= c);
        Ek(a, b2);
      }
      function Zk(a, b2) {
        0 === b2 && (0 === (a.mode & 1) ? b2 = 1 : (b2 = sc2, sc2 <<= 1, 0 === (sc2 & 130023424) && (sc2 = 4194304)));
        var c = L2();
        a = Zg(a, b2);
        null !== a && (Ac(a, b2, c), Ek(a, c));
      }
      function vj(a) {
        var b2 = a.memoizedState, c = 0;
        null !== b2 && (c = b2.retryLane);
        Zk(a, c);
      }
      function ck(a, b2) {
        var c = 0;
        switch (a.tag) {
          case 13:
            var d = a.stateNode;
            var e = a.memoizedState;
            null !== e && (c = e.retryLane);
            break;
          case 19:
            d = a.stateNode;
            break;
          default:
            throw Error(p(314));
        }
        null !== d && d.delete(b2);
        Zk(a, c);
      }
      var Wk;
      Wk = function(a, b2, c) {
        if (null !== a) {
          if (a.memoizedProps !== b2.pendingProps || Wf.current)
            Ug = true;
          else {
            if (0 === (a.lanes & c) && 0 === (b2.flags & 128))
              return Ug = false, zj(a, b2, c);
            Ug = 0 !== (a.flags & 131072) ? true : false;
          }
        } else
          Ug = false, I2 && 0 !== (b2.flags & 1048576) && ug(b2, ng, b2.index);
        b2.lanes = 0;
        switch (b2.tag) {
          case 2:
            var d = b2.type;
            jj(a, b2);
            a = b2.pendingProps;
            var e = Yf(b2, H2.current);
            Tg(b2, c);
            e = Xh(null, b2, d, a, e, c);
            var f = bi();
            b2.flags |= 1;
            "object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof ? (b2.tag = 1, b2.memoizedState = null, b2.updateQueue = null, Zf(d) ? (f = true, cg(b2)) : f = false, b2.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null, ah(b2), e.updater = nh, b2.stateNode = e, e._reactInternals = b2, rh(b2, d, a, c), b2 = kj(null, b2, d, true, f, c)) : (b2.tag = 0, I2 && f && vg(b2), Yi(null, b2, e, c), b2 = b2.child);
            return b2;
          case 16:
            d = b2.elementType;
            a: {
              jj(a, b2);
              a = b2.pendingProps;
              e = d._init;
              d = e(d._payload);
              b2.type = d;
              e = b2.tag = $k(d);
              a = Lg(d, a);
              switch (e) {
                case 0:
                  b2 = dj(null, b2, d, a, c);
                  break a;
                case 1:
                  b2 = ij(null, b2, d, a, c);
                  break a;
                case 11:
                  b2 = Zi(null, b2, d, a, c);
                  break a;
                case 14:
                  b2 = aj(null, b2, d, Lg(d.type, a), c);
                  break a;
              }
              throw Error(p(306, d, ""));
            }
            return b2;
          case 0:
            return d = b2.type, e = b2.pendingProps, e = b2.elementType === d ? e : Lg(d, e), dj(a, b2, d, e, c);
          case 1:
            return d = b2.type, e = b2.pendingProps, e = b2.elementType === d ? e : Lg(d, e), ij(a, b2, d, e, c);
          case 3:
            a: {
              lj(b2);
              if (null === a)
                throw Error(p(387));
              d = b2.pendingProps;
              f = b2.memoizedState;
              e = f.element;
              bh(a, b2);
              gh(b2, d, null, c);
              var g2 = b2.memoizedState;
              d = g2.element;
              if (f.isDehydrated) {
                if (f = { element: d, isDehydrated: false, cache: g2.cache, pendingSuspenseBoundaries: g2.pendingSuspenseBoundaries, transitions: g2.transitions }, b2.updateQueue.baseState = f, b2.memoizedState = f, b2.flags & 256) {
                  e = Ki(Error(p(423)), b2);
                  b2 = mj(a, b2, d, c, e);
                  break a;
                } else if (d !== e) {
                  e = Ki(Error(p(424)), b2);
                  b2 = mj(a, b2, d, c, e);
                  break a;
                } else
                  for (yg = Lf(b2.stateNode.containerInfo.firstChild), xg = b2, I2 = true, zg = null, c = Ch(b2, null, d, c), b2.child = c; c; )
                    c.flags = c.flags & -3 | 4096, c = c.sibling;
              } else {
                Ig();
                if (d === e) {
                  b2 = $i(a, b2, c);
                  break a;
                }
                Yi(a, b2, d, c);
              }
              b2 = b2.child;
            }
            return b2;
          case 5:
            return Kh(b2), null === a && Eg(b2), d = b2.type, e = b2.pendingProps, f = null !== a ? a.memoizedProps : null, g2 = e.children, Ef(d, e) ? g2 = null : null !== f && Ef(d, f) && (b2.flags |= 32), hj(a, b2), Yi(a, b2, g2, c), b2.child;
          case 6:
            return null === a && Eg(b2), null;
          case 13:
            return pj(a, b2, c);
          case 4:
            return Ih(b2, b2.stateNode.containerInfo), d = b2.pendingProps, null === a ? b2.child = Bh(b2, null, d, c) : Yi(a, b2, d, c), b2.child;
          case 11:
            return d = b2.type, e = b2.pendingProps, e = b2.elementType === d ? e : Lg(d, e), Zi(a, b2, d, e, c);
          case 7:
            return Yi(a, b2, b2.pendingProps, c), b2.child;
          case 8:
            return Yi(a, b2, b2.pendingProps.children, c), b2.child;
          case 12:
            return Yi(a, b2, b2.pendingProps.children, c), b2.child;
          case 10:
            a: {
              d = b2.type._context;
              e = b2.pendingProps;
              f = b2.memoizedProps;
              g2 = e.value;
              G2(Mg, d._currentValue);
              d._currentValue = g2;
              if (null !== f)
                if (He2(f.value, g2)) {
                  if (f.children === e.children && !Wf.current) {
                    b2 = $i(a, b2, c);
                    break a;
                  }
                } else
                  for (f = b2.child, null !== f && (f.return = b2); null !== f; ) {
                    var h2 = f.dependencies;
                    if (null !== h2) {
                      g2 = f.child;
                      for (var k2 = h2.firstContext; null !== k2; ) {
                        if (k2.context === d) {
                          if (1 === f.tag) {
                            k2 = ch(-1, c & -c);
                            k2.tag = 2;
                            var l2 = f.updateQueue;
                            if (null !== l2) {
                              l2 = l2.shared;
                              var m2 = l2.pending;
                              null === m2 ? k2.next = k2 : (k2.next = m2.next, m2.next = k2);
                              l2.pending = k2;
                            }
                          }
                          f.lanes |= c;
                          k2 = f.alternate;
                          null !== k2 && (k2.lanes |= c);
                          Sg(f.return, c, b2);
                          h2.lanes |= c;
                          break;
                        }
                        k2 = k2.next;
                      }
                    } else if (10 === f.tag)
                      g2 = f.type === b2.type ? null : f.child;
                    else if (18 === f.tag) {
                      g2 = f.return;
                      if (null === g2)
                        throw Error(p(341));
                      g2.lanes |= c;
                      h2 = g2.alternate;
                      null !== h2 && (h2.lanes |= c);
                      Sg(g2, c, b2);
                      g2 = f.sibling;
                    } else
                      g2 = f.child;
                    if (null !== g2)
                      g2.return = f;
                    else
                      for (g2 = f; null !== g2; ) {
                        if (g2 === b2) {
                          g2 = null;
                          break;
                        }
                        f = g2.sibling;
                        if (null !== f) {
                          f.return = g2.return;
                          g2 = f;
                          break;
                        }
                        g2 = g2.return;
                      }
                    f = g2;
                  }
              Yi(a, b2, e.children, c);
              b2 = b2.child;
            }
            return b2;
          case 9:
            return e = b2.type, d = b2.pendingProps.children, Tg(b2, c), e = Vg(e), d = d(e), b2.flags |= 1, Yi(a, b2, d, c), b2.child;
          case 14:
            return d = b2.type, e = Lg(d, b2.pendingProps), e = Lg(d.type, e), aj(a, b2, d, e, c);
          case 15:
            return cj(a, b2, b2.type, b2.pendingProps, c);
          case 17:
            return d = b2.type, e = b2.pendingProps, e = b2.elementType === d ? e : Lg(d, e), jj(a, b2), b2.tag = 1, Zf(d) ? (a = true, cg(b2)) : a = false, Tg(b2, c), ph(b2, d, e), rh(b2, d, e, c), kj(null, b2, d, true, a, c);
          case 19:
            return yj(a, b2, c);
          case 22:
            return ej(a, b2, c);
        }
        throw Error(p(156, b2.tag));
      };
      function Gk(a, b2) {
        return ac2(a, b2);
      }
      function al(a, b2, c, d) {
        this.tag = a;
        this.key = c;
        this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = b2;
        this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
        this.mode = d;
        this.subtreeFlags = this.flags = 0;
        this.deletions = null;
        this.childLanes = this.lanes = 0;
        this.alternate = null;
      }
      function Bg(a, b2, c, d) {
        return new al(a, b2, c, d);
      }
      function bj(a) {
        a = a.prototype;
        return !(!a || !a.isReactComponent);
      }
      function $k(a) {
        if ("function" === typeof a)
          return bj(a) ? 1 : 0;
        if (void 0 !== a && null !== a) {
          a = a.$$typeof;
          if (a === Da)
            return 11;
          if (a === Ga)
            return 14;
        }
        return 2;
      }
      function wh(a, b2) {
        var c = a.alternate;
        null === c ? (c = Bg(a.tag, b2, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b2, c.type = a.type, c.flags = 0, c.subtreeFlags = 0, c.deletions = null);
        c.flags = a.flags & 14680064;
        c.childLanes = a.childLanes;
        c.lanes = a.lanes;
        c.child = a.child;
        c.memoizedProps = a.memoizedProps;
        c.memoizedState = a.memoizedState;
        c.updateQueue = a.updateQueue;
        b2 = a.dependencies;
        c.dependencies = null === b2 ? null : { lanes: b2.lanes, firstContext: b2.firstContext };
        c.sibling = a.sibling;
        c.index = a.index;
        c.ref = a.ref;
        return c;
      }
      function yh(a, b2, c, d, e, f) {
        var g2 = 2;
        d = a;
        if ("function" === typeof a)
          bj(a) && (g2 = 1);
        else if ("string" === typeof a)
          g2 = 5;
        else
          a:
            switch (a) {
              case ya:
                return Ah(c.children, e, f, b2);
              case za:
                g2 = 8;
                e |= 8;
                break;
              case Aa:
                return a = Bg(12, c, b2, e | 2), a.elementType = Aa, a.lanes = f, a;
              case Ea:
                return a = Bg(13, c, b2, e), a.elementType = Ea, a.lanes = f, a;
              case Fa:
                return a = Bg(19, c, b2, e), a.elementType = Fa, a.lanes = f, a;
              case Ia:
                return qj(c, e, f, b2);
              default:
                if ("object" === typeof a && null !== a)
                  switch (a.$$typeof) {
                    case Ba:
                      g2 = 10;
                      break a;
                    case Ca:
                      g2 = 9;
                      break a;
                    case Da:
                      g2 = 11;
                      break a;
                    case Ga:
                      g2 = 14;
                      break a;
                    case Ha:
                      g2 = 16;
                      d = null;
                      break a;
                  }
                throw Error(p(130, null == a ? a : typeof a, ""));
            }
        b2 = Bg(g2, c, b2, e);
        b2.elementType = a;
        b2.type = d;
        b2.lanes = f;
        return b2;
      }
      function Ah(a, b2, c, d) {
        a = Bg(7, a, d, b2);
        a.lanes = c;
        return a;
      }
      function qj(a, b2, c, d) {
        a = Bg(22, a, d, b2);
        a.elementType = Ia;
        a.lanes = c;
        a.stateNode = { isHidden: false };
        return a;
      }
      function xh(a, b2, c) {
        a = Bg(6, a, null, b2);
        a.lanes = c;
        return a;
      }
      function zh(a, b2, c) {
        b2 = Bg(4, null !== a.children ? a.children : [], a.key, b2);
        b2.lanes = c;
        b2.stateNode = { containerInfo: a.containerInfo, pendingChildren: null, implementation: a.implementation };
        return b2;
      }
      function bl(a, b2, c, d, e) {
        this.tag = b2;
        this.containerInfo = a;
        this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
        this.timeoutHandle = -1;
        this.callbackNode = this.pendingContext = this.context = null;
        this.callbackPriority = 0;
        this.eventTimes = zc(0);
        this.expirationTimes = zc(-1);
        this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
        this.entanglements = zc(0);
        this.identifierPrefix = d;
        this.onRecoverableError = e;
        this.mutableSourceEagerHydrationData = null;
      }
      function cl(a, b2, c, d, e, f, g2, h2, k2) {
        a = new bl(a, b2, c, h2, k2);
        1 === b2 ? (b2 = 1, true === f && (b2 |= 8)) : b2 = 0;
        f = Bg(3, null, null, b2);
        a.current = f;
        f.stateNode = a;
        f.memoizedState = { element: d, isDehydrated: c, cache: null, transitions: null, pendingSuspenseBoundaries: null };
        ah(f);
        return a;
      }
      function dl(a, b2, c) {
        var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
        return { $$typeof: wa, key: null == d ? null : "" + d, children: a, containerInfo: b2, implementation: c };
      }
      function el2(a) {
        if (!a)
          return Vf;
        a = a._reactInternals;
        a: {
          if (Vb(a) !== a || 1 !== a.tag)
            throw Error(p(170));
          var b2 = a;
          do {
            switch (b2.tag) {
              case 3:
                b2 = b2.stateNode.context;
                break a;
              case 1:
                if (Zf(b2.type)) {
                  b2 = b2.stateNode.__reactInternalMemoizedMergedChildContext;
                  break a;
                }
            }
            b2 = b2.return;
          } while (null !== b2);
          throw Error(p(171));
        }
        if (1 === a.tag) {
          var c = a.type;
          if (Zf(c))
            return bg(a, c, b2);
        }
        return b2;
      }
      function fl(a, b2, c, d, e, f, g2, h2, k2) {
        a = cl(c, d, true, a, e, f, g2, h2, k2);
        a.context = el2(null);
        c = a.current;
        d = L2();
        e = lh(c);
        f = ch(d, e);
        f.callback = void 0 !== b2 && null !== b2 ? b2 : null;
        dh(c, f, e);
        a.current.lanes = e;
        Ac(a, e, d);
        Ek(a, d);
        return a;
      }
      function gl2(a, b2, c, d) {
        var e = b2.current, f = L2(), g2 = lh(e);
        c = el2(c);
        null === b2.context ? b2.context = c : b2.pendingContext = c;
        b2 = ch(f, g2);
        b2.payload = { element: a };
        d = void 0 === d ? null : d;
        null !== d && (b2.callback = d);
        a = dh(e, b2, g2);
        null !== a && (mh(a, e, g2, f), eh(a, e, g2));
        return g2;
      }
      function hl(a) {
        a = a.current;
        if (!a.child)
          return null;
        switch (a.child.tag) {
          case 5:
            return a.child.stateNode;
          default:
            return a.child.stateNode;
        }
      }
      function il(a, b2) {
        a = a.memoizedState;
        if (null !== a && null !== a.dehydrated) {
          var c = a.retryLane;
          a.retryLane = 0 !== c && c < b2 ? c : b2;
        }
      }
      function jl(a, b2) {
        il(a, b2);
        (a = a.alternate) && il(a, b2);
      }
      function kl() {
        return null;
      }
      var ll2 = "function" === typeof reportError ? reportError : function(a) {
        console.error(a);
      };
      function ml(a) {
        this._internalRoot = a;
      }
      nl.prototype.render = ml.prototype.render = function(a) {
        var b2 = this._internalRoot;
        if (null === b2)
          throw Error(p(409));
        gl2(a, b2, null, null);
      };
      nl.prototype.unmount = ml.prototype.unmount = function() {
        var a = this._internalRoot;
        if (null !== a) {
          this._internalRoot = null;
          var b2 = a.containerInfo;
          Sk(function() {
            gl2(null, a, null, null);
          });
          b2[uf] = null;
        }
      };
      function nl(a) {
        this._internalRoot = a;
      }
      nl.prototype.unstable_scheduleHydration = function(a) {
        if (a) {
          var b2 = Hc();
          a = { blockedOn: null, target: a, priority: b2 };
          for (var c = 0; c < Qc.length && 0 !== b2 && b2 < Qc[c].priority; c++)
            ;
          Qc.splice(c, 0, a);
          0 === c && Vc(a);
        }
      };
      function ol(a) {
        return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType);
      }
      function pl(a) {
        return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
      }
      function ql() {
      }
      function rl(a, b2, c, d, e) {
        if (e) {
          if ("function" === typeof d) {
            var f = d;
            d = function() {
              var a2 = hl(g2);
              f.call(a2);
            };
          }
          var g2 = fl(b2, d, a, 0, null, false, false, "", ql);
          a._reactRootContainer = g2;
          a[uf] = g2.current;
          sf(8 === a.nodeType ? a.parentNode : a);
          Sk();
          return g2;
        }
        for (; e = a.lastChild; )
          a.removeChild(e);
        if ("function" === typeof d) {
          var h2 = d;
          d = function() {
            var a2 = hl(k2);
            h2.call(a2);
          };
        }
        var k2 = cl(a, 0, false, null, null, false, false, "", ql);
        a._reactRootContainer = k2;
        a[uf] = k2.current;
        sf(8 === a.nodeType ? a.parentNode : a);
        Sk(function() {
          gl2(b2, k2, c, d);
        });
        return k2;
      }
      function sl(a, b2, c, d, e) {
        var f = c._reactRootContainer;
        if (f) {
          var g2 = f;
          if ("function" === typeof e) {
            var h2 = e;
            e = function() {
              var a2 = hl(g2);
              h2.call(a2);
            };
          }
          gl2(b2, g2, a, e);
        } else
          g2 = rl(c, b2, a, e, d);
        return hl(g2);
      }
      Ec = function(a) {
        switch (a.tag) {
          case 3:
            var b2 = a.stateNode;
            if (b2.current.memoizedState.isDehydrated) {
              var c = tc(b2.pendingLanes);
              0 !== c && (Cc(b2, c | 1), Ek(b2, B2()), 0 === (K2 & 6) && (Hj = B2() + 500, jg()));
            }
            break;
          case 13:
            Sk(function() {
              var b3 = Zg(a, 1);
              if (null !== b3) {
                var c2 = L2();
                mh(b3, a, 1, c2);
              }
            }), jl(a, 1);
        }
      };
      Fc = function(a) {
        if (13 === a.tag) {
          var b2 = Zg(a, 134217728);
          if (null !== b2) {
            var c = L2();
            mh(b2, a, 134217728, c);
          }
          jl(a, 134217728);
        }
      };
      Gc = function(a) {
        if (13 === a.tag) {
          var b2 = lh(a), c = Zg(a, b2);
          if (null !== c) {
            var d = L2();
            mh(c, a, b2, d);
          }
          jl(a, b2);
        }
      };
      Hc = function() {
        return C2;
      };
      Ic = function(a, b2) {
        var c = C2;
        try {
          return C2 = a, b2();
        } finally {
          C2 = c;
        }
      };
      yb = function(a, b2, c) {
        switch (b2) {
          case "input":
            bb(a, c);
            b2 = c.name;
            if ("radio" === c.type && null != b2) {
              for (c = a; c.parentNode; )
                c = c.parentNode;
              c = c.querySelectorAll("input[name=" + JSON.stringify("" + b2) + '][type="radio"]');
              for (b2 = 0; b2 < c.length; b2++) {
                var d = c[b2];
                if (d !== a && d.form === a.form) {
                  var e = Db(d);
                  if (!e)
                    throw Error(p(90));
                  Wa(d);
                  bb(d, e);
                }
              }
            }
            break;
          case "textarea":
            ib(a, c);
            break;
          case "select":
            b2 = c.value, null != b2 && fb(a, !!c.multiple, b2, false);
        }
      };
      Gb = Rk;
      Hb = Sk;
      var tl = { usingClientEntryPoint: false, Events: [Cb, ue, Db, Eb, Fb, Rk] }, ul = { findFiberByHostInstance: Wc, bundleType: 0, version: "18.2.0", rendererPackageName: "react-dom" };
      var vl = { bundleType: ul.bundleType, version: ul.version, rendererPackageName: ul.rendererPackageName, rendererConfig: ul.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ua.ReactCurrentDispatcher, findHostInstanceByFiber: function(a) {
        a = Zb(a);
        return null === a ? null : a.stateNode;
      }, findFiberByHostInstance: ul.findFiberByHostInstance || kl, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.2.0-next-9e3b772b8-20220608" };
      if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
        var wl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (!wl.isDisabled && wl.supportsFiber)
          try {
            kc = wl.inject(vl), lc = wl;
          } catch (a) {
          }
      }
      reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = tl;
      reactDom_production_min.createPortal = function(a, b2) {
        var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
        if (!ol(b2))
          throw Error(p(200));
        return dl(a, b2, null, c);
      };
      reactDom_production_min.createRoot = function(a, b2) {
        if (!ol(a))
          throw Error(p(299));
        var c = false, d = "", e = ll2;
        null !== b2 && void 0 !== b2 && (true === b2.unstable_strictMode && (c = true), void 0 !== b2.identifierPrefix && (d = b2.identifierPrefix), void 0 !== b2.onRecoverableError && (e = b2.onRecoverableError));
        b2 = cl(a, 1, false, null, null, c, false, d, e);
        a[uf] = b2.current;
        sf(8 === a.nodeType ? a.parentNode : a);
        return new ml(b2);
      };
      reactDom_production_min.findDOMNode = function(a) {
        if (null == a)
          return null;
        if (1 === a.nodeType)
          return a;
        var b2 = a._reactInternals;
        if (void 0 === b2) {
          if ("function" === typeof a.render)
            throw Error(p(188));
          a = Object.keys(a).join(",");
          throw Error(p(268, a));
        }
        a = Zb(b2);
        a = null === a ? null : a.stateNode;
        return a;
      };
      reactDom_production_min.flushSync = function(a) {
        return Sk(a);
      };
      reactDom_production_min.hydrate = function(a, b2, c) {
        if (!pl(b2))
          throw Error(p(200));
        return sl(null, a, b2, true, c);
      };
      reactDom_production_min.hydrateRoot = function(a, b2, c) {
        if (!ol(a))
          throw Error(p(405));
        var d = null != c && c.hydratedSources || null, e = false, f = "", g2 = ll2;
        null !== c && void 0 !== c && (true === c.unstable_strictMode && (e = true), void 0 !== c.identifierPrefix && (f = c.identifierPrefix), void 0 !== c.onRecoverableError && (g2 = c.onRecoverableError));
        b2 = fl(b2, null, a, 1, null != c ? c : null, e, false, f, g2);
        a[uf] = b2.current;
        sf(a);
        if (d)
          for (a = 0; a < d.length; a++)
            c = d[a], e = c._getVersion, e = e(c._source), null == b2.mutableSourceEagerHydrationData ? b2.mutableSourceEagerHydrationData = [c, e] : b2.mutableSourceEagerHydrationData.push(c, e);
        return new nl(b2);
      };
      reactDom_production_min.render = function(a, b2, c) {
        if (!pl(b2))
          throw Error(p(200));
        return sl(null, a, b2, false, c);
      };
      reactDom_production_min.unmountComponentAtNode = function(a) {
        if (!pl(a))
          throw Error(p(40));
        return a._reactRootContainer ? (Sk(function() {
          sl(null, null, a, false, function() {
            a._reactRootContainer = null;
            a[uf] = null;
          });
        }), true) : false;
      };
      reactDom_production_min.unstable_batchedUpdates = Rk;
      reactDom_production_min.unstable_renderSubtreeIntoContainer = function(a, b2, c, d) {
        if (!pl(c))
          throw Error(p(200));
        if (null == a || void 0 === a._reactInternals)
          throw Error(p(38));
        return sl(a, b2, c, false, d);
      };
      reactDom_production_min.version = "18.2.0-next-9e3b772b8-20220608";
      return reactDom_production_min;
    }
    var reactDom_development = {};
    var hasRequiredReactDom_development;
    function requireReactDom_development() {
      if (hasRequiredReactDom_development)
        return reactDom_development;
      hasRequiredReactDom_development = 1;
      if (process.env.NODE_ENV !== "production") {
        (function() {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React2 = React__namespace.default;
          var Scheduler2 = requireScheduler();
          var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name2, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name2.length > 2 && (name2[0] === "o" || name2[0] === "O") && (name2[1] === "n" || name2[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name2, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name2.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name2, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name2, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name2) {
            return properties.hasOwnProperty(name2) ? properties[name2] : null;
          }
          function PropertyInfoRecord(name2, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name2;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name2) {
            properties[name2] = new PropertyInfoRecord(
              name2,
              RESERVED,
              false,
              // mustUseProperty
              name2,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name2 = _ref[0], attributeName = _ref[1];
            properties[name2] = new PropertyInfoRecord(
              name2,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name2) {
            properties[name2] = new PropertyInfoRecord(
              name2,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name2.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name2) {
            properties[name2] = new PropertyInfoRecord(
              name2,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name2,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name2) {
            properties[name2] = new PropertyInfoRecord(
              name2,
              BOOLEAN,
              false,
              // mustUseProperty
              name2.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name2) {
            properties[name2] = new PropertyInfoRecord(
              name2,
              BOOLEAN,
              true,
              // mustUseProperty
              name2,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name2) {
            properties[name2] = new PropertyInfoRecord(
              name2,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name2,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name2) {
            properties[name2] = new PropertyInfoRecord(
              name2,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name2,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name2) {
            properties[name2] = new PropertyInfoRecord(
              name2,
              NUMERIC,
              false,
              // mustUseProperty
              name2.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name2 = attributeName.replace(CAMELIZE, capitalize);
            properties[name2] = new PropertyInfoRecord(
              name2,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name2 = attributeName.replace(CAMELIZE, capitalize);
            properties[name2] = new PropertyInfoRecord(
              name2,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name2 = attributeName.replace(CAMELIZE, capitalize);
            properties[name2] = new PropertyInfoRecord(
              name2,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name2, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name2);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name2, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name2, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name2, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name2, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name2)) {
                return;
              }
              if (!node.hasAttribute(name2)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name2);
              {
                checkAttributeStringCoercion(expected, name2);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name2, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name2);
            if (shouldIgnoreAttribute(name2, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name2, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name2)) {
                var _attributeName = name2;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name2);
                  }
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = { configurable: true, enumerable: true, value: disabledLog, writable: true };
                Object.defineProperties(console, { info: props, log: props, warn: props, error: props, group: props, groupCollapsed: props, groupEnd: props });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = { configurable: true, enumerable: true, writable: true };
                Object.defineProperties(console, { log: assign({}, props, { value: prevLog }), info: assign({}, props, { value: prevInfo }), warn: assign({}, props, { value: prevWarn }), error: assign({}, props, { value: prevError }), group: assign({}, props, { value: prevGroup }), groupCollapsed: assign({}, props, { value: prevGroupCollapsed }), groupEnd: assign({}, props, { value: prevGroupEnd }) });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name2, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x2) {
                  var match = x2.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name2;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", { set: function() {
                  throw Error();
                } });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x2) {
                    control = x2;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x2) {
                    control = x2;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x2) {
                  control = x2;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name2 = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name2 ? describeBuiltInComponentFrame(name2) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x2) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info2 = "";
              var node = workInProgress2;
              do {
                info2 += describeFiber(node);
                node = node.return;
              } while (node);
              return info2;
            } catch (x2) {
              return "\nError generating stack: " + x2.message + "\n" + x2.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x2) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = { button: true, checkbox: true, image: true, hidden: true, radio: true, reset: true, submit: true };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node[valueField]);
            }
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node, valueField, { configurable: true, get: function() {
              return get2.call(this);
            }, set: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
              set2.call(this, value);
            } });
            Object.defineProperty(node, valueField, { enumerable: descriptor.enumerable });
            var tracker = { getValue: function() {
              return currentValue;
            }, setValue: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
            }, stopTracking: function() {
              detachTracker(node);
              delete node[valueField];
            } };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = assign({}, props, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: checked != null ? checked : node._wrapperState.initialChecked });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = { initialChecked: props.checked != null ? props.checked : props.defaultChecked, initialValue: getToStringValue(props.value != null ? props.value : defaultValue), controlled: isControlled(props) };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value) {
                  node.value = toString(value);
                }
              } else if (node.value !== toString(value)) {
                node.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name2 = node.name;
            if (name2 !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name2 !== "") {
              node.name = name2;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name2 = props.name;
            if (props.type === "radio" && name2 != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name2, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name2) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node.ownerDocument) !== node
            ) {
              if (value == null) {
                node.defaultValue = toString(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString(value)) {
                node.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React2.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign({}, props, { value: void 0 });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = { wasMultiple: !!props.multiple };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign({}, props, { value: void 0, defaultValue: void 0, children: toString(node._wrapperState.initialValue) });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = { initialValue: getToStringValue(initialValue) };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html2) {
            if (node.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html2.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html2;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = { animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"], background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"], backgroundPosition: ["backgroundPositionX", "backgroundPositionY"], border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"], borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"], borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"], borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"], borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"], borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"], borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"], borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"], borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"], borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"], borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"], borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"], borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"], borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"], columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"], columns: ["columnCount", "columnWidth"], flex: ["flexBasis", "flexGrow", "flexShrink"], flexFlow: ["flexDirection", "flexWrap"], font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"], fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"], gap: ["columnGap", "rowGap"], grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"], gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"], gridColumn: ["gridColumnEnd", "gridColumnStart"], gridColumnGap: ["columnGap"], gridGap: ["columnGap", "rowGap"], gridRow: ["gridRowEnd", "gridRowStart"], gridRowGap: ["rowGap"], gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"], listStyle: ["listStyleImage", "listStylePosition", "listStyleType"], margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"], marker: ["markerEnd", "markerMid", "markerStart"], mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"], maskPosition: ["maskPositionX", "maskPositionY"], outline: ["outlineColor", "outlineStyle", "outlineWidth"], overflow: ["overflowX", "overflowY"], padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"], placeContent: ["alignContent", "justifyContent"], placeItems: ["alignItems", "justifyItems"], placeSelf: ["alignSelf", "justifySelf"], textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"], textEmphasis: ["textEmphasisColor", "textEmphasisStyle"], transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"], wordWrap: ["overflowWrap"] };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key2) {
            return prefix2 + key2.charAt(0).toUpperCase() + key2.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop2) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop2)] = isUnitlessNumber[prop2];
            });
          });
          function dangerousStyleValue(name2, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name2) && isUnitlessNumber[name2])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name2);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name2) {
            return name2.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_2, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name2) {
              if (warnedStyleNames.hasOwnProperty(name2) && warnedStyleNames[name2]) {
                return;
              }
              warnedStyleNames[name2] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name2,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name2.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name2) {
              if (warnedStyleNames.hasOwnProperty(name2) && warnedStyleNames[name2]) {
                return;
              }
              warnedStyleNames[name2] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name2, name2.charAt(0).toUpperCase() + name2.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name2, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name2, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name2, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name2);
            };
            var warnStyleValueIsInfinity = function(name2, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name2);
            };
            warnValidStyle = function(name2, value) {
              if (name2.indexOf("-") > -1) {
                warnHyphenatedStyleName(name2);
              } else if (badVendoredStyleNamePattern.test(name2)) {
                warnBadVendoredStyleName(name2);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name2, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name2, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name2, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style3 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style3.setProperty(styleName, styleValue);
              } else {
                style3[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key2 in styles) {
              var longhands = shorthandToLonghand[key2] || [key2];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key2;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key2 in expandedUpdates) {
                var originalKey = expandedUpdates[key2];
                var correctOriginalKey = expandedStyles[key2];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign({ menuitem: true }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name2) {
            {
              if (hasOwnProperty2.call(warnedProperties, name2) && warnedProperties[name2]) {
                return true;
              }
              if (rARIACamel.test(name2)) {
                var ariaName = "aria-" + name2.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name2);
                  warnedProperties[name2] = true;
                  return true;
                }
                if (name2 !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name2, correctName);
                  warnedProperties[name2] = true;
                  return true;
                }
              }
              if (rARIA.test(name2)) {
                var lowerCasedName = name2.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name2] = true;
                  return false;
                }
                if (name2 !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name2, standardName);
                  warnedProperties[name2] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key2 in props) {
                var isValid = validateProperty(type, key2);
                if (!isValid) {
                  invalidProps.push(key2);
                }
              }
              var unknownPropString = invalidProps.map(function(prop2) {
                return "`" + prop2 + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name2, value, eventRegistry) {
              if (hasOwnProperty2.call(warnedProperties$1, name2) && warnedProperties$1[name2]) {
                return true;
              }
              var lowerCasedName = name2.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name2] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name2)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name2, registrationName);
                  warnedProperties$1[name2] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name2)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name2);
                  warnedProperties$1[name2] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name2)) {
                if (INVALID_EVENT_NAME_REGEX.test(name2)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name2);
                }
                warnedProperties$1[name2] = true;
                return true;
              }
              if (rARIA$1.test(name2) || rARIACamel$1.test(name2)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name2] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name2] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name2] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name2);
                warnedProperties$1[name2] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name2);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name2) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name2, standardName);
                  warnedProperties$1[name2] = true;
                  return true;
                }
              } else if (!isReserved && name2 !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name2, lowerCasedName);
                warnedProperties$1[name2] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name2, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name2, name2, value, name2);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name2, name2, value, name2, name2, name2);
                }
                warnedProperties$1[name2] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name2, value, propertyInfo, false)) {
                warnedProperties$1[name2] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name2, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name2, value);
                warnedProperties$1[name2] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key2 in props) {
                var isValid = validateProperty$1(type, key2, props[key2], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key2);
                }
              }
              var unknownPropString = unknownProps.map(function(prop2) {
                return "`" + prop2 + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target2 = nativeEvent.target || nativeEvent.srcElement || window;
            if (target2.correspondingUseElement) {
              target2 = target2.correspondingUseElement;
            }
            return target2.nodeType === TEXT_NODE ? target2.parentNode : target2;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target2) {
            var internalInstance = getInstanceFromNode(target2);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target2) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target2);
              } else {
                restoreQueue = [target2];
              }
            } else {
              restoreTarget = target2;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target2 = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target2);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a, b2) {
            if (isInsideEventHandler) {
              return fn(a, b2);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a, b2);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name2, type, props) {
            switch (name2) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", { get: function() {
                passiveBrowserEventsSupported = true;
              } });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name2, func, context, a, b2, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name2, func, context, a, b2, c, d, e, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name2 ? name2 : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = { onError: function(error2) {
            hasError = true;
            caughtError = error2;
          } };
          function invokeGuardedCallback(name2, func, context, a, b2, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name2, func, context, a, b2, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get(key2) {
            return key2._reactInternals;
          }
          function has2(key2) {
            return key2._reactInternals !== void 0;
          }
          function set(key2, value) {
            key2._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b2 = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b2 = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b2) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a.return !== b2.return) {
                a = parentA;
                b2 = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b2 = parentB;
                    break;
                  }
                  if (_child === b2) {
                    didFindChild = true;
                    b2 = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b2 = parentA;
                      break;
                    }
                    if (_child === b2) {
                      didFindChild = true;
                      b2 = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a.alternate !== b2) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              var match = findCurrentHostFiberImpl(child);
              if (match !== null) {
                return match;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) {
                  return match;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler2.unstable_scheduleCallback;
          var cancelCallback = Scheduler2.unstable_cancelCallback;
          var shouldYield = Scheduler2.unstable_shouldYield;
          var requestPaint = Scheduler2.unstable_requestPaint;
          var now = Scheduler2.unstable_now;
          var getCurrentPriorityLevel = Scheduler2.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler2.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler2.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler2.unstable_NormalPriority;
          var LowPriority = Scheduler2.unstable_LowPriority;
          var IdlePriority = Scheduler2.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler2.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler2.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign({}, internals, { getLaneLabelMap, injectProfilingHooks });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root2) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root2);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map2 = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index3 = 0; index3 < TotalLanes; index3++) {
                var label = getLabelForLane(lane);
                map2.set(lane, label);
                lane *= 2;
              }
              return map2;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x2) {
            var asUint = x2 >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index3 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index3;
                nextLanes |= entanglements[index3];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var eventTime = eventTimes[index3];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var expirationTime = expirationTimes[index3];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index3] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root2) {
            return getHighestPriorityLanes(root2.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root2, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root2, lanes) {
            return (lanes & root2.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b2) {
            return (a & b2) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset2) {
            return (set2 & subset2) === subset2;
          }
          function mergeLanes(a, b2) {
            return a | b2;
          }
          function removeLanes(set2, subset2) {
            return set2 & ~subset2;
          }
          function intersectLanes(a, b2) {
            return a & b2;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b2) {
            return a !== NoLane && a < b2 ? a : b2;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root2.suspendedLanes = NoLanes;
              root2.pingedLanes = NoLanes;
            }
            var eventTimes = root2.eventTimes;
            var index3 = laneToIndex(updateLane);
            eventTimes[index3] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              entanglements[index3] = NoLanes;
              eventTimes[index3] = NoTimestamp;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index3] & entangledLanes
              ) {
                entanglements[index3] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root2, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root2, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index3 = laneToIndex(lanes);
              var lane = 1 << index3;
              var updaters = pendingUpdatersLaneMap[index3];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root2, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            var memoizedUpdaters = root2.memoizedUpdaters;
            while (lanes > 0) {
              var index3 = laneToIndex(lanes);
              var lane = 1 << index3;
              var updaters = pendingUpdatersLaneMap[index3];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root2, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a, b2) {
            return a !== 0 && a < b2 ? a : b2;
          }
          function lowerEventPriority(a, b2) {
            return a === 0 || a > b2 ? a : b2;
          }
          function isHigherEventPriority(a, b2) {
            return a !== 0 && a < b2;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root2) {
            var currentState = root2.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return { blockedOn, domEventName, eventSystemFlags, nativeEvent, targetContainers: [targetContainer] };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target2) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = { blockedOn: null, target: target2, priority: updatePriority };
            var i = 0;
            for (; i < queuedExplicitHydrationTargets.length; i++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
            if (i === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key2, map2) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map2.delete(key2);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler2.unstable_scheduleCallback(Scheduler2.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target2, eventType, listener) {
            target2.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target2, eventType, listener) {
            target2.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target2, eventType, listener, passive) {
            target2.addEventListener(eventType, listener, { capture: true, passive });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target2, eventType, listener, passive) {
            target2.addEventListener(eventType, listener, { passive });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize2 = Interface[_propName];
                if (normalize2) {
                  this[_propName] = normalize2(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
              * We release all dispatched `SyntheticEvent`s after each event loop, adding
              * them back into the pool. This allows a way to hold onto a reference that
              * won't be added back into the pool.
              */
              persist: function() {
              },
              /**
                  * Checks if this event should be released back into the pool.
                  *
                  * @return {boolean} True if this should not be released, false otherwise.
                  */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(event) {
            return event.timeStamp || Date.now();
          }, defaultPrevented: 0, isTrusted: 0 };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign({}, EventInterface, { view: 0, detail: 0 });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign({}, UIEventInterface, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: getEventModifierState, button: 0, buttons: 0, relatedTarget: function(event) {
            if (event.relatedTarget === void 0)
              return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
          }, movementX: function(event) {
            if ("movementX" in event) {
              return event.movementX;
            }
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
          }, movementY: function(event) {
            if ("movementY" in event) {
              return event.movementY;
            }
            return lastMovementY;
          } });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign({}, MouseEventInterface, { dataTransfer: 0 });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign({}, UIEventInterface, { relatedTarget: 0 });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign({}, EventInterface, { animationName: 0, elapsedTime: 0, pseudoElement: 0 });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign({}, EventInterface, { clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          } });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign({}, EventInterface, { data: 0 });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = { Esc: "Escape", Spacebar: " ", Left: "ArrowLeft", Up: "ArrowUp", Right: "ArrowRight", Down: "ArrowDown", Del: "Delete", Win: "OS", Menu: "ContextMenu", Apps: "ContextMenu", Scroll: "ScrollLock", MozPrintableKey: "Unidentified" };
          var translateToKey = { "8": "Backspace", "9": "Tab", "12": "Clear", "13": "Enter", "16": "Shift", "17": "Control", "18": "Alt", "19": "Pause", "20": "CapsLock", "27": "Escape", "32": " ", "33": "PageUp", "34": "PageDown", "35": "End", "36": "Home", "37": "ArrowLeft", "38": "ArrowUp", "39": "ArrowRight", "40": "ArrowDown", "45": "Insert", "46": "Delete", "112": "F1", "113": "F2", "114": "F3", "115": "F4", "116": "F5", "117": "F6", "118": "F7", "119": "F8", "120": "F9", "121": "F10", "122": "F11", "123": "F12", "144": "NumLock", "145": "ScrollLock", "224": "Meta" };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key2 = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key2 !== "Unidentified") {
                return key2;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign({}, MouseEventInterface, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign({}, UIEventInterface, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: getEventModifierState });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign({}, EventInterface, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({ event, listeners });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({ event, listeners });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target2) {
            enqueueStateRestore(target2);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target2);
              dispatchQueue.push({ event, listeners });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target2, targetInst) {
            activeElement = target2;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target2, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target2, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x2, y2) {
            return x2 === y2 && (x2 !== 0 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              var currentKey = keysA[i];
              if (!hasOwnProperty2.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset2) {
            var node = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset2 && nodeEnd >= offset2) {
                  return { node, offset: offset2 - nodeStart };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return { start, end };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range2 = doc.createRange();
              range2.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range2);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range2.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range2);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return { focusedElem, selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({ element: ancestor, left: ancestor.scrollLeft, top: ancestor.scrollTop });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info2 = ancestors[i];
                info2.element.scrollLeft = info2.left;
                info2.element.scrollTop = info2.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = { start: input.selectionStart, end: input.selectionEnd };
            } else {
              selection = getOffsets(input);
            }
            return selection || { start: 0, end: 0 };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return { start: node.selectionStart, end: node.selectionEnd };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return { anchorNode: selection.anchorNode, anchorOffset: selection.anchorOffset, focusNode: selection.focusNode, focusOffset: selection.focusOffset };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({ event, listeners });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = { animationend: makePrefixMap("Animation", "AnimationEnd"), animationiteration: makePrefixMap("Animation", "AnimationIteration"), animationstart: makePrefixMap("Animation", "AnimationStart"), transitionend: makePrefixMap("Transition", "TransitionEnd") };
          var prefixedEventNames = {};
          var style2 = {};
          if (canUseDOM) {
            style2 = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style2) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i = 0; i < simpleEventPluginEvents.length; i++) {
              var eventName = simpleEventPluginEvents[i];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({ event: _event, listeners: _listeners });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target2) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target2, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return { instance, listener, currentTarget };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target2, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target2;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({ event, listeners });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture2) {
            return domEventName + "__" + (capture2 ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, { registrationNameDependencies, possibleRegistrationNames });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name2) {
                names.push(name2);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html2) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html2;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup2) {
            {
              checkHtmlStringCoercion(markup2);
            }
            var markupString = typeof markup2 === "string" ? markup2 : "" + markup2;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop2() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop2;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div2 = ownerDocument.createElement("div");
                div2.innerHTML = "<script></script>";
                var firstChild = div2.firstChild;
                domElement = div2.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, { is: props.is });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty2.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes2 = domElement.attributes;
              for (var _i = 0; _i < attributes2.length; _i++) {
                var name2 = attributes2[_i].name.toLowerCase();
                switch (name2) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes2[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = { current: null, formTag: null, aTagInScope: null, buttonTagInScope: null, nobrTagInScope: null, pTagInButtonScope: null, listItemTagAutoclosing: null, dlItemTagAutoclosing: null };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
              var info2 = { tag };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info2;
              if (tag === "form") {
                ancestorInfo.formTag = info2;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info2;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info2;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info2;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info2;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info2;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info2;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info2 = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info2 += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info2);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return { namespace, ancestorInfo };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return { namespace, ancestorInfo };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node.nextSibling;
              parentInstance.removeChild(node);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data2 = nextNode.data;
                if (data2 === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_PENDING_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node = nextNode;
            } while (node);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style3 = instance.style;
            if (typeof style3.setProperty === "function") {
              style3.setProperty("display", "none", "important");
            } else {
              style3.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return { message, digest, stack };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data2 = node.data;
                if (data2 === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA || data2 === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data2 = node.data;
                if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA || data2 === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data2 === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node) {
            delete node[internalInstanceKey];
            delete node[internalPropsKey];
            delete node[internalEventHandlersKey];
            delete node[internalEventHandlerListenersKey];
            delete node[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has3 = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has3(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index2 = -1;
          function createCursor(defaultValue) {
            return { current: defaultValue };
          }
          function pop(cursor, fiber) {
            if (index2 < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index2]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index2];
            valueStack[index2] = null;
            {
              fiberStack[index2] = null;
            }
            index2--;
          }
          function push(cursor, value, fiber) {
            index2++;
            valueStack[index2] = cursor.current;
            {
              fiberStack[index2] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key2 in contextTypes) {
                context[key2] = unmaskedContext[key2];
              }
              {
                var name2 = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name2);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name2 = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name2);
              }
              return assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component = node.type;
                    if (isContextProvider(Component)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index3) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index3 + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number2) {
            return 32 - clz32(number2);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return { id: treeContextId, overflow: treeContextOverflow };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = { dehydrated: suspenseInstance, treeContext: getSuspendedTreeContext(), retryLane: OffscreenLane };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = { recordUnsafeLifecycleWarnings: function(fiber, instance) {
          }, flushPendingUnsafeLifecycleWarnings: function() {
          }, recordLegacyContextWarning: function(fiber, instance) {
          }, flushLegacyContextWarning: function() {
          }, discardPendingWarnings: function() {
          } };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictLegacyMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = assign({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node === propagationRoot) {
                break;
              }
              node = node.return;
            }
            {
              if (node !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context)
              ;
            else {
              var contextItem = { context, memoizedValue: value, next: null };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = { lanes: NoLanes, firstContext: contextItem };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i = 0; i < concurrentQueues.length; i++) {
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root2 = node.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = { baseState: fiber.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: NoLanes }, effects: null };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = { baseState: currentQueue.baseState, firstBaseUpdate: currentQueue.firstBaseUpdate, lastBaseUpdate: currentQueue.lastBaseUpdate, shared: currentQueue.shared, effects: currentQueue.effects };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = { eventTime, lane, tag: UpdateState, payload: null, callback: null, next: null };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root2, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = { eventTime: update.eventTime, lane: update.lane, tag: update.tag, payload: update.payload, callback: update.callback, next: null };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = { baseState: currentQueue.baseState, firstBaseUpdate: newFirst, lastBaseUpdate: newLast, shared: currentQueue.shared, effects: currentQueue.effects };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = { eventTime: updateEventTime, lane: updateLane, tag: update.tag, payload: update.payload, callback: update.callback, next: null };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React2.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key2 = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key2)) {
                didWarnOnInvalidCallback.add(key2);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", { enumerable: false, value: function() {
              throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
            } });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = { isMounted, enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "setState");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }, enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }, enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markForceUpdateScheduled(fiber, lane);
            }
          } };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name2 = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name2);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name2);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name2);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name2);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name2);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name2);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name2);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name2);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name2);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name2);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name2);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name2);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name2);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name2, name2);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name2, name2);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name2);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name2);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name2);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name2);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name2);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key2) {
              if (current2 === null || current2.tag !== Fragment) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key2);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key2 = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key2 !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key2) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key2) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key2 !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key2 = child.key;
                    if (typeof key2 !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key2);
                      break;
                    }
                    if (!knownKeys.has(key2)) {
                      knownKeys.add(key2);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key2);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key2 = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key2) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key2 = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key2) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = { memoizedState: currentHook.memoizedState, baseState: currentHook.baseState, baseQueue: currentHook.baseQueue, queue: currentHook.queue, next: null };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return { lastEffect: null, stores: null };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = { pending: null, interleaved: null, lanes: NoLanes, dispatch: null, lastRenderedReducer: reducer, lastRenderedState: initialState };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = { lane: updateLane, action: update.action, hasEagerState: update.hasEagerState, eagerState: update.eagerState, next: null };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = { value: nextSnapshot, getSnapshot };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check2 = { getSnapshot, value: renderedSnapshot };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check2];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check2];
              } else {
                stores.push(check2);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = { pending: null, interleaved: null, lanes: NoLanes, dispatch: null, lastRenderedReducer: basicStateReducer, lastRenderedState: initialState };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create2, destroy, deps) {
            var effect = {
              tag,
              create: create2,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = { current: initialValue };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create2, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create2, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create2, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create2, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create2, destroy, nextDeps);
          }
          function mountEffect(create2, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create2, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create2, deps);
            }
          }
          function updateEffect(create2, deps) {
            return updateEffectImpl(Passive, Passive$1, create2, deps);
          }
          function mountInsertionEffect(create2, deps) {
            return mountEffectImpl(Update, Insertion, create2, deps);
          }
          function updateInsertionEffect(create2, deps) {
            return updateEffectImpl(Update, Insertion, create2, deps);
          }
          function mountLayoutEffect(create2, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create2, deps);
          }
          function updateLayoutEffect(create2, deps) {
            return updateEffectImpl(Update, Layout, create2, deps);
          }
          function imperativeHandleEffect(create2, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create2();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create2();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create2, deps) {
            {
              if (typeof create2 !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create2, deps) {
            {
              if (typeof create2 !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root2 = getWorkInProgressRoot();
            var identifierPrefix = root2.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = { lane, action, hasEagerState: false, eagerState: null, next: null };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = { lane, action, hasEagerState: false, eagerState: null, next: null };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root2, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = { readContext, useCallback: throwInvalidHookError, useContext: throwInvalidHookError, useEffect: throwInvalidHookError, useImperativeHandle: throwInvalidHookError, useInsertionEffect: throwInvalidHookError, useLayoutEffect: throwInvalidHookError, useMemo: throwInvalidHookError, useReducer: throwInvalidHookError, useRef: throwInvalidHookError, useState: throwInvalidHookError, useDebugValue: throwInvalidHookError, useDeferredValue: throwInvalidHookError, useTransition: throwInvalidHookError, useMutableSource: throwInvalidHookError, useSyncExternalStore: throwInvalidHookError, useId: throwInvalidHookError, unstable_isNewReconciler: enableNewReconciler };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = { readContext: function(context) {
              return readContext(context);
            }, useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            }, useContext: function(context) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context);
            }, useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create2, deps);
            }, useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create2, deps);
            }, useInsertionEffect: function(create2, deps) {
              currentHookNameInDev = "useInsertionEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountInsertionEffect(create2, deps);
            }, useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create2, deps);
            }, useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }, useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }, useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            }, useState: function(initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }, useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            }, useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value);
            }, useTransition: function() {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition();
            }, useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              mountHookTypesDev();
              return mountMutableSource();
            }, useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            }, useId: function() {
              currentHookNameInDev = "useId";
              mountHookTypesDev();
              return mountId();
            }, unstable_isNewReconciler: enableNewReconciler };
            HooksDispatcherOnMountWithHookTypesInDEV = { readContext: function(context) {
              return readContext(context);
            }, useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            }, useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            }, useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create2, deps);
            }, useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref, create2, deps);
            }, useInsertionEffect: function(create2, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return mountInsertionEffect(create2, deps);
            }, useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create2, deps);
            }, useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }, useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }, useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            }, useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }, useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            }, useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value);
            }, useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition();
            }, useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return mountMutableSource();
            }, useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            }, useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return mountId();
            }, unstable_isNewReconciler: enableNewReconciler };
            HooksDispatcherOnUpdateInDEV = { readContext: function(context) {
              return readContext(context);
            }, useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            }, useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            }, useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create2, deps);
            }, useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create2, deps);
            }, useInsertionEffect: function(create2, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create2, deps);
            }, useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create2, deps);
            }, useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }, useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }, useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            }, useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }, useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            }, useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value);
            }, useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition();
            }, useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            }, useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            }, useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            }, unstable_isNewReconciler: enableNewReconciler };
            HooksDispatcherOnRerenderInDEV = { readContext: function(context) {
              return readContext(context);
            }, useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            }, useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            }, useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create2, deps);
            }, useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create2, deps);
            }, useInsertionEffect: function(create2, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create2, deps);
            }, useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create2, deps);
            }, useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }, useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }, useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            }, useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }, useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            }, useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            }, useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition();
            }, useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            }, useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            }, useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            }, unstable_isNewReconciler: enableNewReconciler };
            InvalidNestedHooksDispatcherOnMountInDEV = { readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            }, useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            }, useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context);
            }, useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create2, deps);
            }, useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create2, deps);
            }, useInsertionEffect: function(create2, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountInsertionEffect(create2, deps);
            }, useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create2, deps);
            }, useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }, useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }, useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            }, useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }, useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            }, useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value);
            }, useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition();
            }, useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountMutableSource();
            }, useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            }, useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountId();
            }, unstable_isNewReconciler: enableNewReconciler };
            InvalidNestedHooksDispatcherOnUpdateInDEV = { readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            }, useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            }, useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            }, useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create2, deps);
            }, useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create2, deps);
            }, useInsertionEffect: function(create2, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create2, deps);
            }, useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create2, deps);
            }, useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }, useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }, useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            }, useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }, useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            }, useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value);
            }, useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition();
            }, useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            }, useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            }, useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            }, unstable_isNewReconciler: enableNewReconciler };
            InvalidNestedHooksDispatcherOnRerenderInDEV = { readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            }, useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            }, useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            }, useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create2, deps);
            }, useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create2, deps);
            }, useInsertionEffect: function(create2, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create2, deps);
            }, useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create2, deps);
            }, useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }, useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }, useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            }, useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }, useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            }, useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            }, useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition();
            }, useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            }, useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            }, useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            }, unstable_isNewReconciler: enableNewReconciler };
          }
          var now$1 = Scheduler2.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    root2.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    if (root2 !== null) {
                      root2.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValueAtFiber(value, source) {
            return { value, source, stack: getStackByFiberInDevAndProd(source), digest: null };
          }
          function createCapturedValue(value, digest, stack) {
            return { value, source: null, stack: stack != null ? stack : null, digest: digest != null ? digest : null };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = { element: null };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, { componentStack: stack !== null ? stack : "" });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root2, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node = returnFiber;
            do {
              if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
                return node;
              }
              node = node.return;
            } while (node !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root2, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var render2 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component.type;
              if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x2) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = { baseLanes: NoLanes, cachePool: null, transitions: null };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = { baseLanes: nextBaseLanes, cachePool: spawnedCachePool, transitions: null };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = { baseLanes: NoLanes, cachePool: null, transitions: null };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = { element: nextChildren, isDehydrated: false, cache: nextState.cache, pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries, transitions: nextState.transitions };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node = child;
                while (node) {
                  node.flags = node.flags & ~Placement | Hydrating;
                  node = node.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component,
                  resolveDefaultProps(Component.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info2 = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info2 += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info2);
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = { dehydrated: null, treeContext: null, retryLane: NoLane };
          function mountSuspenseOffscreenState(renderLanes2) {
            return { baseLanes: renderLanes2, cachePool: getSuspendedCache(), transitions: null };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return { baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2), cachePool, transitions: prevOffscreenState.transitions };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = { mode: "visible", children: primaryChildren };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = { mode: "hidden", children: primaryChildren };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, { mode: "visible", children: primaryChildren });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = { mode: "hidden", children: primaryChildren };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = { mode: "visible", children: primaryChildren };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root2 = getWorkInProgressRoot();
                if (root2 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index3) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index3, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = { isBackwards, rendering: null, renderingStartTime: 0, last: lastContentRow, tail, tailMode };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden2) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root2, firstChild) {
            prepareForCommit();
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create2 = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create2();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root2 = parentFiber.stateNode;
                              root2.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node) {
            switch (node.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                  } finally {
                    recordLayoutEffectDuration(node);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node, node.return, instance);
                }
                safelyAttachRef(node, node.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node, node.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden2) {
            var hostSubtreeRoot = null;
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                      var instance = node.stateNode;
                      if (isHidden2) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node.stateNode, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node.stateNode;
                      if (isHidden2) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node) {
                    hostSubtreeRoot = null;
                  }
                  node = node.return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root2, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent:
                while (parent !== null) {
                  switch (parent.tag) {
                    case HostComponent: {
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent = parent.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root2, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root2);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                try {
                  commitDeletionEffects(root2, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root2);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root2.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden2 = newState !== null;
                  offscreenInstance.isHidden = isHidden2;
                  if (isHidden2) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root2, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root2, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden2 = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden2 || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root2,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden2 = fiber.memoizedState !== null;
                  if (isHidden2) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden2 = fiber.memoizedState !== null;
                if (isHidden2) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i = 0; i < deletions.length; i++) {
                    var fiberToDelete = deletions[i];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            symbolFor("selector.component");
            symbolFor("selector.has_pseudo_class");
            symbolFor("selector.role");
            symbolFor("selector.test_id");
            symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root2, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root2, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root2 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root2, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
            var current2 = root2.current;
            current2.lanes = lane;
            markRootUpdated(root2, lane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root2.callbackNode = null;
              root2.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root2.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root2.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root2, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root2, lanes);
                var finishedWork = root2.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root2, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root2, NoLanes);
                    markRootSuspended$1(root2, lanes);
                    ensureRootIsScheduled(root2, now());
                    throw _fatalError;
                  }
                }
                root2.finishedWork = finishedWork;
                root2.finishedLanes = lanes;
                finishConcurrentRender(root2, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function recoverFromConcurrentError(root2, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root2)) {
              var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root2.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root2, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node = finishedWork;
            while (true) {
              if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                  var checks2 = updateQueue.stores;
                  if (checks2 !== null) {
                    for (var i = 0; i < checks2.length; i++) {
                      var check2 = checks2[i];
                      var getSnapshot = check2.getSnapshot;
                      var renderedValue = check2.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node.child;
              if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
              }
              if (node === finishedWork) {
                return true;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return true;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root2, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root2, now());
              return null;
            }
            var exitStatus = renderRootSync(root2, lanes);
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushRoot(root2, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root2, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root2, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a, b2, c, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a, b2, c, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            var rootWorkInProgress = createWorkInProgress(root2.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root2, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (finishedWork === root2.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              commitBeforeMutationEffects(root2, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root2, finishedWork, lanes);
              resetAfterCommit();
              root2.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root2, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root2.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root2.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root2.onRecoverableError;
              for (var i = 0; i < recoverableErrors.length; i++) {
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, { componentStack, digest });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root2.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root2.current);
            commitPassiveMountEffects(root2, root2.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i = 0; i < profilerEffects.length; i++) {
                var _fiber = profilerEffects[i];
                commitPassiveEffectDurations(root2, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root2.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root2 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root2;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root2);
            {
              var stateNode = root2.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root2 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root2 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root2, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root2, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
            {
              if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = { $$typeof: REACT_FORWARD_REF_TYPE, render: currentRender };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types2 = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types2, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types2, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types2.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types2, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types2, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key2, mode) {
            this.tag = tag;
            this.key = key2;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key2, mode) {
            return new FiberNode(tag, pendingProps, key2, mode);
          };
          function shouldConstruct$1(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : { lanes: currentDependencies.lanes, firstContext: currentDependencies.firstContext };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : { lanes: currentDependencies.lanes, firstContext: currentDependencies.firstContext };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key2, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key2);
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictLegacyMode;
                    if ((mode & ConcurrentMode) !== NoMode) {
                      mode |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key2);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key2);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key2);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key2);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info2 = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info2 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info2 += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info2));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key2, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key2 = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key2, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key2) {
            var fiber = createFiber(Fragment, elements, key2, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key2) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key2, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = { effectDuration: 0, passiveEffectDuration: 0 };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key2) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key2, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key2) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key2, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key2) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key2, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = { isHidden: false };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target2, source) {
            if (target2 === null) {
              target2 = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target2.tag = source.tag;
            target2.key = source.key;
            target2.elementType = source.elementType;
            target2.type = source.type;
            target2.stateNode = source.stateNode;
            target2.return = source.return;
            target2.child = source.child;
            target2.sibling = source.sibling;
            target2.index = source.index;
            target2.ref = source.ref;
            target2.pendingProps = source.pendingProps;
            target2.memoizedProps = source.memoizedProps;
            target2.updateQueue = source.updateQueue;
            target2.memoizedState = source.memoizedState;
            target2.dependencies = source.dependencies;
            target2.mode = source.mode;
            target2.flags = source.flags;
            target2.subtreeFlags = source.subtreeFlags;
            target2.deletions = source.deletions;
            target2.lanes = source.lanes;
            target2.childLanes = source.childLanes;
            target2.alternate = source.alternate;
            {
              target2.actualDuration = source.actualDuration;
              target2.actualStartTime = source.actualStartTime;
              target2.selfBaseDuration = source.selfBaseDuration;
              target2.treeBaseDuration = source.treeBaseDuration;
            }
            target2._debugSource = source._debugSource;
            target2._debugOwner = source._debugOwner;
            target2._debugNeedsRemount = source._debugNeedsRemount;
            target2._debugHookTypes = source._debugHookTypes;
            return target2;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          var ReactVersion = "18.2.0";
          function createPortal(children, containerInfo, implementation) {
            var key2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key2);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key2 == null ? null : "" + key2,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root2.context = getContextForSubtree(null);
            var current2 = root2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root2, lane, eventTime);
            return root2;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = { element };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(current$1, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
              entangleTransitions(root2, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root2 = fiber.stateNode;
                if (isRootDehydrated(root2)) {
                  var lanes = getHighestPriorityPendingLanes(root2);
                  flushRoot(root2, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root3 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index3) {
              var key2 = path[index3];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index3 + 1 === path.length) {
                if (isArray(updated)) {
                  updated.splice(key2, 1);
                } else {
                  delete updated[key2];
                }
                return updated;
              }
              updated[key2] = copyWithDeleteImpl(obj[key2], path, index3 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index3) {
              var oldKey = oldPath[index3];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index3 + 1 === oldPath.length) {
                var newKey = newPath[index3];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index3 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index3, value) {
              if (index3 >= path.length) {
                return value;
              }
              var key2 = path[index3];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              updated[key2] = copyWithSetImpl(obj[key2], path, index3 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            if (root2 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            if (root2 !== null) {
              this._internalRoot = null;
              var container = root2.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root2, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root2);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target2) {
            if (target2) {
              queueExplicitHydrationTarget(target2);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root2);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              var root2 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root2;
              markContainerAsRoot(root2.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root2;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root2;
            if (!maybeRoot) {
              root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root2 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root2, parentComponent, callback);
            }
            return getPublicRootInstance(root2);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has2(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children, container) {
            var key2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal(children, container, null, key2);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn);
          }
          var foundDevTools = injectIntoDevTools({ findFiberByHostInstance: getClosestInstanceFromNode, bundleType: 1, version: ReactVersion, rendererPackageName: "react-dom" });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          reactDom_development.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          reactDom_development.createPortal = createPortal$1;
          reactDom_development.createRoot = createRoot$1;
          reactDom_development.findDOMNode = findDOMNode;
          reactDom_development.flushSync = flushSync$1;
          reactDom_development.hydrate = hydrate;
          reactDom_development.hydrateRoot = hydrateRoot$1;
          reactDom_development.render = render;
          reactDom_development.unmountComponentAtNode = unmountComponentAtNode;
          reactDom_development.unstable_batchedUpdates = batchedUpdates$1;
          reactDom_development.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          reactDom_development.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
      return reactDom_development;
    }
    function checkDCE() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
        return;
      }
      if (process.env.NODE_ENV !== "production") {
        throw new Error("^_^");
      }
      try {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
      } catch (err) {
        console.error(err);
      }
    }
    if (process.env.NODE_ENV === "production") {
      checkDCE();
      reactDom.exports = requireReactDom_production_min();
    } else {
      reactDom.exports = requireReactDom_development();
    }
    var reactDomExports = reactDom.exports;
    var arrow = (options) => {
      const { element, padding } = options;
      function isRef(value) {
        return Object.prototype.hasOwnProperty.call(value, "current");
      }
      return { name: "arrow", options, fn(args) {
        if (isRef(element)) {
          if (element.current != null) {
            return arrow$1({ element: element.current, padding }).fn(args);
          }
          return {};
        } else if (element) {
          return arrow$1({ element, padding }).fn(args);
        }
        return {};
      } };
    };
    var index = typeof document !== "undefined" ? React$2.useLayoutEffect : React$2.useEffect;
    function deepEqual(a, b2) {
      if (a === b2) {
        return true;
      }
      if (typeof a !== typeof b2) {
        return false;
      }
      if (typeof a === "function" && a.toString() === b2.toString()) {
        return true;
      }
      let length, i, keys;
      if (a && b2 && typeof a == "object") {
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b2.length)
            return false;
          for (i = length; i-- !== 0; ) {
            if (!deepEqual(a[i], b2[i])) {
              return false;
            }
          }
          return true;
        }
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b2).length) {
          return false;
        }
        for (i = length; i-- !== 0; ) {
          if (!Object.prototype.hasOwnProperty.call(b2, keys[i])) {
            return false;
          }
        }
        for (i = length; i-- !== 0; ) {
          const key2 = keys[i];
          if (key2 === "_owner" && a.$$typeof) {
            continue;
          }
          if (!deepEqual(a[key2], b2[key2])) {
            return false;
          }
        }
        return true;
      }
      return a !== a && b2 !== b2;
    }
    function useLatestRef(value) {
      const ref = React__namespace.useRef(value);
      index(() => {
        ref.current = value;
      });
      return ref;
    }
    function useFloating(_temp) {
      let { middleware = [], placement = "bottom", strategy = "absolute", whileElementsMounted, open } = _temp === void 0 ? {} : _temp;
      const [data2, setData] = React__namespace.useState({ x: null, y: null, strategy, placement, middlewareData: {}, isPositioned: false });
      const [latestMiddleware, setLatestMiddleware] = React__namespace.useState(middleware);
      if (!deepEqual(latestMiddleware, middleware)) {
        setLatestMiddleware(middleware);
      }
      const reference = React__namespace.useRef(null);
      const floating = React__namespace.useRef(null);
      const cleanupRef = React__namespace.useRef(null);
      const dataRef = React__namespace.useRef(data2);
      const whileElementsMountedRef = useLatestRef(whileElementsMounted);
      const update = React__namespace.useCallback(() => {
        if (!reference.current || !floating.current) {
          return;
        }
        computePosition(reference.current, floating.current, { middleware: latestMiddleware, placement, strategy }).then((data3) => {
          const value = { ...data3, isPositioned: true };
          if (isMountedRef.current && !deepEqual(dataRef.current, value)) {
            dataRef.current = value;
            reactDomExports.flushSync(() => {
              setData(value);
            });
          }
        });
      }, [latestMiddleware, placement, strategy]);
      index(() => {
        if (open === false && dataRef.current.isPositioned) {
          setData((data3) => ({ ...data3, isPositioned: false }));
        }
      }, [open]);
      const isMountedRef = React__namespace.useRef(false);
      index(() => {
        isMountedRef.current = true;
        return () => {
          isMountedRef.current = false;
        };
      }, []);
      const runElementMountCallback = React__namespace.useCallback(() => {
        if (typeof cleanupRef.current === "function") {
          cleanupRef.current();
          cleanupRef.current = null;
        }
        if (reference.current && floating.current) {
          if (whileElementsMountedRef.current) {
            const cleanupFn = whileElementsMountedRef.current(reference.current, floating.current, update);
            cleanupRef.current = cleanupFn;
          } else {
            update();
          }
        }
      }, [update, whileElementsMountedRef]);
      const setReference = React__namespace.useCallback((node) => {
        if (reference.current !== node) {
          reference.current = node;
          runElementMountCallback();
        }
      }, [runElementMountCallback]);
      const setFloating = React__namespace.useCallback((node) => {
        if (floating.current !== node) {
          floating.current = node;
          runElementMountCallback();
        }
      }, [runElementMountCallback]);
      const refs = React__namespace.useMemo(() => ({ reference, floating }), []);
      return React__namespace.useMemo(() => ({ ...data2, update, refs, reference: setReference, floating: setFloating }), [data2, update, refs, setReference, setFloating]);
    }
    var _templateObject;
    var _templateObject2;
    var _templateObject3;
    var _templateObject4;
    var _templateObject5;
    var _templateObject6;
    var _templateObject7;
    var _templateObject8;
    var _templateObject9;
    var _templateObject10;
    var _templateObject11;
    var _templateObject12;
    var _templateObject13;
    var _templateObject14;
    var _templateObject15;
    var _templateObject16;
    var _templateObject17;
    var _templateObject18;
    var _templateObject19;
    var _templateObject20;
    var _templateObject21;
    var _templateObject22;
    var _templateObject23;
    var _templateObject24;
    var _templateObject25;
    var _templateObject26;
    var _templateObject27;
    var _templateObject28;
    var _templateObject29;
    var _templateObject30;
    var _templateObject31;
    var _templateObject32;
    var _templateObject33;
    var _templateObject34;
    var _templateObject35;
    var _templateObject36;
    var _templateObject37;
    var _templateObject38;
    var _templateObject39;
    var _templateObject40;
    var _templateObject41;
    var _templateObject42;
    var _templateObject43;
    var _templateObject44;
    var _templateObject45;
    var _templateObject46;
    var _templateObject47;
    var _templateObject48;
    var _templateObject49;
    var _templateObject50;
    var _templateObject51;
    var _templateObject52;
    var _templateObject53;
    var _templateObject54;
    var _templateObject55;
    var _templateObject56;
    var _templateObject57;
    var _templateObject58;
    var _templateObject59;
    var _templateObject60;
    var _templateObject61;
    var _templateObject62;
    var _templateObject63;
    var _templateObject64;
    var _templateObject65;
    var _templateObject66;
    var _templateObject67;
    var _templateObject68;
    var _templateObject69;
    var _templateObject70;
    var _templateObject71;
    var _templateObject72;
    var _templateObject73;
    var _templateObject74;
    var _templateObject75;
    var _templateObject76;
    var _templateObject77;
    var _templateObject78;
    var _templateObject79;
    var _templateObject80;
    var _templateObject81;
    var _templateObject82;
    var _templateObject83;
    var _templateObject84;
    var _templateObject85;
    var _templateObject86;
    var _templateObject87;
    var _templateObject88;
    var _templateObject89;
    function _taggedTemplateLiteral(strings, raw) {
      if (!raw) {
        raw = strings.slice(0);
      }
      return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
    }
    var EMPTY_ARRAY = [];
    var EMPTY_RECORD = {};
    var FLOATING_STATIC_SIDES = { top: "bottom", right: "left", bottom: "top", left: "right" };
    function _fillCSSObject(keys, value) {
      return keys.reduce((style2, key2) => {
        style2[key2] = value;
        return style2;
      }, {});
    }
    function rem(pixelValue) {
      if (pixelValue === 0)
        return 0;
      return "".concat(pixelValue / 16, "rem");
    }
    function _responsive(media, values, callback) {
      const statements = (values == null ? void 0 : values.map(callback)) || [];
      return statements.map((statement, mediaIndex) => {
        if (mediaIndex === 0)
          return statement;
        return { ["@media screen and (min-width: ".concat(media[mediaIndex - 1], "px)")]: statement };
      });
    }
    function _getArrayProp(val, defaultVal) {
      if (val === void 0)
        return defaultVal || EMPTY_ARRAY;
      return Array.isArray(val) ? val : [val];
    }
    function _getResponsiveSpace(theme, props) {
      let spaceIndexes = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : EMPTY_ARRAY;
      if (!Array.isArray(spaceIndexes)) {
        throw new Error("the property must be array of numbers");
      }
      if (spaceIndexes.length === 0) {
        return null;
      }
      return _responsive(theme.sanity.media, spaceIndexes, (spaceIndex) => _fillCSSObject(props, rem(theme.sanity.space[spaceIndex])));
    }
    function responsiveFont(fontKey, props) {
      const { $size, $weight, theme } = props;
      const { fonts: fonts2, media } = theme.sanity;
      const { family, sizes, weights } = fonts2[fontKey];
      const fontWeight = $weight && weights[$weight] || weights.regular;
      const defaultSize = sizes[2];
      const base = { position: "relative", fontFamily: family, fontWeight, padding: "1px 0", margin: 0, "&:before": { content: '""', display: "block", height: 0 }, "&:after": { content: '""', display: "block", height: 0 }, "& > code, & > span": { display: "block" }, "&:not([hidden])": { display: "block" } };
      if (!$size) {
        if (!responsiveFont.warned) {
          console.warn("No size specified for responsive font", { fontKey, $size, props, base });
          responsiveFont.warned = true;
        }
        return [base];
      }
      const resp = _responsive(media, $size, (sizeIndex) => fontSize(sizes[sizeIndex] || defaultSize));
      return [base, ...resp];
    }
    function fontSize(size2) {
      const { ascenderHeight, descenderHeight, fontSize: fontSize2, iconSize, letterSpacing, lineHeight } = size2;
      const negHeight = ascenderHeight + descenderHeight;
      const capHeight = lineHeight - negHeight;
      const iconOffset = (capHeight - iconSize) / 2;
      const customIconSize = Math.floor(fontSize2 * 1.125 / 2) * 2 + 1;
      const customIconOffset = (capHeight - customIconSize) / 2;
      return { fontSize: rem(fontSize2), lineHeight: "calc(".concat(lineHeight, " / ").concat(fontSize2, ")"), letterSpacing: rem(letterSpacing), transform: "translateY(".concat(rem(descenderHeight), ")"), "&:before": { marginTop: "calc(".concat(rem(0 - negHeight), " - 1px)") }, "&:after": { marginBottom: "-1px" }, "& svg:not([data-sanity-icon])": { fontSize: "calc(".concat(customIconSize, " / 16 * 1rem)"), margin: rem(customIconOffset) }, "& [data-sanity-icon]": { fontSize: "calc(".concat(iconSize, " / 16 * 1rem)"), margin: rem(iconOffset) } };
    }
    function responsiveCodeFontStyle(props) {
      return responsiveFont("code", props);
    }
    function responsiveHeadingFont(props) {
      return responsiveFont("heading", props);
    }
    function responsiveLabelFont(props) {
      return responsiveFont("label", props);
    }
    function responsiveTextAlignStyle(props) {
      const { theme } = props;
      return _responsive(theme.sanity.media, props.$align, (textAlign) => {
        return { textAlign };
      });
    }
    function responsiveTextFont(props) {
      return responsiveFont("text", props);
    }
    function useArrayProp(val, defaultVal) {
      const __perf_hash__ = React$2.useMemo(() => JSON.stringify(val != null ? val : defaultVal), [defaultVal, val]);
      return React$2.useMemo(
        () => _getArrayProp(val, defaultVal),
        // Improve performance: Keep object identify for a given hash of the value
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [__perf_hash__]
      );
    }
    function _getElements(element, elementsArg) {
      const ret = [element];
      for (const el2 of elementsArg) {
        if (Array.isArray(el2)) {
          ret.push(...el2);
        } else {
          ret.push(el2);
        }
      }
      return ret.filter(Boolean);
    }
    function useClickOutside(listener) {
      let elementsArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : EMPTY_ARRAY;
      let boundaryElement = arguments.length > 2 ? arguments[2] : void 0;
      const [element, setElement] = React$2.useState(null);
      const [elements, setElements] = React$2.useState(() => _getElements(element, elementsArg));
      const elementsRef = React$2.useRef(elements);
      React$2.useEffect(() => {
        const prevElements = elementsRef.current;
        const nextElements = _getElements(element, elementsArg);
        if (prevElements.length !== nextElements.length) {
          setElements(nextElements);
          elementsRef.current = nextElements;
          return;
        }
        for (const el2 of prevElements) {
          if (!nextElements.includes(el2)) {
            setElements(nextElements);
            elementsRef.current = nextElements;
            return;
          }
        }
        for (const el2 of nextElements) {
          if (!prevElements.includes(el2)) {
            setElements(nextElements);
            elementsRef.current = nextElements;
            return;
          }
        }
      }, [element, elementsArg]);
      React$2.useEffect(() => {
        if (!listener)
          return void 0;
        const handleWindowMouseDown = (evt) => {
          const target2 = evt.target;
          if (!(target2 instanceof Node)) {
            return;
          }
          if (boundaryElement && !boundaryElement.contains(target2)) {
            return;
          }
          for (const el2 of elements) {
            if (target2 === el2 || el2.contains(target2)) {
              return;
            }
          }
          listener(evt);
        };
        window.addEventListener("mousedown", handleWindowMouseDown);
        return () => {
          window.removeEventListener("mousedown", handleWindowMouseDown);
        };
      }, [boundaryElement, listener, elements]);
      return setElement;
    }
    var resizeObservers = [];
    var hasActiveObservations = function() {
      return resizeObservers.some(function(ro) {
        return ro.activeTargets.length > 0;
      });
    };
    var hasSkippedObservations = function() {
      return resizeObservers.some(function(ro) {
        return ro.skippedTargets.length > 0;
      });
    };
    var msg = "ResizeObserver loop completed with undelivered notifications.";
    var deliverResizeLoopError = function() {
      var event;
      if (typeof ErrorEvent === "function") {
        event = new ErrorEvent("error", { message: msg });
      } else {
        event = document.createEvent("Event");
        event.initEvent("error", false, false);
        event.message = msg;
      }
      window.dispatchEvent(event);
    };
    var ResizeObserverBoxOptions;
    (function(ResizeObserverBoxOptions2) {
      ResizeObserverBoxOptions2["BORDER_BOX"] = "border-box";
      ResizeObserverBoxOptions2["CONTENT_BOX"] = "content-box";
      ResizeObserverBoxOptions2["DEVICE_PIXEL_CONTENT_BOX"] = "device-pixel-content-box";
    })(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));
    var freeze = function(obj) {
      return Object.freeze(obj);
    };
    var ResizeObserverSize = function() {
      function ResizeObserverSize2(inlineSize, blockSize) {
        this.inlineSize = inlineSize;
        this.blockSize = blockSize;
        freeze(this);
      }
      return ResizeObserverSize2;
    }();
    var DOMRectReadOnly = function() {
      function DOMRectReadOnly2(x2, y2, width, height) {
        this.x = x2;
        this.y = y2;
        this.width = width;
        this.height = height;
        this.top = this.y;
        this.left = this.x;
        this.bottom = this.top + this.height;
        this.right = this.left + this.width;
        return freeze(this);
      }
      DOMRectReadOnly2.prototype.toJSON = function() {
        var _a2 = this, x2 = _a2.x, y2 = _a2.y, top2 = _a2.top, right = _a2.right, bottom2 = _a2.bottom, left = _a2.left, width = _a2.width, height = _a2.height;
        return { x: x2, y: y2, top: top2, right, bottom: bottom2, left, width, height };
      };
      DOMRectReadOnly2.fromRect = function(rectangle) {
        return new DOMRectReadOnly2(rectangle.x, rectangle.y, rectangle.width, rectangle.height);
      };
      return DOMRectReadOnly2;
    }();
    var isSVG = function(target2) {
      return target2 instanceof SVGElement && "getBBox" in target2;
    };
    var isHidden = function(target2) {
      if (isSVG(target2)) {
        var _a2 = target2.getBBox(), width = _a2.width, height = _a2.height;
        return !width && !height;
      }
      var _b = target2, offsetWidth = _b.offsetWidth, offsetHeight = _b.offsetHeight;
      return !(offsetWidth || offsetHeight || target2.getClientRects().length);
    };
    var isElement = function(obj) {
      var _a2;
      if (obj instanceof Element) {
        return true;
      }
      var scope = (_a2 = obj === null || obj === void 0 ? void 0 : obj.ownerDocument) === null || _a2 === void 0 ? void 0 : _a2.defaultView;
      return !!(scope && obj instanceof scope.Element);
    };
    var isReplacedElement = function(target2) {
      switch (target2.tagName) {
        case "INPUT":
          if (target2.type !== "image") {
            break;
          }
        case "VIDEO":
        case "AUDIO":
        case "EMBED":
        case "OBJECT":
        case "CANVAS":
        case "IFRAME":
        case "IMG":
          return true;
      }
      return false;
    };
    var global$1 = typeof window !== "undefined" ? window : {};
    var cache = /* @__PURE__ */ new WeakMap();
    var scrollRegexp = /auto|scroll/;
    var verticalRegexp = /^tb|vertical/;
    var IE = /msie|trident/i.test(global$1.navigator && global$1.navigator.userAgent);
    var parseDimension = function(pixel) {
      return parseFloat(pixel || "0");
    };
    var size$1 = function(inlineSize, blockSize, switchSizes) {
      if (inlineSize === void 0) {
        inlineSize = 0;
      }
      if (blockSize === void 0) {
        blockSize = 0;
      }
      if (switchSizes === void 0) {
        switchSizes = false;
      }
      return new ResizeObserverSize((switchSizes ? blockSize : inlineSize) || 0, (switchSizes ? inlineSize : blockSize) || 0);
    };
    var zeroBoxes = freeze({ devicePixelContentBoxSize: size$1(), borderBoxSize: size$1(), contentBoxSize: size$1(), contentRect: new DOMRectReadOnly(0, 0, 0, 0) });
    var calculateBoxSizes = function(target2, forceRecalculation) {
      if (forceRecalculation === void 0) {
        forceRecalculation = false;
      }
      if (cache.has(target2) && !forceRecalculation) {
        return cache.get(target2);
      }
      if (isHidden(target2)) {
        cache.set(target2, zeroBoxes);
        return zeroBoxes;
      }
      var cs = getComputedStyle(target2);
      var svg = isSVG(target2) && target2.ownerSVGElement && target2.getBBox();
      var removePadding = !IE && cs.boxSizing === "border-box";
      var switchSizes = verticalRegexp.test(cs.writingMode || "");
      var canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || "");
      var canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || "");
      var paddingTop = svg ? 0 : parseDimension(cs.paddingTop);
      var paddingRight = svg ? 0 : parseDimension(cs.paddingRight);
      var paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);
      var paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);
      var borderTop2 = svg ? 0 : parseDimension(cs.borderTopWidth);
      var borderRight2 = svg ? 0 : parseDimension(cs.borderRightWidth);
      var borderBottom2 = svg ? 0 : parseDimension(cs.borderBottomWidth);
      var borderLeft2 = svg ? 0 : parseDimension(cs.borderLeftWidth);
      var horizontalPadding = paddingLeft + paddingRight;
      var verticalPadding = paddingTop + paddingBottom;
      var horizontalBorderArea = borderLeft2 + borderRight2;
      var verticalBorderArea = borderTop2 + borderBottom2;
      var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target2.offsetHeight - verticalBorderArea - target2.clientHeight;
      var verticalScrollbarThickness = !canScrollVertically ? 0 : target2.offsetWidth - horizontalBorderArea - target2.clientWidth;
      var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;
      var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;
      var contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;
      var contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;
      var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;
      var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;
      var boxes = freeze({ devicePixelContentBoxSize: size$1(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes), borderBoxSize: size$1(borderBoxWidth, borderBoxHeight, switchSizes), contentBoxSize: size$1(contentWidth, contentHeight, switchSizes), contentRect: new DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight) });
      cache.set(target2, boxes);
      return boxes;
    };
    var calculateBoxSize = function(target2, observedBox, forceRecalculation) {
      var _a2 = calculateBoxSizes(target2, forceRecalculation), borderBoxSize = _a2.borderBoxSize, contentBoxSize = _a2.contentBoxSize, devicePixelContentBoxSize = _a2.devicePixelContentBoxSize;
      switch (observedBox) {
        case ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:
          return devicePixelContentBoxSize;
        case ResizeObserverBoxOptions.BORDER_BOX:
          return borderBoxSize;
        default:
          return contentBoxSize;
      }
    };
    var ResizeObserverEntry = function() {
      function ResizeObserverEntry2(target2) {
        var boxes = calculateBoxSizes(target2);
        this.target = target2;
        this.contentRect = boxes.contentRect;
        this.borderBoxSize = freeze([boxes.borderBoxSize]);
        this.contentBoxSize = freeze([boxes.contentBoxSize]);
        this.devicePixelContentBoxSize = freeze([boxes.devicePixelContentBoxSize]);
      }
      return ResizeObserverEntry2;
    }();
    var calculateDepthForNode = function(node) {
      if (isHidden(node)) {
        return Infinity;
      }
      var depth = 0;
      var parent = node.parentNode;
      while (parent) {
        depth += 1;
        parent = parent.parentNode;
      }
      return depth;
    };
    var broadcastActiveObservations = function() {
      var shallowestDepth = Infinity;
      var callbacks2 = [];
      resizeObservers.forEach(function processObserver(ro) {
        if (ro.activeTargets.length === 0) {
          return;
        }
        var entries = [];
        ro.activeTargets.forEach(function processTarget(ot) {
          var entry = new ResizeObserverEntry(ot.target);
          var targetDepth = calculateDepthForNode(ot.target);
          entries.push(entry);
          ot.lastReportedSize = calculateBoxSize(ot.target, ot.observedBox);
          if (targetDepth < shallowestDepth) {
            shallowestDepth = targetDepth;
          }
        });
        callbacks2.push(function resizeObserverCallback() {
          ro.callback.call(ro.observer, entries, ro.observer);
        });
        ro.activeTargets.splice(0, ro.activeTargets.length);
      });
      for (var _i = 0, callbacks_1 = callbacks2; _i < callbacks_1.length; _i++) {
        var callback = callbacks_1[_i];
        callback();
      }
      return shallowestDepth;
    };
    var gatherActiveObservationsAtDepth = function(depth) {
      resizeObservers.forEach(function processObserver(ro) {
        ro.activeTargets.splice(0, ro.activeTargets.length);
        ro.skippedTargets.splice(0, ro.skippedTargets.length);
        ro.observationTargets.forEach(function processTarget(ot) {
          if (ot.isActive()) {
            if (calculateDepthForNode(ot.target) > depth) {
              ro.activeTargets.push(ot);
            } else {
              ro.skippedTargets.push(ot);
            }
          }
        });
      });
    };
    var process$1 = function() {
      var depth = 0;
      gatherActiveObservationsAtDepth(depth);
      while (hasActiveObservations()) {
        depth = broadcastActiveObservations();
        gatherActiveObservationsAtDepth(depth);
      }
      if (hasSkippedObservations()) {
        deliverResizeLoopError();
      }
      return depth > 0;
    };
    var trigger;
    var callbacks = [];
    var notify = function() {
      return callbacks.splice(0).forEach(function(cb) {
        return cb();
      });
    };
    var queueMicroTask = function(callback) {
      if (!trigger) {
        var toggle_1 = 0;
        var el_1 = document.createTextNode("");
        var config = { characterData: true };
        new MutationObserver(function() {
          return notify();
        }).observe(el_1, config);
        trigger = function() {
          el_1.textContent = "".concat(toggle_1 ? toggle_1-- : toggle_1++);
        };
      }
      callbacks.push(callback);
      trigger();
    };
    var queueResizeObserver = function(cb) {
      queueMicroTask(function ResizeObserver2() {
        requestAnimationFrame(cb);
      });
    };
    var watching = 0;
    var isWatching = function() {
      return !!watching;
    };
    var CATCH_PERIOD = 250;
    var observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };
    var events = ["resize", "load", "transitionend", "animationend", "animationstart", "animationiteration", "keyup", "keydown", "mouseup", "mousedown", "mouseover", "mouseout", "blur", "focus"];
    var time = function(timeout) {
      if (timeout === void 0) {
        timeout = 0;
      }
      return Date.now() + timeout;
    };
    var scheduled = false;
    var Scheduler = function() {
      function Scheduler2() {
        var _this = this;
        this.stopped = true;
        this.listener = function() {
          return _this.schedule();
        };
      }
      Scheduler2.prototype.run = function(timeout) {
        var _this = this;
        if (timeout === void 0) {
          timeout = CATCH_PERIOD;
        }
        if (scheduled) {
          return;
        }
        scheduled = true;
        var until = time(timeout);
        queueResizeObserver(function() {
          var elementsHaveResized = false;
          try {
            elementsHaveResized = process$1();
          } finally {
            scheduled = false;
            timeout = until - time();
            if (!isWatching()) {
              return;
            }
            if (elementsHaveResized) {
              _this.run(1e3);
            } else if (timeout > 0) {
              _this.run(timeout);
            } else {
              _this.start();
            }
          }
        });
      };
      Scheduler2.prototype.schedule = function() {
        this.stop();
        this.run();
      };
      Scheduler2.prototype.observe = function() {
        var _this = this;
        var cb = function() {
          return _this.observer && _this.observer.observe(document.body, observerConfig);
        };
        document.body ? cb() : global$1.addEventListener("DOMContentLoaded", cb);
      };
      Scheduler2.prototype.start = function() {
        var _this = this;
        if (this.stopped) {
          this.stopped = false;
          this.observer = new MutationObserver(this.listener);
          this.observe();
          events.forEach(function(name2) {
            return global$1.addEventListener(name2, _this.listener, true);
          });
        }
      };
      Scheduler2.prototype.stop = function() {
        var _this = this;
        if (!this.stopped) {
          this.observer && this.observer.disconnect();
          events.forEach(function(name2) {
            return global$1.removeEventListener(name2, _this.listener, true);
          });
          this.stopped = true;
        }
      };
      return Scheduler2;
    }();
    var scheduler = new Scheduler();
    var updateCount = function(n) {
      !watching && n > 0 && scheduler.start();
      watching += n;
      !watching && scheduler.stop();
    };
    var skipNotifyOnElement = function(target2) {
      return !isSVG(target2) && !isReplacedElement(target2) && getComputedStyle(target2).display === "inline";
    };
    var ResizeObservation = function() {
      function ResizeObservation2(target2, observedBox) {
        this.target = target2;
        this.observedBox = observedBox || ResizeObserverBoxOptions.CONTENT_BOX;
        this.lastReportedSize = { inlineSize: 0, blockSize: 0 };
      }
      ResizeObservation2.prototype.isActive = function() {
        var size2 = calculateBoxSize(this.target, this.observedBox, true);
        if (skipNotifyOnElement(this.target)) {
          this.lastReportedSize = size2;
        }
        if (this.lastReportedSize.inlineSize !== size2.inlineSize || this.lastReportedSize.blockSize !== size2.blockSize) {
          return true;
        }
        return false;
      };
      return ResizeObservation2;
    }();
    var ResizeObserverDetail = function() {
      function ResizeObserverDetail2(resizeObserver, callback) {
        this.activeTargets = [];
        this.skippedTargets = [];
        this.observationTargets = [];
        this.observer = resizeObserver;
        this.callback = callback;
      }
      return ResizeObserverDetail2;
    }();
    var observerMap = /* @__PURE__ */ new WeakMap();
    var getObservationIndex = function(observationTargets, target2) {
      for (var i = 0; i < observationTargets.length; i += 1) {
        if (observationTargets[i].target === target2) {
          return i;
        }
      }
      return -1;
    };
    var ResizeObserverController = function() {
      function ResizeObserverController2() {
      }
      ResizeObserverController2.connect = function(resizeObserver, callback) {
        var detail = new ResizeObserverDetail(resizeObserver, callback);
        observerMap.set(resizeObserver, detail);
      };
      ResizeObserverController2.observe = function(resizeObserver, target2, options) {
        var detail = observerMap.get(resizeObserver);
        var firstObservation = detail.observationTargets.length === 0;
        if (getObservationIndex(detail.observationTargets, target2) < 0) {
          firstObservation && resizeObservers.push(detail);
          detail.observationTargets.push(new ResizeObservation(target2, options && options.box));
          updateCount(1);
          scheduler.schedule();
        }
      };
      ResizeObserverController2.unobserve = function(resizeObserver, target2) {
        var detail = observerMap.get(resizeObserver);
        var index2 = getObservationIndex(detail.observationTargets, target2);
        var lastObservation = detail.observationTargets.length === 1;
        if (index2 >= 0) {
          lastObservation && resizeObservers.splice(resizeObservers.indexOf(detail), 1);
          detail.observationTargets.splice(index2, 1);
          updateCount(-1);
        }
      };
      ResizeObserverController2.disconnect = function(resizeObserver) {
        var _this = this;
        var detail = observerMap.get(resizeObserver);
        detail.observationTargets.slice().forEach(function(ot) {
          return _this.unobserve(resizeObserver, ot.target);
        });
        detail.activeTargets.splice(0, detail.activeTargets.length);
      };
      return ResizeObserverController2;
    }();
    var ResizeObserver$1 = function() {
      function ResizeObserver2(callback) {
        if (arguments.length === 0) {
          throw new TypeError("Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.");
        }
        if (typeof callback !== "function") {
          throw new TypeError("Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.");
        }
        ResizeObserverController.connect(this, callback);
      }
      ResizeObserver2.prototype.observe = function(target2, options) {
        if (arguments.length === 0) {
          throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.");
        }
        if (!isElement(target2)) {
          throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element");
        }
        ResizeObserverController.observe(this, target2, options);
      };
      ResizeObserver2.prototype.unobserve = function(target2) {
        if (arguments.length === 0) {
          throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.");
        }
        if (!isElement(target2)) {
          throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element");
        }
        ResizeObserverController.unobserve(this, target2);
      };
      ResizeObserver2.prototype.disconnect = function() {
        ResizeObserverController.disconnect(this);
      };
      ResizeObserver2.toString = function() {
        return "function ResizeObserver () { [polyfill code] }";
      };
      return ResizeObserver2;
    }();
    var _ResizeObserver = typeof document !== "undefined" && typeof window !== "undefined" && window.ResizeObserver ? window.ResizeObserver : ResizeObserver$1;
    var _elementSizeObserver = _createElementSizeObserver();
    function _createElementRectValueListener() {
      return { subscribe(element, subscriber) {
        const resizeObserver = new _ResizeObserver((_ref) => {
          let [entry] = _ref;
          subscriber({ _contentRect: entry.contentRect, border: { width: entry.borderBoxSize[0].inlineSize, height: entry.borderBoxSize[0].blockSize }, content: { width: entry.contentRect.width, height: entry.contentRect.height } });
        });
        resizeObserver.observe(element);
        return () => {
          resizeObserver.unobserve(element);
          resizeObserver.disconnect();
        };
      } };
    }
    function _createElementSizeObserver() {
      const disposeCache = /* @__PURE__ */ new WeakMap();
      const subscribersCache = /* @__PURE__ */ new WeakMap();
      return { subscribe(element, subscriber) {
        const subscribers = subscribersCache.get(element) || [];
        let dispose = disposeCache.get(element);
        if (!subscribersCache.has(element)) {
          subscribersCache.set(element, subscribers);
          const listener = _createElementRectValueListener();
          dispose = listener.subscribe(element, (elementRect) => {
            for (const sub2 of subscribers) {
              sub2(elementRect);
            }
          });
        }
        subscribers.push(subscriber);
        return () => {
          const idx = subscribers.indexOf(subscriber);
          if (idx > -1) {
            subscribers.splice(idx, 1);
          }
          if (subscribers.length === 0) {
            if (dispose)
              dispose();
          }
        };
      } };
    }
    function useElementSize(element) {
      const [size2, setSize] = React$2.useState(null);
      React$2.useEffect(() => {
        if (!element)
          return void 0;
        return _elementSizeObserver.subscribe(element, setSize);
      }, [element]);
      return size2;
    }
    function useGlobalKeyDown(onKeyDown) {
      return React$2.useEffect(() => {
        addEventListener("keydown", onKeyDown);
        return () => removeEventListener("keydown", onKeyDown);
      }, [onKeyDown]);
    }
    function multiplyChannel(b2, s) {
      return b2 * s;
    }
    function multiply$1(b2, s) {
      return { r: Math.round(clamp$1(multiplyChannel(b2.r / 255, s.r / 255) * 255)), g: Math.round(clamp$1(multiplyChannel(b2.g / 255, s.g / 255) * 255)), b: Math.round(clamp$1(multiplyChannel(b2.b / 255, s.b / 255) * 255)) };
    }
    function clamp$1(num2) {
      return Math.max(Math.min(num2, 255), 0);
    }
    function screenChannel(b2, s) {
      return b2 + s - b2 * s;
    }
    function screen$1(b2, s) {
      return { r: Math.round(clamp(screenChannel(b2.r / 255, s.r / 255) * 255)), g: Math.round(clamp(screenChannel(b2.g / 255, s.g / 255) * 255)), b: Math.round(clamp(screenChannel(b2.b / 255, s.b / 255) * 255)) };
    }
    function clamp(num2) {
      return Math.max(Math.min(num2, 255), 0);
    }
    function hexToRgb(hex) {
      if (hex.length === 4) {
        const hexR = hex.slice(1, 2);
        const hexG = hex.slice(2, 3);
        const hexB = hex.slice(3, 4);
        return { r: parseInt(hexR + hexR, 16), g: parseInt(hexG + hexG, 16), b: parseInt(hexB + hexB, 16) };
      }
      return { r: parseInt(hex.slice(1, 3), 16), g: parseInt(hex.slice(3, 5), 16), b: parseInt(hex.slice(5, 7), 16) };
    }
    function rgbToHex(_ref2) {
      let { r, g: g2, b: b2 } = _ref2;
      return "#" + ((1 << 24) + (r << 16) + (g2 << 8) + b2).toString(16).slice(1);
    }
    function hslToRgb(hsl) {
      const s = hsl.s / 100;
      const l2 = hsl.l / 100;
      const c = (1 - Math.abs(2 * l2 - 1)) * s;
      const x2 = c * (1 - Math.abs(hsl.h / 60 % 2 - 1));
      const m2 = l2 - c / 2;
      let r = 0;
      let g2 = 0;
      let b2 = 0;
      if (0 <= hsl.h && hsl.h < 60) {
        r = c;
        g2 = x2;
        b2 = 0;
      } else if (60 <= hsl.h && hsl.h < 120) {
        r = x2;
        g2 = c;
        b2 = 0;
      } else if (120 <= hsl.h && hsl.h < 180) {
        r = 0;
        g2 = c;
        b2 = x2;
      } else if (180 <= hsl.h && hsl.h < 240) {
        r = 0;
        g2 = x2;
        b2 = c;
      } else if (240 <= hsl.h && hsl.h < 300) {
        r = x2;
        g2 = 0;
        b2 = c;
      } else if (300 <= hsl.h && hsl.h < 360) {
        r = c;
        g2 = 0;
        b2 = x2;
      }
      return { r: Math.round((r + m2) * 255), g: Math.round((g2 + m2) * 255), b: Math.round((b2 + m2) * 255) };
    }
    var HEX_CHARS = "0123456789ABCDEFabcdef";
    var HSL_RE = /hsl\(\s*(\d+)\s*,\s*((\d+(?:\.\d+)?)%)\s*,\s*((\d+(?:\.\d+)?)%)\s*\)/i;
    function isHexChars(str) {
      for (const c of str) {
        if (HEX_CHARS.indexOf(c) === -1) {
          return false;
        }
      }
      return true;
    }
    function isHex(str) {
      if (str[0] !== "#")
        return false;
      if (!(str.length === 4 || str.length === 7))
        return false;
      return isHexChars(str.slice(1));
    }
    function parseHsl(str) {
      const res = HSL_RE.exec(str);
      if (!res) {
        throw new Error('parseHsl: string is not a HSL color: "'.concat(str, '"'));
      }
      return { h: parseInt(res[1]), s: parseFloat(res[3]), l: parseFloat(res[5]) };
    }
    function parseColor(color2) {
      if (!color2)
        return { r: 0, g: 0, b: 0 };
      if (typeof color2 !== "string") {
        throw new Error("parseColor: expected a string");
      }
      if (isHex(color2)) {
        return hexToRgb(color2);
      }
      if (color2.startsWith("hsl(")) {
        return hslToRgb(parseHsl(color2));
      }
      throw new Error('parseColor: unexpected color format: "'.concat(color2, '"'));
    }
    function rgba(color2, a) {
      const rgb = parseColor(color2);
      return "rgba(".concat(rgb.r, ",").concat(rgb.g, ",").concat(rgb.b, ",").concat(a, ")");
    }
    function createButtonTones(opts, base, dark, solid, muted, mode) {
      return { default: opts.button({ base, dark, solid: solid.default, muted: muted.default, mode }), primary: opts.button({ base, dark, solid: solid.primary, muted: muted.primary, mode }), positive: opts.button({ base, dark, solid: solid.positive, muted: muted.positive, mode }), caution: opts.button({ base, dark, solid: solid.caution, muted: muted.caution, mode }), critical: opts.button({ base, dark, solid: solid.critical, muted: muted.critical, mode }) };
    }
    function createButtonModes(opts, base, dark, solid, muted) {
      return { default: createButtonTones(opts, base, dark, solid, muted, "default"), ghost: createButtonTones(opts, base, dark, solid, muted, "ghost"), bleed: createButtonTones(opts, base, dark, solid, muted, "bleed") };
    }
    function createCardStates(opts, base, dark, name2, solid, muted) {
      return { enabled: opts.card({ base, dark, name: name2, state: "enabled", solid, muted }), disabled: opts.card({ base, dark, name: name2, state: "disabled", solid, muted }), hovered: opts.card({ base, dark, name: name2, state: "hovered", solid, muted }), pressed: opts.card({ base, dark, name: name2, state: "pressed", solid, muted }), selected: opts.card({ base, dark, name: name2, state: "selected", solid, muted }) };
    }
    var black = "hsl(0, 0%, 0%)";
    var white = "hsl(0, 0%, 100%)";
    var colors = { default: { lightest: "hsl(0, 0%, 95%)", lighter: "hsl(0, 0%, 70%)", light: "hsl(0, 0%, 65%)", base: "hsl(0, 0%, 50%)", dark: "hsl(0, 0%, 35%)", darker: "hsl(0, 0%, 20%)", darkest: "hsl(0, 0%, 5%)" }, transparent: { lightest: "hsl(240, 100%, 95%)", lighter: "hsl(240, 100%, 70%)", light: "hsl(240, 100%, 65%)", base: "hsl(240, 100%, 50%)", dark: "hsl(240, 100%, 35%)", darker: "hsl(240, 100%, 20%)", darkest: "hsl(240, 100%, 5%)" }, primary: { lightest: "hsl(240, 100%, 95%)", lighter: "hsl(240, 100%, 70%)", light: "hsl(240, 100%, 65%)", base: "hsl(240, 100%, 50%)", dark: "hsl(240, 100%, 35%)", darker: "hsl(240, 100%, 20%)", darkest: "hsl(240, 100%, 5%)" }, positive: { lightest: "hsl(120, 100%, 95%)", lighter: "hsl(120, 100%, 70%)", light: "hsl(120, 100%, 65%)", base: "hsl(120, 100%, 50%)", dark: "hsl(120, 100%, 35%)", darker: "hsl(120, 100%, 20%)", darkest: "hsl(120, 100%, 5%)" }, caution: { lightest: "hsl(60, 100%, 95%)", lighter: "hsl(60, 100%, 70%)", light: "hsl(60, 100%, 65%)", base: "hsl(60, 100%, 50%)", dark: "hsl(60, 100%, 35%)", darker: "hsl(60, 100%, 20%)", darkest: "hsl(60, 100%, 5%)" }, critical: { lightest: "hsl(0, 100%, 95%)", lighter: "hsl(0, 100%, 70%)", light: "hsl(0, 100%, 65%)", base: "hsl(0, 100%, 50%)", dark: "hsl(0, 100%, 35%)", darker: "hsl(0, 100%, 20%)", darkest: "hsl(0, 100%, 5%)" } };
    var spots = { gray: "hsl(0, 0%, 50%)", red: "hsl(0, 100%, 50%)", orange: "hsl(30, 100%, 50%)", yellow: "hsl(60, 100%, 50%)", green: "hsl(120, 100%, 50%)", cyan: "hsl(180, 100%, 50%)", blue: "hsl(240, 100%, 50%)", purple: "hsl(270, 100%, 50%)", magenta: "hsl(300, 100%, 50%)" };
    var tones$1 = { transparent: { bg: [colors.transparent.darkest, colors.transparent.lightest], fg: [colors.transparent.lightest, colors.transparent.darkest], border: [colors.transparent.darker, colors.transparent.lighter], focusRing: [colors.transparent.base, colors.transparent.base] }, primary: { bg: [colors.primary.darkest, colors.primary.lightest], fg: [colors.primary.lightest, colors.primary.darkest], border: [colors.primary.darker, colors.primary.lighter], focusRing: [colors.primary.base, colors.primary.base] }, positive: { bg: [colors.positive.darkest, colors.positive.lightest], fg: [colors.positive.lightest, colors.positive.darkest], border: [colors.positive.darker, colors.positive.lighter], focusRing: [colors.positive.base, colors.positive.base] }, caution: { bg: [colors.caution.darkest, colors.caution.lightest], fg: [colors.caution.lightest, colors.caution.darkest], border: [colors.caution.darker, colors.caution.lighter], focusRing: [colors.caution.base, colors.caution.base] }, critical: { bg: [colors.critical.darkest, colors.critical.lightest], fg: [colors.critical.lightest, colors.critical.darkest], border: [colors.critical.darker, colors.critical.lighter], focusRing: [colors.critical.base, colors.critical.base] } };
    var defaultOpts = { base: (_ref4) => {
      let { dark, name: name2 } = _ref4;
      if (name2 === "default") {
        return { bg: dark ? black : white, fg: dark ? white : black, border: dark ? colors.default.darkest : colors.default.lightest, focusRing: colors.primary.base, shadow: { outline: black, umbra: black, penumbra: black, ambient: black }, skeleton: { from: dark ? white : black, to: dark ? white : black } };
      }
      return { bg: tones$1[name2].bg[dark ? 0 : 1], fg: tones$1[name2].fg[dark ? 0 : 1], border: tones$1[name2].border[dark ? 0 : 1], focusRing: tones$1[name2].focusRing[dark ? 0 : 1], shadow: { outline: black, umbra: black, penumbra: black, ambient: black }, skeleton: { from: dark ? white : black, to: dark ? white : black } };
    }, solid: (_ref5) => {
      let { base, dark, state, tone } = _ref5;
      const color2 = colors[tone];
      if (state === "hovered") {
        return { bg: dark ? color2.light : color2.dark, bg2: dark ? color2.light : color2.dark, border: dark ? color2.lighter : color2.darker, fg: dark ? color2.darkest : color2.lightest, muted: { fg: black }, accent: { fg: black }, link: { fg: black }, code: { bg: black, fg: black }, skeleton: base.skeleton };
      }
      return { bg: color2.base, bg2: color2.base, border: dark ? color2.light : color2.dark, fg: dark ? color2.darkest : color2.lightest, muted: { fg: black }, accent: { fg: black }, link: { fg: black }, code: { bg: black, fg: black }, skeleton: base.skeleton };
    }, muted: (_ref6) => {
      let { base, dark, state, tone } = _ref6;
      const color2 = colors[tone];
      if (state === "hovered") {
        return { bg: dark ? color2.darker : color2.lighter, bg2: dark ? color2.darker : color2.lighter, border: dark ? color2.lighter : color2.darker, fg: dark ? color2.lightest : color2.darkest, muted: { fg: black }, accent: { fg: black }, link: { fg: black }, code: { bg: black, fg: black }, skeleton: base.skeleton };
      }
      return { bg: dark ? color2.darkest : color2.lightest, bg2: dark ? color2.darkest : color2.lightest, border: dark ? color2.darker : color2.lighter, fg: dark ? color2.lighter : color2.darker, muted: { fg: black }, accent: { fg: black }, link: { fg: black }, code: { bg: black, fg: black }, skeleton: base.skeleton };
    }, button: (_ref7) => {
      let { base, mode, muted, solid } = _ref7;
      if (mode === "bleed") {
        return { ...muted, enabled: { bg: "transparent", bg2: "transparent", fg: muted.enabled.fg, border: "transparent", muted: { fg: black }, accent: { fg: black }, link: { fg: black }, code: { bg: black, fg: black }, skeleton: base.skeleton }, hovered: { bg: muted.enabled.bg, bg2: muted.enabled.bg, fg: muted.hovered.fg, border: "transparent", muted: { fg: black }, accent: { fg: black }, link: { fg: black }, code: { bg: black, fg: black }, skeleton: base.skeleton } };
      }
      if (mode === "ghost")
        return { ...solid, enabled: muted.enabled };
      return solid;
    }, card: (_ref8) => {
      let { base } = _ref8;
      return { bg: black, bg2: black, fg: black, border: black, muted: { fg: black }, accent: { fg: black }, link: { fg: black }, code: { bg: black, fg: black }, skeleton: base.skeleton };
    }, input: () => {
      return { bg: black, fg: black, border: black, placeholder: black };
    }, selectable: (_ref9) => {
      let { muted, state, tone } = _ref9;
      return muted[tone][state];
    }, spot: (_ref10) => {
      let { key: key2 } = _ref10;
      return spots[key2];
    }, syntax: () => ({ atrule: black, attrName: black, attrValue: black, attribute: black, boolean: black, builtin: black, cdata: black, char: black, class: black, className: black, comment: black, constant: black, deleted: black, doctype: black, entity: black, function: black, hexcode: black, id: black, important: black, inserted: black, keyword: black, number: black, operator: black, prolog: black, property: black, pseudoClass: black, pseudoElement: black, punctuation: black, regex: black, selector: black, string: black, symbol: black, tag: black, unit: black, url: black, variable: black }) };
    function createInputModes(opts, base, dark, solid, muted) {
      return { default: { enabled: opts.input({ base, dark, mode: "default", state: "enabled", solid: solid.default, muted: muted.default }), disabled: opts.input({ base, dark, mode: "default", state: "disabled", solid: solid.default, muted: muted.default }), hovered: opts.input({ base, dark, mode: "default", state: "hovered", solid: solid.default, muted: muted.default }), readOnly: opts.input({ base, dark, mode: "default", state: "readOnly", solid: solid.default, muted: muted.default }) }, invalid: { enabled: opts.input({ base, dark, mode: "invalid", state: "enabled", solid: solid.default, muted: muted.default }), disabled: opts.input({ base, dark, mode: "invalid", state: "disabled", solid: solid.default, muted: muted.default }), hovered: opts.input({ base, dark, mode: "invalid", state: "hovered", solid: solid.default, muted: muted.default }), readOnly: opts.input({ base, dark, mode: "invalid", state: "readOnly", solid: solid.default, muted: muted.default }) } };
    }
    function createMutedTones(opts, base, dark, name2) {
      return { default: { enabled: opts.muted({ base, dark, tone: "default", name: name2, state: "enabled" }), disabled: opts.muted({ base, dark, tone: "default", name: name2, state: "disabled" }), hovered: opts.muted({ base, dark, tone: "default", name: name2, state: "hovered" }), pressed: opts.muted({ base, dark, tone: "default", name: name2, state: "pressed" }), selected: opts.muted({ base, dark, tone: "default", name: name2, state: "selected" }) }, transparent: { enabled: opts.muted({ base, dark, tone: "transparent", name: name2, state: "enabled" }), disabled: opts.muted({ base, dark, tone: "transparent", name: name2, state: "disabled" }), hovered: opts.muted({ base, dark, tone: "transparent", name: name2, state: "hovered" }), pressed: opts.muted({ base, dark, tone: "transparent", name: name2, state: "pressed" }), selected: opts.muted({ base, dark, tone: "transparent", name: name2, state: "selected" }) }, primary: { enabled: opts.muted({ base, dark, tone: "primary", name: name2, state: "enabled" }), disabled: opts.muted({ base, dark, tone: "primary", name: name2, state: "disabled" }), hovered: opts.muted({ base, dark, tone: "primary", name: name2, state: "hovered" }), pressed: opts.muted({ base, dark, tone: "primary", name: name2, state: "pressed" }), selected: opts.muted({ base, dark, tone: "primary", name: name2, state: "selected" }) }, positive: { enabled: opts.muted({ base, dark, tone: "positive", name: name2, state: "enabled" }), disabled: opts.muted({ base, dark, tone: "positive", name: name2, state: "disabled" }), hovered: opts.muted({ base, dark, tone: "positive", name: name2, state: "hovered" }), pressed: opts.muted({ base, dark, tone: "positive", name: name2, state: "pressed" }), selected: opts.muted({ base, dark, tone: "positive", name: name2, state: "selected" }) }, caution: { enabled: opts.muted({ base, dark, tone: "caution", name: name2, state: "enabled" }), disabled: opts.muted({ base, dark, tone: "caution", name: name2, state: "disabled" }), hovered: opts.muted({ base, dark, tone: "caution", name: name2, state: "hovered" }), pressed: opts.muted({ base, dark, tone: "caution", name: name2, state: "pressed" }), selected: opts.muted({ base, dark, tone: "caution", name: name2, state: "selected" }) }, critical: { enabled: opts.muted({ base, dark, tone: "critical", name: name2, state: "enabled" }), disabled: opts.muted({ base, dark, tone: "critical", name: name2, state: "disabled" }), hovered: opts.muted({ base, dark, tone: "critical", name: name2, state: "hovered" }), pressed: opts.muted({ base, dark, tone: "critical", name: name2, state: "pressed" }), selected: opts.muted({ base, dark, tone: "critical", name: name2, state: "selected" }) } };
    }
    function createSelectableTones(opts, base, dark, solid, muted) {
      return { default: _createSelectableStates(opts, base, dark, solid, muted, "default"), primary: _createSelectableStates(opts, base, dark, solid, muted, "primary"), positive: _createSelectableStates(opts, base, dark, solid, muted, "positive"), caution: _createSelectableStates(opts, base, dark, solid, muted, "caution"), critical: _createSelectableStates(opts, base, dark, solid, muted, "critical") };
    }
    function _createSelectableStates(opts, base, dark, solid, muted, tone) {
      return { enabled: opts.selectable({ base, dark, solid, muted, state: "enabled", tone }), hovered: opts.selectable({ base, dark, solid, muted, state: "hovered", tone }), pressed: opts.selectable({ base, dark, solid, muted, state: "pressed", tone }), selected: opts.selectable({ base, dark, solid, muted, state: "selected", tone }), disabled: opts.selectable({ base, dark, solid, muted, state: "disabled", tone }) };
    }
    function createSolidTones(opts, base, dark, name2) {
      return { default: { enabled: opts.solid({ base, dark, tone: "default", name: name2, state: "enabled" }), disabled: opts.solid({ base, dark, tone: "default", name: name2, state: "disabled" }), hovered: opts.solid({ base, dark, tone: "default", name: name2, state: "hovered" }), pressed: opts.solid({ base, dark, tone: "default", name: name2, state: "pressed" }), selected: opts.solid({ base, dark, tone: "default", name: name2, state: "selected" }) }, transparent: { enabled: opts.solid({ base, dark, tone: "transparent", name: name2, state: "enabled" }), disabled: opts.solid({ base, dark, tone: "transparent", name: name2, state: "disabled" }), hovered: opts.solid({ base, dark, tone: "transparent", name: name2, state: "hovered" }), pressed: opts.solid({ base, dark, tone: "transparent", name: name2, state: "pressed" }), selected: opts.solid({ base, dark, tone: "transparent", name: name2, state: "selected" }) }, primary: { enabled: opts.solid({ base, dark, tone: "primary", name: name2, state: "enabled" }), disabled: opts.solid({ base, dark, tone: "primary", name: name2, state: "disabled" }), hovered: opts.solid({ base, dark, tone: "primary", name: name2, state: "hovered" }), pressed: opts.solid({ base, dark, tone: "primary", name: name2, state: "pressed" }), selected: opts.solid({ base, dark, tone: "primary", name: name2, state: "selected" }) }, positive: { enabled: opts.solid({ base, dark, tone: "positive", name: name2, state: "enabled" }), disabled: opts.solid({ base, dark, tone: "positive", name: name2, state: "disabled" }), hovered: opts.solid({ base, dark, tone: "positive", name: name2, state: "hovered" }), pressed: opts.solid({ base, dark, tone: "positive", name: name2, state: "pressed" }), selected: opts.solid({ base, dark, tone: "positive", name: name2, state: "selected" }) }, caution: { enabled: opts.solid({ base, dark, tone: "caution", name: name2, state: "enabled" }), disabled: opts.solid({ base, dark, tone: "caution", name: name2, state: "disabled" }), hovered: opts.solid({ base, dark, tone: "caution", name: name2, state: "hovered" }), pressed: opts.solid({ base, dark, tone: "caution", name: name2, state: "pressed" }), selected: opts.solid({ base, dark, tone: "caution", name: name2, state: "selected" }) }, critical: { enabled: opts.solid({ base, dark, tone: "critical", name: name2, state: "enabled" }), disabled: opts.solid({ base, dark, tone: "critical", name: name2, state: "disabled" }), hovered: opts.solid({ base, dark, tone: "critical", name: name2, state: "hovered" }), pressed: opts.solid({ base, dark, tone: "critical", name: name2, state: "pressed" }), selected: opts.solid({ base, dark, tone: "critical", name: name2, state: "selected" }) } };
    }
    function createSpot(opts, base, dark) {
      return { gray: opts.spot({ base, dark, key: "gray" }), blue: opts.spot({ base, dark, key: "blue" }), purple: opts.spot({ base, dark, key: "purple" }), magenta: opts.spot({ base, dark, key: "magenta" }), red: opts.spot({ base, dark, key: "red" }), orange: opts.spot({ base, dark, key: "orange" }), yellow: opts.spot({ base, dark, key: "yellow" }), green: opts.spot({ base, dark, key: "green" }), cyan: opts.spot({ base, dark, key: "cyan" }) };
    }
    function createColorTheme() {
      let partialOpts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      const builders = { ...defaultOpts, ...partialOpts };
      return { light: _createColorScheme(builders, false), dark: _createColorScheme(builders, true) };
    }
    function _createColorScheme(opts, dark) {
      return { default: _createColor(opts, dark, "default"), transparent: _createColor(opts, dark, "transparent"), primary: _createColor(opts, dark, "primary"), positive: _createColor(opts, dark, "positive"), caution: _createColor(opts, dark, "caution"), critical: _createColor(opts, dark, "critical") };
    }
    function _createColor(opts, dark, name2) {
      const base = opts.base({ dark, name: name2 });
      const solid = createSolidTones(opts, base, dark, name2);
      const muted = createMutedTones(opts, base, dark, name2);
      return { base, button: createButtonModes(opts, base, dark, solid, muted), card: createCardStates(opts, base, dark, name2, solid, muted), dark, input: createInputModes(opts, base, dark, solid, muted), selectable: createSelectableTones(opts, base, dark, solid, muted), spot: createSpot(opts, base, dark), syntax: opts.syntax({ base, dark }), solid, muted };
    }
    function multiply(bg, fg) {
      const b2 = parseColor(bg);
      const s = parseColor(fg);
      const hex = rgbToHex(multiply$1(b2, s));
      return hex;
    }
    function screen(bg, fg) {
      const b2 = parseColor(bg);
      const s = parseColor(fg);
      const hex = rgbToHex(screen$1(b2, s));
      return hex;
    }
    var tones = { default: hues.gray, transparent: hues.gray, primary: hues.blue, positive: hues.green, caution: hues.yellow, critical: hues.red };
    var NEUTRAL_TONES = ["default", "transparent"];
    var color = createColorTheme({ base: (_ref11) => {
      let { dark, name: name2 } = _ref11;
      if (name2 === "default") {
        const tints2 = hues.gray;
        const skeletonFrom2 = dark ? tints2[900].hex : tints2[100].hex;
        return { fg: dark ? white$2.hex : black$2.hex, bg: dark ? black$2.hex : white$2.hex, border: tints2[dark ? 800 : 200].hex, focusRing: hues.blue[dark ? 500 : 500].hex, shadow: { outline: rgba(tints2[500].hex, 0.4), umbra: dark ? rgba(tints2[950].hex, 0.4) : rgba(tints2[500].hex, 0.2), penumbra: dark ? rgba(tints2[950].hex, 0.28) : rgba(tints2[500].hex, 0.14), ambient: dark ? rgba(tints2[950].hex, 0.24) : rgba(tints2[500].hex, 0.12) }, skeleton: { from: skeletonFrom2, to: rgba(skeletonFrom2, 0.5) } };
      }
      if (name2 === "transparent") {
        const tints2 = tones.default;
        const skeletonFrom2 = tints2[dark ? 800 : 200].hex;
        return { fg: tints2[dark ? 100 : 900].hex, bg: tints2[dark ? 950 : 50].hex, border: tints2[dark ? 800 : 300].hex, focusRing: hues.blue[500].hex, shadow: { outline: rgba(tints2[500].hex, 0.4), umbra: dark ? rgba(tints2[900].hex, 0.4) : rgba(tints2[500].hex, 0.2), penumbra: dark ? rgba(tints2[900].hex, 0.28) : rgba(tints2[500].hex, 0.14), ambient: dark ? rgba(tints2[900].hex, 0.24) : rgba(tints2[500].hex, 0.12) }, skeleton: { from: skeletonFrom2, to: rgba(skeletonFrom2, 0.5) } };
      }
      const tints = tones[name2] || tones.default;
      const skeletonFrom = tints[dark ? 800 : 200].hex;
      return { fg: tints[dark ? 100 : 900].hex, bg: tints[dark ? 950 : 50].hex, border: tints[dark ? 800 : 200].hex, focusRing: tints[500].hex, shadow: { outline: rgba(tints[500].hex, 0.4), umbra: dark ? rgba(tints[900].hex, 0.4) : rgba(tints[500].hex, 0.2), penumbra: dark ? rgba(tints[900].hex, 0.28) : rgba(tints[500].hex, 0.14), ambient: dark ? rgba(tints[900].hex, 0.24) : rgba(tints[500].hex, 0.12) }, skeleton: { from: skeletonFrom, to: rgba(skeletonFrom, 0.5) } };
    }, solid: (_ref12) => {
      let { base, dark, name: name2, state, tone } = _ref12;
      const mix = dark ? screen : multiply;
      const mix2 = dark ? multiply : screen;
      const defaultTints = tones[name2] || tones.default;
      const isNeutral = NEUTRAL_TONES.includes(name2) && NEUTRAL_TONES.includes(tone);
      let tints = tones[tone === "default" ? name2 : tone] || defaultTints;
      if (state === "disabled") {
        tints = defaultTints;
        const bg2 = mix(base.bg, tints[dark ? 800 : 200].hex);
        const skeletonFrom2 = mix2(bg2, tints[dark ? 200 : 800].hex);
        return { bg: bg2, bg2: mix2(bg2, tints[dark ? 50 : 950].hex), border: mix(base.bg, tints[dark ? 800 : 200].hex), fg: mix(base.bg, dark ? black$2.hex : white$2.hex), muted: { fg: mix(base.bg, tints[dark ? 950 : 50].hex) }, accent: { fg: mix(base.bg, tints[dark ? 950 : 50].hex) }, link: { fg: mix(base.bg, tints[dark ? 950 : 50].hex) }, code: { bg: bg2, fg: mix(base.bg, tints[dark ? 950 : 50].hex) }, skeleton: { from: skeletonFrom2, to: rgba(skeletonFrom2, 0.5) } };
      }
      if (state === "hovered") {
        const bg2 = mix(base.bg, tints[dark ? 300 : 600].hex);
        const skeletonFrom2 = mix2(bg2, tints[dark ? 200 : 800].hex);
        return { bg: bg2, bg2: mix2(bg2, tints[dark ? 50 : 950].hex), border: mix(base.bg, tints[dark ? 300 : 600].hex), fg: mix(base.bg, dark ? black$2.hex : white$2.hex), muted: { fg: mix(base.bg, tints[dark ? 800 : 200].hex) }, accent: { fg: mix2(bg2, hues.red[dark ? 800 : 200].hex) }, link: { fg: mix2(bg2, hues.blue[dark ? 800 : 200].hex) }, code: { bg: mix(bg2, tints[dark ? 950 : 50].hex), fg: mix(base.bg, tints[dark ? 800 : 200].hex) }, skeleton: { from: skeletonFrom2, to: rgba(skeletonFrom2, 0.5) } };
      }
      if (state === "pressed") {
        const bg2 = mix(base.bg, tints[dark ? 200 : 800].hex);
        const skeletonFrom2 = mix2(bg2, tints[dark ? 200 : 800].hex);
        return { bg: mix(base.bg, tints[dark ? 200 : 800].hex), bg2: mix2(bg2, tints[dark ? 50 : 950].hex), border: mix(base.bg, tints[dark ? 200 : 800].hex), fg: mix(base.bg, dark ? black$2.hex : white$2.hex), muted: { fg: mix(base.bg, tints[dark ? 800 : 200].hex) }, accent: { fg: mix2(bg2, hues.red[dark ? 800 : 200].hex) }, link: { fg: mix2(bg2, hues.blue[dark ? 800 : 200].hex) }, code: { bg: mix(bg2, tints[dark ? 950 : 50].hex), fg: mix(base.bg, tints[dark ? 800 : 200].hex) }, skeleton: { from: skeletonFrom2, to: rgba(skeletonFrom2, 0.5) } };
      }
      if (state === "selected") {
        if (isNeutral) {
          tints = tones.primary;
        }
        const bg2 = mix(base.bg, tints[dark ? 200 : 800].hex);
        const skeletonFrom2 = mix2(bg2, tints[dark ? 200 : 800].hex);
        return { bg: bg2, bg2: mix2(bg2, tints[dark ? 50 : 950].hex), border: mix(base.bg, tints[dark ? 200 : 800].hex), fg: mix(base.bg, dark ? black$2.hex : white$2.hex), muted: { fg: mix(base.bg, tints[dark ? 800 : 200].hex) }, accent: { fg: mix2(bg2, hues.red[dark ? 800 : 200].hex) }, link: { fg: mix2(bg2, hues.blue[dark ? 800 : 200].hex) }, code: { bg: mix(bg2, tints[dark ? 950 : 50].hex), fg: mix(base.bg, tints[dark ? 800 : 200].hex) }, skeleton: { from: skeletonFrom2, to: rgba(skeletonFrom2, 0.5) } };
      }
      const bg = mix(base.bg, tints[dark ? 400 : 500].hex);
      const skeletonFrom = mix2(bg, tints[dark ? 200 : 800].hex);
      return { bg, bg2: mix2(bg, tints[dark ? 50 : 950].hex), border: mix(base.bg, tints[dark ? 400 : 500].hex), fg: mix(base.bg, dark ? black$2.hex : white$2.hex), muted: { fg: mix(base.bg, tints[dark ? 900 : 100].hex) }, accent: { fg: mix2(bg, hues.red[dark ? 900 : 100].hex) }, link: { fg: mix2(bg, hues.blue[dark ? 900 : 100].hex) }, code: { bg: mix(bg, tints[dark ? 950 : 50].hex), fg: mix(base.bg, tints[dark ? 900 : 100].hex) }, skeleton: { from: skeletonFrom, to: rgba(skeletonFrom, 0.5) } };
    }, muted: (_ref13) => {
      let { base, dark, name: name2, state, tone } = _ref13;
      const mix = dark ? screen : multiply;
      const defaultTints = tones[name2] || tones.default;
      const isNeutral = NEUTRAL_TONES.includes(name2) && NEUTRAL_TONES.includes(tone);
      let tints = tones[tone === "default" ? name2 : tone] || defaultTints;
      if (state === "disabled") {
        tints = defaultTints;
        const bg2 = base.bg;
        const skeletonFrom2 = mix(bg2, tints[dark ? 900 : 100].hex);
        return { bg: bg2, bg2: mix(bg2, tints[dark ? 950 : 50].hex), border: mix(bg2, tints[dark ? 950 : 50].hex), fg: mix(bg2, tints[dark ? 800 : 200].hex), muted: { fg: mix(bg2, tints[dark ? 900 : 100].hex) }, accent: { fg: mix(bg2, tints[dark ? 900 : 100].hex) }, link: { fg: mix(bg2, tints[dark ? 900 : 100].hex) }, code: { bg: bg2, fg: mix(bg2, tints[dark ? 900 : 100].hex) }, skeleton: { from: rgba(skeletonFrom2, 0.5), to: rgba(skeletonFrom2, 0.25) } };
      }
      if (state === "hovered") {
        const bg2 = mix(base.bg, tints[dark ? 950 : 50].hex);
        const skeletonFrom2 = mix(bg2, tints[dark ? 900 : 100].hex);
        return { bg: bg2, bg2: mix(bg2, tints[dark ? 950 : 50].hex), border: mix(bg2, tints[dark ? 900 : 100].hex), fg: mix(base.bg, tints[dark ? 200 : 800].hex), muted: { fg: mix(base.bg, tints[dark ? 400 : 600].hex) }, accent: { fg: mix(base.bg, hues.red[dark ? 400 : 500].hex) }, link: { fg: mix(base.bg, hues.blue[dark ? 400 : 600].hex) }, code: { bg: mix(bg2, tints[dark ? 950 : 50].hex), fg: mix(base.bg, tints[dark ? 400 : 600].hex) }, skeleton: { from: skeletonFrom2, to: rgba(skeletonFrom2, 0.5) } };
      }
      if (state === "pressed") {
        if (isNeutral) {
          tints = tones.primary;
        }
        const bg2 = mix(base.bg, tints[dark ? 900 : 100].hex);
        const skeletonFrom2 = mix(bg2, tints[dark ? 900 : 100].hex);
        return { bg: bg2, bg2: mix(bg2, tints[dark ? 950 : 50].hex), border: mix(bg2, tints[dark ? 900 : 100].hex), fg: mix(base.bg, tints[dark ? 200 : 800].hex), muted: { fg: mix(base.bg, tints[dark ? 400 : 600].hex) }, accent: { fg: mix(bg2, hues.red[dark ? 400 : 500].hex) }, link: { fg: mix(bg2, hues.blue[dark ? 400 : 600].hex) }, code: { bg: mix(bg2, tints[dark ? 950 : 50].hex), fg: mix(base.bg, tints[dark ? 400 : 600].hex) }, skeleton: { from: skeletonFrom2, to: rgba(skeletonFrom2, 0.5) } };
      }
      if (state === "selected") {
        if (isNeutral) {
          tints = tones.primary;
        }
        const bg2 = mix(base.bg, tints[dark ? 900 : 100].hex);
        const skeletonFrom2 = mix(bg2, tints[dark ? 900 : 100].hex);
        return { bg: bg2, bg2: mix(bg2, tints[dark ? 950 : 50].hex), border: mix(bg2, tints[dark ? 900 : 100].hex), fg: mix(base.bg, tints[dark ? 200 : 800].hex), muted: { fg: mix(base.bg, tints[dark ? 400 : 600].hex) }, accent: { fg: mix(bg2, hues.red[dark ? 400 : 500].hex) }, link: { fg: mix(bg2, hues.blue[dark ? 400 : 600].hex) }, code: { bg: mix(bg2, tints[dark ? 950 : 50].hex), fg: mix(base.bg, tints[dark ? 400 : 600].hex) }, skeleton: { from: skeletonFrom2, to: rgba(skeletonFrom2, 0.5) } };
      }
      const bg = base.bg;
      const skeletonFrom = mix(bg, tints[dark ? 900 : 100].hex);
      return { bg, bg2: mix(bg, tints[dark ? 950 : 50].hex), border: mix(bg, tints[dark ? 900 : 100].hex), fg: mix(base.bg, tints[dark ? 300 : 700].hex), muted: { fg: mix(base.bg, tints[dark ? 400 : 600].hex) }, accent: { fg: mix(base.bg, hues.red[dark ? 400 : 500].hex) }, link: { fg: mix(base.bg, hues.blue[dark ? 400 : 600].hex) }, code: { bg: mix(base.bg, tints[dark ? 950 : 50].hex), fg: mix(base.bg, tints[dark ? 400 : 600].hex) }, skeleton: { from: skeletonFrom, to: rgba(skeletonFrom, 0.5) } };
    }, button: (_ref14) => {
      let { base, mode, muted, solid } = _ref14;
      if (mode === "bleed") {
        return { enabled: { ...muted.enabled, border: muted.enabled.bg }, hovered: { ...muted.hovered, border: muted.hovered.bg }, pressed: { ...muted.pressed, border: muted.pressed.bg }, selected: { ...muted.selected, border: muted.selected.bg }, disabled: { ...muted.disabled, border: muted.disabled.bg } };
      }
      if (mode === "ghost") {
        return { ...solid, enabled: { ...muted.enabled, border: base.border }, disabled: muted.disabled };
      }
      return solid;
    }, card: (_ref15) => {
      let { base, dark, muted, name: name2, solid, state } = _ref15;
      if (state === "hovered") {
        return muted[name2].hovered;
      }
      if (state === "disabled") {
        return muted[name2].disabled;
      }
      const isNeutral = NEUTRAL_TONES.includes(name2);
      const tints = tones[name2] || tones.default;
      const mix = dark ? screen : multiply;
      if (state === "pressed") {
        if (isNeutral) {
          return muted.primary.pressed;
        }
        return muted[name2].pressed;
      }
      if (state === "selected") {
        if (isNeutral) {
          return solid.primary.enabled;
        }
        return solid[name2].enabled;
      }
      const bg = base.bg;
      const skeletonFrom = mix(base.bg, tints[dark ? 900 : 100].hex);
      return { bg, bg2: mix(bg, tints[dark ? 950 : 50].hex), fg: base.fg, border: base.border, muted: { fg: mix(base.bg, tints[dark ? 400 : 600].hex) }, accent: { fg: mix(base.bg, hues.red[dark ? 400 : 500].hex) }, link: { fg: mix(base.bg, hues.blue[dark ? 400 : 600].hex) }, code: { bg: mix(base.bg, tints[dark ? 950 : 50].hex), fg: tints[dark ? 400 : 600].hex }, skeleton: { from: skeletonFrom, to: rgba(skeletonFrom, 0.5) } };
    }, input: (_ref16) => {
      let { base, dark, mode, state } = _ref16;
      const mix = dark ? screen : multiply;
      if (mode === "invalid") {
        const tints = tones.critical;
        return { bg: mix(base.bg, tints[dark ? 950 : 50].hex), fg: mix(base.bg, tints[dark ? 400 : 600].hex), border: mix(base.bg, tints[dark ? 800 : 200].hex), placeholder: mix(base.bg, tints[dark ? 600 : 400].hex) };
      }
      if (state === "hovered") {
        return { bg: base.bg, fg: base.fg, border: mix(base.bg, hues.gray[dark ? 700 : 300].hex), placeholder: mix(base.bg, hues.gray[dark ? 600 : 400].hex) };
      }
      if (state === "disabled") {
        return { bg: mix(base.bg, hues.gray[dark ? 950 : 50].hex), fg: mix(base.bg, hues.gray[dark ? 700 : 300].hex), border: mix(base.bg, hues.gray[dark ? 900 : 100].hex), placeholder: mix(base.bg, hues.gray[dark ? 800 : 200].hex) };
      }
      if (state === "readOnly") {
        return { bg: mix(base.bg, hues.gray[dark ? 950 : 50].hex), fg: mix(base.bg, hues.gray[dark ? 200 : 800].hex), border: mix(base.bg, hues.gray[dark ? 800 : 200].hex), placeholder: mix(base.bg, hues.gray[dark ? 600 : 400].hex) };
      }
      return { bg: base.bg, fg: base.fg, border: base.border, placeholder: mix(base.bg, hues.gray[dark ? 600 : 400].hex) };
    }, selectable: (_ref17) => {
      let { base, muted, tone, solid, state } = _ref17;
      if (state === "enabled") {
        return { ...muted[tone].enabled, bg: base.bg };
      }
      if (state === "pressed") {
        if (tone === "default") {
          return muted.primary.pressed;
        }
        return muted[tone].pressed;
      }
      if (state === "selected") {
        if (tone === "default") {
          return solid.primary.enabled;
        }
        return solid[tone].enabled;
      }
      if (state === "disabled") {
        return { ...muted[tone].disabled, bg: base.bg };
      }
      return muted[tone][state];
    }, spot: (_ref18) => {
      let { base, dark, key: key2 } = _ref18;
      const mix = dark ? screen : multiply;
      return mix(base.bg, hues[key2][dark ? 400 : 500].hex);
    }, syntax: (_ref19) => {
      let { base, dark } = _ref19;
      const mix = dark ? screen : multiply;
      const mainShade = dark ? 400 : 600;
      const secondaryShade = dark ? 600 : 400;
      return { atrule: mix(base.bg, hues.purple[mainShade].hex), attrName: mix(base.bg, hues.green[mainShade].hex), attrValue: mix(base.bg, hues.yellow[mainShade].hex), attribute: mix(base.bg, hues.yellow[mainShade].hex), boolean: mix(base.bg, hues.purple[mainShade].hex), builtin: mix(base.bg, hues.purple[mainShade].hex), cdata: mix(base.bg, hues.yellow[mainShade].hex), char: mix(base.bg, hues.yellow[mainShade].hex), class: mix(base.bg, hues.orange[mainShade].hex), className: mix(base.bg, hues.cyan[mainShade].hex), comment: mix(base.bg, hues.gray[secondaryShade].hex), constant: mix(base.bg, hues.purple[mainShade].hex), deleted: mix(base.bg, hues.red[mainShade].hex), doctype: mix(base.bg, hues.gray[secondaryShade].hex), entity: mix(base.bg, hues.red[mainShade].hex), function: mix(base.bg, hues.green[mainShade].hex), hexcode: mix(base.bg, hues.blue[mainShade].hex), id: mix(base.bg, hues.purple[mainShade].hex), important: mix(base.bg, hues.purple[mainShade].hex), inserted: mix(base.bg, hues.yellow[mainShade].hex), keyword: mix(base.bg, hues.magenta[mainShade].hex), number: mix(base.bg, hues.purple[mainShade].hex), operator: mix(base.bg, hues.magenta[mainShade].hex), prolog: mix(base.bg, hues.gray[secondaryShade].hex), property: mix(base.bg, hues.blue[mainShade].hex), pseudoClass: mix(base.bg, hues.yellow[mainShade].hex), pseudoElement: mix(base.bg, hues.yellow[mainShade].hex), punctuation: mix(base.bg, hues.gray[mainShade].hex), regex: mix(base.bg, hues.blue[mainShade].hex), selector: mix(base.bg, hues.red[mainShade].hex), string: mix(base.bg, hues.yellow[mainShade].hex), symbol: mix(base.bg, hues.purple[mainShade].hex), tag: mix(base.bg, hues.red[mainShade].hex), unit: mix(base.bg, hues.orange[mainShade].hex), url: mix(base.bg, hues.red[mainShade].hex), variable: mix(base.bg, hues.red[mainShade].hex) };
    } });
    var fonts = { code: { family: "ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace", weights: { regular: 400, medium: 500, semibold: 600, bold: 700 }, sizes: [{ ascenderHeight: 3, descenderHeight: 3, fontSize: 10, iconSize: 17, lineHeight: 13, letterSpacing: 0 }, { ascenderHeight: 4, descenderHeight: 4, fontSize: 13, iconSize: 21, lineHeight: 17, letterSpacing: 0 }, { ascenderHeight: 5, descenderHeight: 5, fontSize: 16, iconSize: 25, lineHeight: 21, letterSpacing: 0 }, { ascenderHeight: 6, descenderHeight: 6, fontSize: 19, iconSize: 29, lineHeight: 25, letterSpacing: 0 }, { ascenderHeight: 7, descenderHeight: 7, fontSize: 22, iconSize: 33, lineHeight: 29, letterSpacing: 0 }] }, heading: { family: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", "Liberation Sans", Helvetica, Arial, system-ui, sans-serif', weights: { regular: 700, medium: 800, semibold: 900, bold: 900 }, sizes: [{ ascenderHeight: 4, descenderHeight: 4, fontSize: 12, iconSize: 17, lineHeight: 17, letterSpacing: 0 }, { ascenderHeight: 5, descenderHeight: 5, fontSize: 16, iconSize: 25, lineHeight: 21, letterSpacing: 0 }, { ascenderHeight: 6, descenderHeight: 6, fontSize: 21, iconSize: 33, lineHeight: 27, letterSpacing: 0 }, { ascenderHeight: 7, descenderHeight: 7, fontSize: 27, iconSize: 41, lineHeight: 33, letterSpacing: 0 }, { ascenderHeight: 8, descenderHeight: 8, fontSize: 33, iconSize: 49, lineHeight: 39, letterSpacing: 0 }, { ascenderHeight: 9, descenderHeight: 9, fontSize: 38, iconSize: 53, lineHeight: 45, letterSpacing: 0 }] }, label: { family: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", "Liberation Sans", system-ui, sans-serif', weights: { regular: 600, medium: 700, semibold: 800, bold: 900 }, sizes: [{ ascenderHeight: 2, descenderHeight: 2, fontSize: 9.8, iconSize: 15, lineHeight: 11, letterSpacing: 0.5 }, { ascenderHeight: 2, descenderHeight: 2, fontSize: 11.25, iconSize: 17, lineHeight: 12, letterSpacing: 0.5 }, { ascenderHeight: 2, descenderHeight: 2, fontSize: 12.75, iconSize: 19, lineHeight: 13, letterSpacing: 0.5 }, { ascenderHeight: 2, descenderHeight: 2, fontSize: 14, iconSize: 21, lineHeight: 14, letterSpacing: 0.5 }, { ascenderHeight: 2, descenderHeight: 2, fontSize: 15.5, iconSize: 23, lineHeight: 15, letterSpacing: 0.5 }] }, text: { family: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", "Liberation Sans", Helvetica, Arial, system-ui, sans-serif', weights: { regular: 400, medium: 500, semibold: 600, bold: 700 }, sizes: [{ ascenderHeight: 3, descenderHeight: 3, fontSize: 10, iconSize: 17, lineHeight: 13, letterSpacing: 0 }, { ascenderHeight: 4, descenderHeight: 4, fontSize: 13, iconSize: 21, lineHeight: 17, letterSpacing: 0 }, { ascenderHeight: 5, descenderHeight: 5, fontSize: 16, iconSize: 25, lineHeight: 21, letterSpacing: 0 }, { ascenderHeight: 6, descenderHeight: 6, fontSize: 19, iconSize: 29, lineHeight: 25, letterSpacing: 0 }, { ascenderHeight: 7, descenderHeight: 7, fontSize: 22, iconSize: 33, lineHeight: 29, letterSpacing: 0 }] } };
    var studioTheme = {
      avatar: { sizes: [{ distance: -3, size: 25 }, { distance: -6, size: 35 }, { distance: -9, size: 55 }] },
      button: { textWeight: "medium" },
      color,
      container: [320, 640, 960, 1280, 1600, 1920],
      focusRing: { offset: 1, width: 2 },
      fonts,
      media: [360, 600, 900, 1200, 1800, 2400],
      radius: [0, 1, 3, 6, 9, 12, 21],
      shadows: [null, { umbra: [0, 0, 0, 0], penumbra: [0, 0, 0, 0], ambient: [0, 0, 0, 0] }, { umbra: [0, 3, 5, -1], penumbra: [0, 6, 10, 0], ambient: [0, 1, 18, 0] }, { umbra: [0, 7, 8, -4], penumbra: [0, 12, 17, 2], ambient: [0, 5, 22, 4] }, { umbra: [0, 9, 11, -5], penumbra: [0, 18, 28, 2], ambient: [0, 7, 34, 6] }, { umbra: [0, 11, 15, -7], penumbra: [0, 24, 38, 3], ambient: [0, 9, 46, 8] }],
      space: [0, 4, 8, 12, 20, 32, 52, 84, 136, 220],
      input: { checkbox: { size: 17 }, radio: { size: 17, markSize: 9 }, switch: { width: 33, height: 17, padding: 4, transitionDurationMs: 150, transitionTimingFunction: "ease-out" }, border: { width: 1 } }
      // styles: {
      //   button: {
      //     root: {
      //       transition: 'background-color 100ms,border-color 100ms,color 100ms',
      //     },
      //   },
      //   card: {
      //     root: {
      //       transition: 'background-color 100ms,border-color 100ms,color 100ms',
      //     },
      //   },
      // },
    };
    var DEFAULT_THEME_LAYER = { dialog: { zOffset: 600 }, popover: { zOffset: 400 }, tooltip: { zOffset: 200 } };
    function getGlobalScope() {
      if (typeof globalThis !== "undefined")
        return globalThis;
      if (typeof window !== "undefined")
        return window;
      if (typeof self !== "undefined")
        return self;
      if (typeof global !== "undefined")
        return global;
      throw new Error("@sanity/ui: could not locate global scope");
    }
    var globalScope = getGlobalScope();
    var key$7 = Symbol.for("@sanity/ui/context/theme");
    globalScope[key$7] = globalScope[key$7] || React$2.createContext(null);
    var ThemeContext = globalScope[key$7];
    function ThemeProvider(props) {
      const parentTheme = React$2.useContext(ThemeContext);
      const { children, scheme = (parentTheme == null ? void 0 : parentTheme.scheme) || "light", theme: themeProp = (parentTheme == null ? void 0 : parentTheme.theme) || null, tone = (parentTheme == null ? void 0 : parentTheme.tone) || "default" } = props;
      const theme = React$2.useMemo(() => {
        if (!themeProp)
          return null;
        const { color: rootColor, layer: rootLayer, ...restTheme } = themeProp;
        const colorScheme = rootColor[scheme] || rootColor.light;
        const color2 = colorScheme[tone] || colorScheme.default;
        const layer = rootLayer || DEFAULT_THEME_LAYER;
        return { sanity: { ...restTheme, color: color2, layer } };
      }, [scheme, themeProp, tone]);
      const value = React$2.useMemo(() => themeProp && { version: 0, theme: themeProp, scheme, tone }, [themeProp, scheme, tone]);
      if (!theme) {
        return /* @__PURE__ */ jsxRuntime.jsx("pre", { children: 'ThemeProvider: no "theme" property provided' });
      }
      return /* @__PURE__ */ jsxRuntime.jsx(ThemeContext.Provider, { value, children: /* @__PURE__ */ jsxRuntime.jsx(Le, { theme, children }) });
    }
    function isRecord(value) {
      return Boolean(value && typeof value === "object");
    }
    function useRootTheme() {
      const value = React$2.useContext(ThemeContext);
      if (!value) {
        throw new Error("useRootTheme(): missing context value");
      }
      if (!isRecord(value) || value.version !== 0) {
        throw new Error("useRootTheme(): the context value is not compatible");
      }
      return value;
    }
    function ThemeColorProvider(props) {
      const { children, scheme, tone } = props;
      const root = useRootTheme();
      return /* @__PURE__ */ jsxRuntime.jsx(ThemeProvider, { scheme: scheme || root.scheme, theme: root.theme, tone, children });
    }
    function useTheme() {
      return Ze();
    }
    var MEDIA_STORE_CACHE = /* @__PURE__ */ new WeakMap();
    function _getMediaQuery(media, index2) {
      if (index2 === 0) {
        return "screen and (max-width: ".concat(media[index2] - 1, "px)");
      }
      if (index2 === media.length) {
        return "screen and (min-width: ".concat(media[index2 - 1], "px)");
      }
      return "screen and (min-width: ".concat(media[index2 - 1], "px) and (max-width: ").concat(media[index2] - 1, "px)");
    }
    function _createMediaStore(media) {
      const mediaLen = media.length;
      let sizes;
      const getSizes = () => {
        if (!sizes) {
          sizes = [];
          for (let index2 = mediaLen; index2 > -1; index2 -= 1) {
            const mediaQuery = _getMediaQuery(media, index2);
            sizes.push({ index: index2, mq: window.matchMedia(mediaQuery) });
          }
        }
        return sizes;
      };
      const getSnapshot = () => {
        for (const { index: index2, mq } of getSizes()) {
          if (mq.matches)
            return index2;
        }
        return 0;
      };
      const subscribe = (onStoreChange) => {
        const disposeFns = [];
        for (const { mq } of getSizes()) {
          const handleChange = () => {
            if (mq.matches)
              onStoreChange();
          };
          mq.addEventListener("change", handleChange);
          disposeFns.push(() => mq.removeEventListener("change", handleChange));
        }
        return () => {
          for (const disposeFn of disposeFns) {
            disposeFn();
          }
        };
      };
      return { getSnapshot, subscribe };
    }
    function getServerSnapshot$2() {
      return 0;
    }
    function useMediaIndex() {
      const theme = useTheme();
      const { media } = theme.sanity;
      let store = MEDIA_STORE_CACHE.get(media);
      if (!store) {
        store = _createMediaStore(media);
        MEDIA_STORE_CACHE.set(media, store);
      }
      return React$2.useSyncExternalStore(store.subscribe, store.getSnapshot, getServerSnapshot$2);
    }
    var useIsomorphicEffect = typeof window !== "undefined" ? React$2.useLayoutEffect : React$2.useEffect;
    function useForwardedRef(ref) {
      const innerRef = React$2.useRef(null);
      useIsomorphicEffect(() => {
        if (!ref)
          return;
        if (typeof ref === "function") {
          ref(innerRef.current);
        } else {
          ref.current = innerRef.current;
        }
      });
      return innerRef;
    }
    function useCustomValidity(ref, customValidity) {
      React$2.useEffect(() => {
        if (ref.current) {
          ref.current.setCustomValidity(customValidity || "");
        }
      }, [customValidity, ref]);
    }
    var BORDER_VALUE = "1px solid var(--card-border-color)";
    function responsiveBorderStyle() {
      return [border, borderTop, borderRight, borderBottom, borderLeft];
    }
    function border(props) {
      const { theme } = props;
      const { media } = theme.sanity;
      return _responsive(media, props.$border, (value) => value ? { "&&": { border: BORDER_VALUE } } : { "&&": { border: 0 } });
    }
    function borderTop(props) {
      const { theme } = props;
      const { media } = theme.sanity;
      return _responsive(media, props.$borderTop, (value) => value ? { "&&": { borderTop: BORDER_VALUE } } : { "&&": { borderTop: 0 } });
    }
    function borderRight(props) {
      const { theme } = props;
      const { media } = theme.sanity;
      return _responsive(media, props.$borderRight, (value) => value ? { "&&": { borderRight: BORDER_VALUE } } : { "&&": { borderRight: 0 } });
    }
    function borderBottom(props) {
      const { theme } = props;
      const { media } = theme.sanity;
      return _responsive(media, props.$borderBottom, (value) => value ? { "&&": { borderBottom: BORDER_VALUE } } : { "&&": { borderBottom: 0 } });
    }
    function borderLeft(props) {
      const { theme } = props;
      const { media } = theme.sanity;
      return _responsive(media, props.$borderLeft, (value) => value ? { "&&": { borderLeft: BORDER_VALUE } } : { "&&": { borderLeft: 0 } });
    }
    var BASE_STYLE$4 = { '&[data-as="ul"],&[data-as="ol"]': { listStyle: "none" } };
    var BOX_SIZING = { content: "content-box", border: "border-box" };
    var BOX_HEIGHT = { stretch: "stretch", fill: "100%" };
    function boxStyle() {
      return BASE_STYLE$4;
    }
    function responsiveBoxStyle() {
      return [responsiveBoxSizingStyle, responsiveBoxHeightStyle, responsiveBoxOverflowStyle, responsiveBoxDisplayStyle];
    }
    function responsiveBoxDisplayStyle(props) {
      const { theme } = props;
      const { media } = theme.sanity;
      return _responsive(media, props.$display, (display) => ({ "&:not([hidden])": { display } }));
    }
    function responsiveBoxSizingStyle(props) {
      const { theme } = props;
      const { media } = theme.sanity;
      return _responsive(media, props.$sizing, (sizing) => ({ boxSizing: BOX_SIZING[sizing] }));
    }
    function responsiveBoxHeightStyle(props) {
      const { theme } = props;
      const { media } = theme.sanity;
      return _responsive(media, props.$height, (height) => ({ height: BOX_HEIGHT[height] }));
    }
    function responsiveBoxOverflowStyle(props) {
      const { theme } = props;
      const { media } = theme.sanity;
      return _responsive(media, props.$overflow, (overflow) => ({ overflow }));
    }
    var BASE_STYLE$3 = { "&&:not([hidden])": { display: "flex" } };
    function responsiveFlexStyle() {
      return [BASE_STYLE$3, responsiveFlexAlignStyle, responsiveFlexGapStyle, responsiveFlexWrapStyle, responsiveFlexJustifyStyle, responsiveFlexDirectionStyle];
    }
    function responsiveFlexAlignStyle(props) {
      const { theme } = props;
      const { media } = theme.sanity;
      return _responsive(media, props.$align, (align) => {
        return { alignItems: align };
      });
    }
    function responsiveFlexGapStyle(props) {
      const { theme } = props;
      const { media, space: space2 } = theme.sanity;
      return _responsive(media, props.$gap, (gap2) => ({ gap: gap2 ? rem(space2[gap2]) : void 0 }));
    }
    function responsiveFlexWrapStyle(props) {
      const { theme } = props;
      const { media } = theme.sanity;
      return _responsive(media, props.$wrap, (wrap) => {
        return { flexWrap: wrap };
      });
    }
    function responsiveFlexJustifyStyle(props) {
      const { theme } = props;
      const { media } = theme.sanity;
      return _responsive(media, props.$justify, (justify) => {
        return { justifyContent: justify };
      });
    }
    function responsiveFlexDirectionStyle(props) {
      const { theme } = props;
      const { media } = theme.sanity;
      return _responsive(media, props.$direction, (direction) => {
        return { flexDirection: direction };
      });
    }
    var BASE_STYLE$2 = { minWidth: 0, minHeight: 0 };
    function flexItemStyle() {
      return [BASE_STYLE$2, responsiveFlexItemStyle];
    }
    function responsiveFlexItemStyle(props) {
      const { theme } = props;
      const { media } = theme.sanity;
      if (!props.$flex)
        return EMPTY_ARRAY;
      return _responsive(media, props.$flex, (flex) => ({ flex }));
    }
    function focusRingBorderStyle(border2) {
      return "inset 0 0 0 ".concat(border2.width, "px ").concat(border2.color);
    }
    function focusRingStyle(opts) {
      const { base, border: border2, focusRing } = opts;
      const focusRingOutsetWidth = focusRing.offset + focusRing.width;
      const focusRingInsetWidth = 0 - focusRing.offset;
      const bgColor = base ? base.bg : "var(--card-bg-color)";
      return [focusRingInsetWidth > 0 && "inset 0 0 0 ".concat(focusRingInsetWidth, "px var(--card-focus-ring-color)"), border2 && focusRingBorderStyle(border2), focusRingInsetWidth < 0 && "0 0 0 ".concat(0 - focusRingInsetWidth, "px ").concat(bgColor), focusRingOutsetWidth > 0 && "0 0 0 ".concat(focusRingOutsetWidth, "px var(--card-focus-ring-color)")].filter(Boolean).join(",");
    }
    var GRID_CSS = { "&&:not([hidden])": { display: "grid" }, '&[data-as="ul"],&[data-as="ol"]': { listStyle: "none" } };
    var GRID_AUTO_COLUMS = { auto: "auto", min: "min-content", max: "max-content", fr: "minmax(0, 1fr)" };
    var GRID_AUTO_ROWS = { auto: "auto", min: "min-content", max: "max-content", fr: "minmax(0, 1fr)" };
    function responsiveGridStyle() {
      return [GRID_CSS, responsiveGridAutoFlowStyle, responsiveGridAutoRowsStyle, responsiveGridAutoColsStyle, responsiveGridColumnsStyle, responsiveGridRowsStyle, responsiveGridGapStyle, responsiveGridGapXStyle, responsiveGridGapYStyle];
    }
    function responsiveGridAutoFlowStyle(props) {
      const { theme } = props;
      const { media } = theme.sanity;
      return _responsive(media, props.$autoFlow, (autoFlow) => ({ gridAutoFlow: autoFlow }));
    }
    function responsiveGridAutoRowsStyle(props) {
      const { theme } = props;
      const { media } = theme.sanity;
      return _responsive(media, props.$autoRows, (autoRows) => ({ gridAutoRows: autoRows && GRID_AUTO_ROWS[autoRows] }));
    }
    function responsiveGridAutoColsStyle(props) {
      const { theme } = props;
      const { media } = theme.sanity;
      return _responsive(media, props.$autoCols, (autoCols) => ({ gridAutoColumns: autoCols && GRID_AUTO_COLUMS[autoCols] }));
    }
    function responsiveGridColumnsStyle(props) {
      const { theme } = props;
      const { media } = theme.sanity;
      return _responsive(media, props.$columns, (columns) => ({ gridTemplateColumns: columns && "repeat(".concat(columns, ",minmax(0,1fr));") }));
    }
    function responsiveGridRowsStyle(props) {
      const { theme } = props;
      const { media } = theme.sanity;
      return _responsive(media, props.$rows, (rows) => ({ gridTemplateRows: rows && "repeat(".concat(rows, ",minmax(0,1fr));") }));
    }
    function responsiveGridGapStyle(props) {
      const { theme } = props;
      const { media, space: space2 } = theme.sanity;
      return _responsive(media, props.$gap, (gap2) => ({ gridGap: gap2 ? rem(space2[gap2]) : void 0 }));
    }
    function responsiveGridGapXStyle(props) {
      const { theme } = props;
      const { media, space: space2 } = theme.sanity;
      return _responsive(media, props.$gapX, (gapX) => ({ columnGap: gapX ? rem(space2[gapX]) : void 0 }));
    }
    function responsiveGridGapYStyle(props) {
      const { theme } = props;
      const { media, space: space2 } = theme.sanity;
      return _responsive(media, props.$gapY, (gapY) => ({ rowGap: gapY ? rem(space2[gapY]) : void 0 }));
    }
    function responsiveGridItemStyle() {
      return [responsiveGridItemRowStyle, responsiveGridItemRowStartStyle, responsiveGridItemRowEndStyle, responsiveGridItemColumnStyle, responsiveGridItemColumnStartStyle, responsiveGridItemColumnEndStyle];
    }
    var GRID_ITEM_ROW = { auto: "auto", full: "1 / -1" };
    var GRID_ITEM_COLUMN = { auto: "auto", full: "1 / -1" };
    function responsiveGridItemRowStyle(props) {
      const { theme } = props;
      const { media } = theme.sanity;
      return _responsive(media, props.$row, (row) => {
        if (typeof row === "number") {
          return { gridRow: "span ".concat(row, " / span ").concat(row) };
        }
        return { gridRow: GRID_ITEM_ROW[row] };
      });
    }
    function responsiveGridItemRowStartStyle(props) {
      const { theme } = props;
      const { media } = theme.sanity;
      return _responsive(media, props.$rowStart, (rowStart) => ({ gridRowStart: rowStart }));
    }
    function responsiveGridItemRowEndStyle(props) {
      const { theme } = props;
      const { media } = theme.sanity;
      return _responsive(media, props.$rowEnd, (rowEnd) => ({ gridRowEnd: rowEnd }));
    }
    function responsiveGridItemColumnStyle(props) {
      const { theme } = props;
      const { media } = theme.sanity;
      return _responsive(media, props.$column, (column) => {
        if (typeof column === "number") {
          return { gridColumn: "span ".concat(column, " / span ").concat(column) };
        }
        return { gridColumn: GRID_ITEM_COLUMN[column] };
      });
    }
    function responsiveGridItemColumnStartStyle(props) {
      const { theme } = props;
      const { media } = theme.sanity;
      return _responsive(media, props.$columnStart, (columnStart) => ({ gridColumnStart: columnStart }));
    }
    function responsiveGridItemColumnEndStyle(props) {
      const { theme } = props;
      const { media } = theme.sanity;
      return _responsive(media, props.$columnEnd, (columnEnd) => ({ gridColumnEnd: columnEnd }));
    }
    function responsiveInputPaddingStyle(props) {
      const { $fontSize, $iconLeft, $iconRight, $padding, $space, theme } = props;
      const { fonts: fonts2, media, space: spaceScale } = theme.sanity;
      const len = Math.max($padding.length, $space.length, $fontSize.length);
      const _padding = [];
      const _space = [];
      const _fontSize = [];
      for (let i = 0; i < len; i += 1) {
        _fontSize[i] = $fontSize[i] === void 0 ? _fontSize[i - 1] : $fontSize[i];
        _padding[i] = $padding[i] === void 0 ? _padding[i - 1] : $padding[i];
        _space[i] = $space[i] === void 0 ? _space[i - 1] : $space[i];
      }
      return _responsive(media, _padding, (_2, i) => {
        const size2 = fonts2.text.sizes[_fontSize[i]] || fonts2.text.sizes[2];
        const emSize = size2.lineHeight - size2.ascenderHeight - size2.descenderHeight;
        const p = spaceScale[_padding[i]];
        const s = spaceScale[_space[i]];
        const styles = { paddingTop: rem(p - size2.ascenderHeight), paddingRight: rem(p), paddingBottom: rem(p - size2.descenderHeight), paddingLeft: rem(p) };
        if ($iconRight)
          styles.paddingRight = rem(p + emSize + s);
        if ($iconLeft)
          styles.paddingLeft = rem(p + emSize + s);
        return styles;
      });
    }
    function responsiveInputPaddingIconRightStyle(props) {
      return responsiveInputPaddingStyle({ ...props, $iconRight: true });
    }
    var ROOT_STYLE = Ae(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  &:not([hidden]) {\n    display: flex;\n  }\n\n  align-items: center;\n"])));
    function textInputRootStyle() {
      return ROOT_STYLE;
    }
    function textInputBaseStyle(props) {
      const { theme, $scheme, $tone, $weight } = props;
      const font = theme.sanity.fonts.text;
      const color2 = theme.sanity.color.input;
      return Ae(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    appearance: none;\n    background: none;\n    border: 0;\n    border-radius: 0;\n    outline: none;\n    width: 100%;\n    box-sizing: border-box;\n    font-family: ", ";\n    font-weight: ", ";\n    margin: 0;\n    position: relative;\n    z-index: 1;\n    display: block;\n\n    /* NOTE: This is a hack to disable Chrome\u2019s autofill styles */\n    &:-webkit-autofill,\n    &:-webkit-autofill:hover,\n    &:-webkit-autofill:focus,\n    &:-webkit-autofill:active {\n      -webkit-text-fill-color: var(--input-fg-color) !important;\n      transition: background-color 5000s;\n      transition-delay: 86400s /* 24h */;\n    }\n\n    /* &:is(textarea) */\n    &[data-as='textarea'] {\n      resize: none;\n    }\n\n    color: var(--input-fg-color);\n\n    &::placeholder {\n      color: var(--input-placeholder-color);\n    }\n\n    &[data-scheme='", "'][data-tone='", "'] {\n      --input-fg-color: ", ";\n      --input-placeholder-color: ", ";\n\n      /* enabled */\n      &:not(:invalid):not(:disabled):not(:read-only) {\n        --input-fg-color: ", ";\n        --input-placeholder-color: ", ";\n      }\n\n      /* disabled */\n      &:not(:invalid):disabled {\n        --input-fg-color: ", ";\n        --input-placeholder-color: ", ";\n      }\n\n      /* invalid */\n      &:invalid {\n        --input-fg-color: ", ";\n        --input-placeholder-color: ", ";\n      }\n\n      /* readOnly */\n      &:read-only {\n        --input-fg-color: ", ";\n        --input-placeholder-color: ", ";\n      }\n    }\n  "])), font.family, $weight && font.weights[$weight] || font.weights.regular, $scheme, $tone, color2.default.enabled.fg, color2.default.enabled.placeholder, color2.default.enabled.fg, color2.default.enabled.placeholder, color2.default.disabled.fg, color2.default.disabled.placeholder, color2.invalid.enabled.fg, color2.invalid.enabled.placeholder, color2.default.readOnly.fg, color2.default.readOnly.placeholder);
    }
    function textInputFontSizeStyle(props) {
      const { theme } = props;
      const { fonts: fonts2, media } = theme.sanity;
      return _responsive(media, props.$fontSize, (sizeIndex) => {
        const size2 = fonts2.text.sizes[sizeIndex] || fonts2.text.sizes[2];
        return { fontSize: rem(size2.fontSize), lineHeight: size2.lineHeight / size2.fontSize };
      });
    }
    function textInputRepresentationStyle(props) {
      const { $hasPrefix, $hasSuffix, $scheme, $tone, theme } = props;
      const { focusRing, input } = theme.sanity;
      const color2 = theme.sanity.color.input;
      return Ae(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n    --input-box-shadow: none;\n\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    display: block;\n    pointer-events: none;\n    z-index: 0;\n\n    background-color: var(--card-bg-color);\n    box-shadow: var(--input-box-shadow);\n\n    border-top-left-radius: ", ";\n    border-bottom-left-radius: ", ";\n    border-top-right-radius: ", ";\n    border-bottom-right-radius: ", ";\n\n    &[data-scheme='", "'][data-tone='", "'] {\n      --card-bg-color: ", ";\n      --card-fg-color: ", ";\n\n      /* enabled */\n      *:not(:disabled) + &[data-border] {\n        --input-box-shadow: ", ";\n      }\n\n      /* invalid */\n      *:not(:disabled):invalid + & {\n        --card-bg-color: ", ";\n        --card-fg-color: ", ";\n\n        &[data-border] {\n          --input-box-shadow: ", ";\n        }\n      }\n\n      /* focused */\n      *:not(:disabled):focus + & {\n        &[data-border] {\n          --input-box-shadow: ", ";\n        }\n\n        &:not([data-border]) {\n          --input-box-shadow: ", ";\n        }\n      }\n\n      /* disabled */\n      *:disabled + & {\n        --card-bg-color: ", " !important;\n        --card-fg-color: ", " !important;\n\n        &[data-border] {\n          --input-box-shadow: ", ";\n        }\n      }\n\n      /* readOnly */\n      *:read-only + & {\n        --card-bg-color: ", " !important;\n        --card-fg-color: ", " !important;\n      }\n\n      /* hovered */\n      @media (hover: hover) {\n        *:not(:disabled):not(:read-only):not(:invalid):hover + & {\n          --card-bg-color: ", ";\n          --card-fg-color: ", ";\n        }\n\n        *:not(:disabled):not(:read-only):not(:invalid):not(:focus):hover + &[data-border] {\n          --input-box-shadow: ", ";\n        }\n      }\n    }\n  "])), $hasPrefix ? 0 : void 0, $hasPrefix ? 0 : void 0, $hasSuffix ? 0 : void 0, $hasSuffix ? 0 : void 0, $scheme, $tone, color2.default.enabled.bg, color2.default.enabled.fg, focusRingBorderStyle({ color: color2.default.enabled.border, width: input.border.width }), color2.invalid.enabled.bg, color2.invalid.enabled.fg, focusRingBorderStyle({ color: color2.invalid.enabled.border, width: input.border.width }), focusRingStyle({ border: { color: color2.default.enabled.border, width: input.border.width }, focusRing }), focusRingStyle({ focusRing }), color2.default.disabled.bg, color2.default.disabled.fg, focusRingBorderStyle({ color: color2.default.disabled.border, width: input.border.width }), color2.default.readOnly.bg, color2.default.readOnly.fg, color2.default.hovered.bg, color2.default.hovered.fg, focusRingBorderStyle({ color: color2.default.hovered.border, width: input.border.width }));
    }
    function responsiveMarginStyle(props) {
      const { theme } = props;
      return [_getResponsiveSpace(theme, ["margin"], props.$margin), _getResponsiveSpace(theme, ["marginLeft", "marginRight"], props.$marginX), _getResponsiveSpace(theme, ["marginTop", "marginBottom"], props.$marginY), _getResponsiveSpace(theme, ["marginTop"], props.$marginTop), _getResponsiveSpace(theme, ["marginRight"], props.$marginRight), _getResponsiveSpace(theme, ["marginBottom"], props.$marginBottom), _getResponsiveSpace(theme, ["marginLeft"], props.$marginLeft)].filter(Boolean);
    }
    function responsivePaddingStyle(props) {
      const { theme } = props;
      return [_getResponsiveSpace(theme, ["padding"], props.$padding), _getResponsiveSpace(theme, ["paddingLeft", "paddingRight"], props.$paddingX), _getResponsiveSpace(theme, ["paddingTop", "paddingBottom"], props.$paddingY), _getResponsiveSpace(theme, ["paddingTop"], props.$paddingTop), _getResponsiveSpace(theme, ["paddingRight"], props.$paddingRight), _getResponsiveSpace(theme, ["paddingBottom"], props.$paddingBottom), _getResponsiveSpace(theme, ["paddingLeft"], props.$paddingLeft)].filter(Boolean);
    }
    function responsiveRadiusStyle(props) {
      const { theme } = props;
      const { media, radius } = theme.sanity;
      return _responsive(media, props.$radius, (radiusIndex) => ({ borderRadius: rem(radius[radiusIndex]) }));
    }
    function toBoxShadow(shadow, color2) {
      return "".concat(shadow.map(rem).join(" "), " ").concat(color2);
    }
    function shadowStyle(shadow) {
      if (!shadow)
        return EMPTY_RECORD;
      const outline = "0 0 0 ".concat(rem(1), " var(--card-shadow-outline-color)");
      const umbra = toBoxShadow(shadow.umbra, "var(--card-shadow-umbra-color)");
      const penumbra = toBoxShadow(shadow.penumbra, "var(--card-shadow-penumbra-color)");
      const ambient = toBoxShadow(shadow.ambient, "var(--card-shadow-ambient-color)");
      return { boxShadow: "".concat(outline, ", ").concat(umbra, ", ").concat(penumbra, ", ").concat(ambient) };
    }
    function responsiveShadowStyle(props) {
      const { theme } = props;
      const { media, shadows } = theme.sanity;
      return _responsive(media, props.$shadow, (shadow) => shadowStyle(shadows[shadow]));
    }
    function textBaseStyle(props) {
      const { $accent, $muted, theme } = props;
      const { weights } = theme.sanity.fonts.text;
      return Ae(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n    color: var(--card-fg-color);\n\n    ", "\n\n    ", "\n\n    & code {\n      font-family: ", ";\n      border-radius: 1px;\n      background-color: var(--card-code-bg-color);\n      color: var(--card-code-fg-color);\n    }\n\n    & a {\n      text-decoration: none;\n      border-radius: 1px;\n      color: var(--card-link-color);\n      outline: none;\n\n      @media (hover: hover) {\n        &:hover {\n          text-decoration: underline;\n        }\n      }\n\n      &:focus {\n        box-shadow: 0 0 0 1px var(--card-bg-color), 0 0 0 3px var(--card-focus-ring-color);\n      }\n\n      &:focus:not(:focus-visible) {\n        box-shadow: none;\n      }\n    }\n\n    & strong {\n      font-weight: ", ";\n    }\n\n    & svg {\n      /* Certain popular CSS libraries changes the defaults for SVG display */\n      /* Make sure SVGs are rendered as inline elements */\n      display: inline;\n    }\n\n    & [data-sanity-icon] {\n      vertical-align: baseline;\n    }\n  "])), $accent && Ae(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n      color: var(--card-accent-fg-color);\n    "]))), $muted && Ae(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n      color: var(--card-muted-fg-color);\n    "]))), theme.sanity.fonts.code.family, weights.bold);
    }
    var Root$E = styled.div(responsiveTextFont, responsiveTextAlignStyle, textBaseStyle);
    var SpanWithTextOverflow$2 = styled.span(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  display: block;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  overflow: clip;\n"])));
    var Text = React$2.forwardRef(function Text2(props, ref) {
      const { accent = false, align, children: childrenProp, muted = false, size: size2 = 2, textOverflow, weight, ...restProps } = props;
      let children = childrenProp;
      if (textOverflow === "ellipsis") {
        children = /* @__PURE__ */ jsxRuntime.jsx(SpanWithTextOverflow$2, { children });
      }
      return /* @__PURE__ */ jsxRuntime.jsx(Root$E, { "data-ui": "Text", ...restProps, $accent: accent, $align: useArrayProp(align), $muted: muted, ref, $size: useArrayProp(size2), $weight: weight, children: /* @__PURE__ */ jsxRuntime.jsx("span", { children }) });
    });
    var avatarStyle = { root: avatarRootStyle, arrow: avatarArrowStyle, bgStroke: avatarBgStrokeStyle, stroke: avatarStrokeStyle, initials: avatarInitialsStyle };
    function avatarArrowStyle() {
      return { position: "absolute", boxSizing: "border-box", zIndex: 0, opacity: 0, transition: "all 0.2s linear", transform: "rotate(-90deg) translate3d(0, 6px, 0)", left: 0, right: 0, top: 0, bottom: 0, "& > svg": { width: "11px", height: "7px", position: "absolute", top: "-5px", left: "50%", transform: "translateX(-6px)", "&:not([hidden])": { display: "block" } }, "[data-arrow-position='inside'] > &": { transform: "rotate(-90deg) translate3d(0, 6px, 0)", opacity: 0 }, "[data-arrow-position='top'] > &": { opacity: 1, transform: "rotate(0deg)" }, "[data-arrow-position='bottom'] > &": { opacity: 1, transform: "rotate(-180deg)" } };
    }
    function avatarRootStyle(props) {
      const { $color, theme } = props;
      const { focusRing } = theme.sanity;
      return {
        backgroundColor: $color,
        position: "relative",
        boxSizing: "border-box",
        userSelect: "none",
        boxShadow: "0 0 0 1px var(--card-bg-color)",
        '&[data-status="inactive"]': { opacity: 0.5 },
        "&>svg": { "&:not([hidden])": { display: "block" } },
        /* &:is(button) */
        '&[data-as="button"]': { "-webkit-font-smoothing": "inherit", appearance: "none", margin: 0, padding: 0, border: 0, font: "inherit", color: "inherit", outline: "none", "&:focus": { boxShadow: focusRingStyle({ focusRing }) }, "&:focus:not(:focus-visible)": { boxShadow: "none" } }
      };
    }
    function responsiveAvatarSizeStyle(props) {
      const { theme } = props;
      const { avatar, media } = theme.sanity;
      return _responsive(media, props.$size, (size2) => {
        const avatarSize = avatar.sizes[size2] || avatar.sizes[0];
        return { width: rem(avatarSize.size), height: rem(avatarSize.size), borderRadius: rem(avatarSize.size / 2), "&>svg": { width: rem(avatarSize.size), height: rem(avatarSize.size), borderRadius: rem(avatarSize.size / 2) } };
      });
    }
    function avatarInitialsStyle(props) {
      const { theme } = props;
      const { base } = theme.sanity.color;
      return { width: "100%", height: "100%", color: base.fg, alignItems: "center", justifyContent: "center", textTransform: "uppercase", textAlign: "center", borderRadius: "50%", "&:not([hidden])": { display: "flex" } };
    }
    function avatarBgStrokeStyle() {
      return { strokeWidth: "4px", stroke: "var(--card-bg-color)" };
    }
    function avatarStrokeStyle() {
      return { strokeWidth: "3px", '[data-status="editing"] &': { strokeSasharray: "2 4", strokeLinecap: "round" } };
    }
    var Root$D = styled.div(responsiveAvatarSizeStyle, avatarStyle.root);
    var Arrow = styled.div(avatarStyle.arrow);
    var BgStroke = styled.ellipse(avatarStyle.bgStroke);
    var Stroke = styled.ellipse(avatarStyle.stroke);
    var Initials = styled.div(avatarStyle.initials);
    React$2.forwardRef(function Avatar2(props, ref) {
      const { as: asProp, color: colorKey = "gray", src, title, initials, onImageLoadError, arrowPosition: arrowPositionProp, animateArrowFrom, status = "online", size: sizeProp = 0, ...restProps } = props;
      const as = ReactIs$1.isValidElementType(asProp) ? asProp : "div";
      const size2 = useArrayProp(sizeProp);
      const theme = useTheme();
      const color2 = theme.sanity.color.spot[colorKey] || theme.sanity.color.spot.gray;
      const avatarSize = theme.sanity.avatar.sizes[size2[0]] || theme.sanity.avatar.sizes[0];
      const _sizeRem = avatarSize.size;
      const _radius = _sizeRem / 2;
      const elementId = React$2.useId();
      const [arrowPosition, setArrowPosition] = React$2.useState(animateArrowFrom || arrowPositionProp || "inside");
      const [imageFailed, setImageFailed] = React$2.useState(false);
      const imageId = "avatar-image-".concat(elementId);
      React$2.useEffect(() => {
        if (arrowPosition === arrowPositionProp)
          return void 0;
        const raf = requestAnimationFrame(() => setArrowPosition(arrowPositionProp));
        return () => cancelAnimationFrame(raf);
      }, [arrowPosition, arrowPositionProp]);
      React$2.useEffect(() => {
        if (src)
          setImageFailed(false);
      }, [src]);
      const handleImageError = React$2.useCallback(() => {
        setImageFailed(true);
        if (onImageLoadError) {
          onImageLoadError(new Error("Avatar: the image failed to load"));
        }
      }, [onImageLoadError]);
      const initialsSize = React$2.useMemo(() => size2.map((s) => s === 0 ? 0 : s + 1), [size2]);
      return /* @__PURE__ */ jsxRuntime.jsxs(Root$D, { as, "data-as": typeof as === "string" ? as : void 0, "data-ui": "Avatar", ...restProps, $size: size2, $color: color2, "aria-label": title, "data-arrow-position": arrowPosition, "data-status": status, ref, title, children: [/* @__PURE__ */ jsxRuntime.jsx(Arrow, { children: /* @__PURE__ */ jsxRuntime.jsx("svg", { width: "11", height: "7", viewBox: "0 0 11 7", fill: "none", children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M6.67948 1.50115L11 7L0 7L4.32052 1.50115C4.92109 0.736796 6.07891 0.736795 6.67948 1.50115Z", fill: color2 }) }) }), !imageFailed && src && /* @__PURE__ */ jsxRuntime.jsxs("svg", { viewBox: "0 0 ".concat(_sizeRem, " ").concat(_sizeRem), fill: "none", children: [/* @__PURE__ */ jsxRuntime.jsx("defs", { children: /* @__PURE__ */ jsxRuntime.jsx("pattern", { id: imageId, patternContentUnits: "objectBoundingBox", width: "1", height: "1", children: /* @__PURE__ */ jsxRuntime.jsx("image", { href: src, width: "1", height: "1", onError: handleImageError }) }) }), /* @__PURE__ */ jsxRuntime.jsx("circle", { cx: _radius, cy: _radius, r: _radius, fill: "url(#".concat(imageId, ")") }), /* @__PURE__ */ jsxRuntime.jsx(BgStroke, { cx: _radius, cy: _radius, rx: _radius, ry: _radius, vectorEffect: "non-scaling-stroke" }), /* @__PURE__ */ jsxRuntime.jsx(Stroke, { cx: _radius, cy: _radius, rx: _radius, ry: _radius, stroke: color2, vectorEffect: "non-scaling-stroke" })] }), (imageFailed || !src) && initials && /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: /* @__PURE__ */ jsxRuntime.jsx(Initials, { children: /* @__PURE__ */ jsxRuntime.jsx(Text, { as: "span", size: initialsSize, children: /* @__PURE__ */ jsxRuntime.jsx("strong", { children: initials }) }) }) })] });
    });
    function _responsiveAvatarCounterSizeStyle(props) {
      const { theme } = props;
      const { avatar, media } = theme.sanity;
      return _responsive(media, props.$size, (size2) => {
        const avatarSize = avatar.sizes[size2];
        if (!avatarSize)
          return EMPTY_RECORD;
        return { borderRadius: rem(avatarSize.size / 2), minWidth: rem(avatarSize.size), height: rem(avatarSize.size) };
      });
    }
    function _avatarCounterBaseStyle(props) {
      const { theme } = props;
      return Ae(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n    user-select: none;\n    color: inherit;\n    color: var(--card-fg-color);\n    background: var(--card-bg-color);\n    box-shadow: 0 0 0 1px var(--card-bg-color), inset 0 0 0 1.5px var(--card-hairline-hard-color);\n    padding: 0 ", ";\n\n    &:not([hidden]) {\n      display: flex;\n    }\n  "])), rem(theme.sanity.space[2]));
    }
    var Root$C = styled.div(_responsiveAvatarCounterSizeStyle, _avatarCounterBaseStyle);
    var AvatarCounter = React$2.forwardRef(function AvatarCounter2(props, ref) {
      const { count, size: sizeProp = 0 } = props;
      const size2 = useArrayProp(sizeProp);
      const counterSize = React$2.useMemo(() => size2.map((s) => s === 0 ? 0 : s + 1), [size2]);
      return /* @__PURE__ */ jsxRuntime.jsx(Root$C, { $size: size2, "data-ui": "AvatarCounter", ref, children: /* @__PURE__ */ jsxRuntime.jsx(Text, { as: "span", size: counterSize, children: /* @__PURE__ */ jsxRuntime.jsx("strong", { children: count }) }) });
    });
    function childrenToElementArray(children) {
      const childrenArray = Array.isArray(children) ? children : [children];
      return childrenArray.filter((node) => reactIsExports$1.isElement(node) || reactIsExports$1.isFragment(node) || typeof node === "string");
    }
    var BASE_STYLES = Ae(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  white-space: nowrap;\n\n  & > div {\n    vertical-align: top;\n\n    &:not([hidden]) {\n      display: inline-block;\n    }\n  }\n"])));
    function avatarStackStyle() {
      return BASE_STYLES;
    }
    function responsiveAvatarStackSizeStyle(props) {
      const { theme } = props;
      const { avatar, media } = theme.sanity;
      return _responsive(media, props.$size, (size2) => {
        const avatarSize = avatar.sizes[size2];
        if (!avatarSize)
          return EMPTY_RECORD;
        return { "& > div + div": { marginLeft: rem(avatarSize.distance) } };
      });
    }
    var Root$B = styled.div(responsiveAvatarStackSizeStyle, avatarStackStyle);
    React$2.forwardRef(function AvatarStack2(props, ref) {
      const { children: childrenProp, maxLength: maxLengthProp = 4, size: sizeProp = 0, ...restProps } = props;
      const children = childrenToElementArray(childrenProp).filter((child) => typeof child !== "string");
      const maxLength = Math.max(maxLengthProp, 0);
      const size2 = useArrayProp(sizeProp);
      const len = children.length;
      const visibleCount = maxLength - 1;
      const extraCount = len - visibleCount;
      const visibleChildren = extraCount > 1 ? children.slice(extraCount, len) : children;
      return /* @__PURE__ */ jsxRuntime.jsxs(Root$B, { "data-ui": "AvatarStack", ...restProps, ref, $size: size2, children: [len === 0 && /* @__PURE__ */ jsxRuntime.jsx("div", { children: /* @__PURE__ */ jsxRuntime.jsx(AvatarCounter, { count: len }) }), len !== 0 && extraCount > 1 && /* @__PURE__ */ jsxRuntime.jsx("div", { children: /* @__PURE__ */ jsxRuntime.jsx(AvatarCounter, { count: extraCount, size: size2 }) }), visibleChildren.map((child, childIndex) => /* @__PURE__ */ jsxRuntime.jsx("div", { children: React$2.cloneElement(child, { size: size2 }) }, String(childIndex)))] });
    });
    var Root$A = styled.div(boxStyle, flexItemStyle, responsiveBoxStyle, responsiveGridItemStyle, responsiveMarginStyle, responsivePaddingStyle);
    var Box = React$2.forwardRef(function Box2(props, ref) {
      const { as: asProp = "div", column, columnStart, columnEnd, display = "block", flex, height, margin = 0, marginX, marginY, marginTop, marginRight, marginBottom, marginLeft, overflow, padding = 0, paddingX, paddingY, paddingTop, paddingRight, paddingBottom, paddingLeft, row, rowStart, rowEnd, sizing, ...restProps } = props;
      return /* @__PURE__ */ jsxRuntime.jsx(Root$A, { "data-as": typeof asProp === "string" ? asProp : void 0, "data-ui": "Box", ...restProps, $column: useArrayProp(column), $columnStart: useArrayProp(columnStart), $columnEnd: useArrayProp(columnEnd), $display: useArrayProp(display), $flex: useArrayProp(flex), $height: useArrayProp(height), $margin: useArrayProp(margin), $marginX: useArrayProp(marginX), $marginY: useArrayProp(marginY), $marginTop: useArrayProp(marginTop), $marginRight: useArrayProp(marginRight), $marginBottom: useArrayProp(marginBottom), $marginLeft: useArrayProp(marginLeft), $overflow: useArrayProp(overflow), $padding: useArrayProp(padding), $paddingX: useArrayProp(paddingX), $paddingY: useArrayProp(paddingY), $paddingTop: useArrayProp(paddingTop), $paddingRight: useArrayProp(paddingRight), $paddingBottom: useArrayProp(paddingBottom), $paddingLeft: useArrayProp(paddingLeft), $row: useArrayProp(row), $rowStart: useArrayProp(rowStart), $rowEnd: useArrayProp(rowEnd), $sizing: useArrayProp(sizing), as: asProp, ref, children: props.children });
    });
    function labelBaseStyle(props) {
      const { $accent, $muted, theme } = props;
      const { fonts: fonts2 } = theme.sanity;
      return Ae(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n    text-transform: uppercase;\n\n    ", "\n\n    ", "\n\n    & code {\n      font-family: ", ";\n      border-radius: 1px;\n    }\n\n    & a {\n      text-decoration: none;\n      border-radius: 1px;\n    }\n\n    & svg {\n      /* Certain popular CSS libraries changes the defaults for SVG display */\n      /* Make sure SVGs are rendered as inline elements */\n      display: inline;\n    }\n\n    & [data-sanity-icon] {\n      vertical-align: baseline;\n    }\n  "])), $accent && Ae(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["\n      color: var(--card-accent-fg-color);\n    "]))), $muted && Ae(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["\n      color: var(--card-muted-fg-color);\n    "]))), fonts2.code.family);
    }
    var Root$z = styled.div(responsiveLabelFont, responsiveTextAlignStyle, labelBaseStyle);
    var SpanWithTextOverflow$1 = styled.span(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["\n  display: block;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  overflow: clip;\n"])));
    var Label = React$2.forwardRef(function Label2(props, ref) {
      const { accent, align, children: childrenProp, muted = false, size: size2 = 2, textOverflow, weight, ...restProps } = props;
      let children = childrenProp;
      if (textOverflow === "ellipsis") {
        children = /* @__PURE__ */ jsxRuntime.jsx(SpanWithTextOverflow$1, { children });
      } else {
        children = /* @__PURE__ */ jsxRuntime.jsx("span", { children });
      }
      return /* @__PURE__ */ jsxRuntime.jsx(Root$z, { "data-ui": "Label", ...restProps, $accent: accent, $align: useArrayProp(align), $muted: muted, $size: useArrayProp(size2), $weight: weight, ref, children });
    });
    function badgeStyle(props) {
      const { $mode, $tone, theme } = props;
      const palette = theme.sanity.color[$mode === "outline" ? "muted" : "solid"];
      const color2 = palette[$tone] || palette.default;
      return { backgroundColor: color2.enabled.bg, color: color2.enabled.fg, boxShadow: "inset 0 0 0 1px ".concat(color2.enabled.border), cursor: "default", "&:not([hidden])": { display: "inline-block" } };
    }
    var Root$y = styled(Box)(responsiveRadiusStyle, badgeStyle);
    React$2.forwardRef(function Badge2(props, ref) {
      const { children, fontSize: fontSize2, mode = "default", padding = 1, radius = 2, tone = "default", ...restProps } = props;
      return /* @__PURE__ */ jsxRuntime.jsx(Root$y, { "data-ui": "Badge", ...restProps, $mode: mode, $tone: tone, $radius: useArrayProp(radius), padding: useArrayProp(padding), ref, children: /* @__PURE__ */ jsxRuntime.jsx(Label, { size: fontSize2, children }) });
    });
    var Root$x = styled(Box)(flexItemStyle, responsiveFlexStyle);
    var Flex$1 = React$2.forwardRef(function Flex2(props, ref) {
      const { align, as, direction = "row", gap: gap2, justify, wrap, ...restProps } = props;
      return /* @__PURE__ */ jsxRuntime.jsx(Root$x, { "data-ui": "Flex", ...restProps, $align: useArrayProp(align), $direction: useArrayProp(direction), $gap: useArrayProp(gap2), $justify: useArrayProp(justify), $wrap: useArrayProp(wrap), forwardedAs: as, ref });
    });
    var rotate$1 = We(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n"])));
    var Root$w = styled(Text)(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["\n  & > span > svg {\n    animation: ", " 500ms linear infinite;\n  }\n"])), rotate$1);
    var Spinner = React$2.forwardRef(function Spinner2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx(Root$w, { "data-ui": "Spinner", ...props, ref, children: /* @__PURE__ */ jsxRuntime.jsx(SpinnerIcon, {}) });
    });
    function _colorVarsStyle(base, color2) {
      let checkered = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var _a2, _b, _c, _d, _e2, _f, _g, _h;
      return {
        // Base
        // @todo: rename to "--base-"?
        "--card-shadow-outline-color": base.shadow.outline,
        "--card-shadow-umbra-color": base.shadow.umbra,
        "--card-shadow-penumbra-color": base.shadow.penumbra,
        "--card-shadow-ambient-color": base.shadow.ambient,
        "--card-focus-ring-color": base.focusRing,
        // Card
        "--card-bg-color": color2.bg,
        "--card-bg-image": checkered ? "repeating-conic-gradient(".concat(color2.bg, " 0% 25%, ").concat(color2.bg2 || color2.bg, " 0% 50%)") : void 0,
        "--card-fg-color": color2.fg,
        "--card-border-color": color2.border,
        "--card-muted-fg-color": (_a2 = color2.muted) == null ? void 0 : _a2.fg,
        "--card-accent-fg-color": (_b = color2.accent) == null ? void 0 : _b.fg,
        "--card-link-fg-color": (_c = color2.link) == null ? void 0 : _c.fg,
        "--card-code-bg-color": (_d = color2.code) == null ? void 0 : _d.bg,
        "--card-code-fg-color": (_e2 = color2.code) == null ? void 0 : _e2.fg,
        "--card-skeleton-color-from": (_f = color2.skeleton) == null ? void 0 : _f.from,
        "--card-skeleton-color-to": (_g = color2.skeleton) == null ? void 0 : _g.to,
        // @todo: deprecate
        "--card-link-color": (_h = color2.link) == null ? void 0 : _h.fg,
        "--card-hairline-soft-color": color2.border,
        "--card-hairline-hard-color": color2.border
      };
    }
    function buttonBaseStyles() {
      return Ae(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["\n    -webkit-font-smoothing: inherit;\n    appearance: none;\n    display: inline-flex;\n    align-items: center;\n    font: inherit;\n    border: 0;\n    outline: none;\n    user-select: none;\n    text-decoration: none;\n    border: 0;\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n    white-space: nowrap;\n    text-align: left;\n    position: relative;\n\n    & > span {\n      display: block;\n      flex: 1;\n      min-width: 0;\n      border-radius: inherit;\n    }\n\n    &::-moz-focus-inner {\n      border: 0;\n      padding: 0;\n    }\n  "])));
    }
    var buttonTheme = { border: { width: 1 } };
    function buttonColorStyles(props) {
      var _a2, _b;
      const { $mode, theme } = props;
      const { focusRing } = theme.sanity;
      const base = theme.sanity.color.base;
      const mode = theme.sanity.color.button[$mode] || theme.sanity.color.button.default;
      const color2 = mode[props.$tone] || mode.default;
      const border2 = { width: buttonTheme.border.width, color: "var(--card-border-color)" };
      return [_colorVarsStyle(base, color2.enabled), { backgroundColor: "var(--card-bg-color)", color: "var(--card-fg-color)", boxShadow: focusRingBorderStyle(border2), '&:disabled, &[data-disabled="true"]': _colorVarsStyle(base, color2.disabled), "&:not([data-disabled='true'])": { "&:focus": { boxShadow: focusRingStyle({ base, border: border2, focusRing }) }, "&:focus:not(:focus-visible)": { boxShadow: focusRingBorderStyle(border2) }, "@media (hover: hover)": { "&:hover": _colorVarsStyle(base, color2.hovered), "&:active": _colorVarsStyle(base, color2.pressed), "&[data-hovered]": _colorVarsStyle(base, color2.hovered) }, "&[data-selected]": _colorVarsStyle(base, color2.pressed) } }, (_b = (_a2 = theme.sanity.styles) == null ? void 0 : _a2.button) == null ? void 0 : _b.root].filter(Boolean);
    }
    var Root$v = styled.button(responsiveRadiusStyle, buttonBaseStyles, buttonColorStyles);
    var LoadingBox = styled.div(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: var(--card-bg-color);\n  border-radius: inherit;\n  z-index: 1;\n  box-shadow: inherit;\n"])));
    var Button = React$2.forwardRef(function Button2(props, ref) {
      const { children, disabled, fontSize: fontSize2, icon, iconRight, justify: justifyProp = "center", loading, mode = "default", padding: paddingProp = 3, paddingX: paddingXProp, paddingY: paddingYProp, paddingTop: paddingTopProp, paddingBottom: paddingBottomProp, paddingLeft: paddingLeftProp, paddingRight: paddingRightProp, radius: radiusProp = 2, selected, space: spaceProp = 3, text, textAlign, tone = "default", type = "button", ...restProps } = props;
      const justify = useArrayProp(justifyProp);
      const padding = useArrayProp(paddingProp);
      const paddingX = useArrayProp(paddingXProp);
      const paddingY = useArrayProp(paddingYProp);
      const paddingTop = useArrayProp(paddingTopProp);
      const paddingBottom = useArrayProp(paddingBottomProp);
      const paddingLeft = useArrayProp(paddingLeftProp);
      const paddingRight = useArrayProp(paddingRightProp);
      const radius = useArrayProp(radiusProp);
      const space2 = useArrayProp(spaceProp);
      const theme = useTheme();
      const boxProps = React$2.useMemo(() => ({
        // flex: 1,
        padding,
        paddingX,
        paddingY,
        paddingTop,
        paddingBottom,
        paddingLeft,
        paddingRight
      }), [padding, paddingX, paddingY, paddingTop, paddingBottom, paddingLeft, paddingRight]);
      return /* @__PURE__ */ jsxRuntime.jsxs(Root$v, { "data-ui": "Button", ...restProps, $mode: mode, $radius: radius, $tone: tone, "data-disabled": Boolean(loading || disabled), "data-selected": selected ? "" : void 0, disabled: Boolean(loading || disabled), ref, type, children: [Boolean(loading) && /* @__PURE__ */ jsxRuntime.jsx(LoadingBox, { children: /* @__PURE__ */ jsxRuntime.jsx(Spinner, {}) }), (icon || text || iconRight) && /* @__PURE__ */ jsxRuntime.jsx(Box, { as: "span", ...boxProps, children: /* @__PURE__ */ jsxRuntime.jsxs(Flex$1, { as: "span", justify, children: [icon && /* @__PURE__ */ jsxRuntime.jsxs(Text, { size: fontSize2, children: [React$2.isValidElement(icon) && icon, reactIsExports$1.isValidElementType(icon) && React$2.createElement(icon)] }), text && /* @__PURE__ */ jsxRuntime.jsx(Box, { flex: iconRight ? 1 : void 0, marginLeft: icon ? space2 : void 0, marginRight: iconRight ? space2 : void 0, children: /* @__PURE__ */ jsxRuntime.jsx(Text, { align: textAlign, size: fontSize2, textOverflow: "ellipsis", weight: theme.sanity.button.textWeight, children: text }) }), iconRight && /* @__PURE__ */ jsxRuntime.jsxs(Text, { size: fontSize2, children: [React$2.isValidElement(iconRight) && iconRight, reactIsExports$1.isValidElementType(iconRight) && React$2.createElement(iconRight)] })] }) }), children && /* @__PURE__ */ jsxRuntime.jsx(Box, { as: "span", ...boxProps, children })] });
    });
    function cardStyle(props) {
      return [cardBaseStyle(props), cardColorStyle(props)];
    }
    function cardBaseStyle(props) {
      const { $checkered, theme } = props;
      const space2 = theme.sanity.space;
      return Ae(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["\n    ", "\n\n    &[data-as='button'] {\n      -webkit-font-smoothing: inherit;\n      appearance: none;\n      outline: none;\n      font: inherit;\n      text-align: inherit;\n      border: 0;\n      width: stretch;\n    }\n\n    /* &:is(a) */\n    &[data-as='a'] {\n      outline: none;\n      text-decoration: none;\n    }\n\n    /* &:is(pre) */\n    &[data-as='pre'] {\n      font: inherit;\n    }\n  "])), $checkered && Ae(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral(["\n      background-size: ", "px ", "px;\n      background-position: 50% 50%;\n      background-image: var(--card-bg-image);\n    "])), space2[3], space2[3]));
    }
    function cardColorStyle(props) {
      var _a2, _b;
      const { $checkered, $focusRing, theme } = props;
      const { focusRing } = theme.sanity;
      const { base, card, dark } = theme.sanity.color;
      const border2 = { width: 0, color: "var(--card-border-color)" };
      return Ae(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral(["\n    color-scheme: ", ";\n\n    ", "\n\n    background-color: var(--card-bg-color);\n    color: var(--card-fg-color);\n\n    /* &:is(button) */\n    &[data-as='button'] {\n      --card-focus-ring-box-shadow: none;\n\n      cursor: default;\n      box-shadow: var(--card-focus-ring-box-shadow);\n\n      &:disabled {\n        ", "\n      }\n\n      &:not(:disabled) {\n        &[data-pressed] {\n          ", "\n        }\n\n        &[data-selected] {\n          ", "\n        }\n\n        @media (hover: hover) {\n          &:not([data-pressed]):not([data-selected]) {\n            &[data-hovered],\n            &:hover {\n              ", "\n            }\n\n            &:active {\n              ", "\n            }\n          }\n        }\n\n        &:focus {\n          --card-focus-ring-box-shadow: ", ";\n        }\n\n        &:focus:not(:focus-visible) {\n          --card-focus-ring-box-shadow: ", ";\n        }\n      }\n    }\n\n    /* &:is(a) */\n    &[data-as='a'] {\n      cursor: pointer;\n      box-shadow: var(--card-focus-ring-box-shadow);\n\n      &[data-disabled] {\n        ", "\n      }\n\n      &:not([data-disabled]) {\n        &[data-pressed] {\n          ", "\n        }\n\n        &[data-selected] {\n          ", "\n        }\n\n        @media (hover: hover) {\n          &:not([data-pressed]):not([data-selected]) {\n            &[data-hovered],\n            &:hover {\n              ", "\n            }\n\n            &:active {\n              ", "\n            }\n          }\n        }\n\n        &:focus {\n          --card-focus-ring-box-shadow: ", ";\n        }\n\n        &:focus:not(:focus-visible) {\n          --card-focus-ring-box-shadow: ", ";\n        }\n      }\n    }\n\n    ", "\n  "])), dark ? "dark" : "light", _colorVarsStyle(base, card.enabled, $checkered), _colorVarsStyle(base, card.disabled, $checkered), _colorVarsStyle(base, card.pressed, $checkered), _colorVarsStyle(base, card.selected, $checkered), _colorVarsStyle(base, card.hovered, $checkered), _colorVarsStyle(base, card.pressed, $checkered), $focusRing ? focusRingStyle({ base, border: border2, focusRing }) : void 0, $focusRing ? focusRingBorderStyle(border2) : void 0, _colorVarsStyle(base, card.disabled, $checkered), _colorVarsStyle(base, card.pressed, $checkered), _colorVarsStyle(base, card.selected, $checkered), _colorVarsStyle(base, card.hovered, $checkered), _colorVarsStyle(base, card.pressed, $checkered), $focusRing ? focusRingStyle({ base, border: border2, focusRing }) : void 0, $focusRing ? focusRingBorderStyle(border2) : void 0, (_b = (_a2 = theme.sanity.styles) == null ? void 0 : _a2.card) == null ? void 0 : _b.root);
    }
    var Root$u = styled(Box)(responsiveBorderStyle, responsiveRadiusStyle, responsiveShadowStyle, cardStyle);
    var Card = React$2.forwardRef(function Card2(props, ref) {
      const { __unstable_checkered: checkered = false, __unstable_focusRing: focusRing = false, as: asProp, border: border2, borderTop: borderTop2, borderRight: borderRight2, borderBottom: borderBottom2, borderLeft: borderLeft2, pressed, radius = 0, scheme, selected, shadow, tone: toneProp = "default", ...restProps } = props;
      const as = reactIsExports$1.isValidElementType(asProp) ? asProp : "div";
      const rootTheme = useRootTheme();
      const tone = toneProp === "inherit" ? rootTheme.tone : toneProp;
      return /* @__PURE__ */ jsxRuntime.jsx(ThemeColorProvider, { scheme, tone, children: /* @__PURE__ */ jsxRuntime.jsx(Root$u, { "data-as": typeof as === "string" ? as : void 0, "data-scheme": rootTheme.scheme, "data-ui": "Card", "data-tone": tone, ...restProps, $border: useArrayProp(border2), $borderTop: useArrayProp(borderTop2), $borderRight: useArrayProp(borderRight2), $borderBottom: useArrayProp(borderBottom2), $borderLeft: useArrayProp(borderLeft2), $checkered: checkered, $focusRing: focusRing, $radius: useArrayProp(radius), $shadow: useArrayProp(shadow), $tone: tone, "data-checkered": checkered ? "" : void 0, "data-pressed": pressed ? "" : void 0, "data-selected": selected ? "" : void 0, forwardedAs: as, ref, selected }) });
    });
    function checkboxBaseStyles() {
      return Ae(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral(["\n    position: relative;\n    display: inline-block;\n  "])));
    }
    function inputElementStyles(props) {
      const { theme } = props;
      const color2 = theme.sanity.color.input;
      const { focusRing, input, radius } = theme.sanity;
      return Ae(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral(["\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    outline: none;\n    opacity: 0;\n    z-index: 1;\n    padding: 0;\n    margin: 0;\n\n    & + span {\n      position: relative;\n      display: block;\n      height: ", ";\n      width: ", ";\n      box-sizing: border-box;\n      box-shadow: ", ";\n      border-radius: ", ";\n      line-height: 1;\n      background-color: ", ";\n\n      & > svg {\n        display: block;\n        position: absolute;\n        opacity: 0;\n        height: 100%;\n        width: 100%;\n\n        & > path {\n          vector-effect: non-scaling-stroke;\n          stroke-width: 2 !important;\n        }\n      }\n    }\n\n    &:not(:disabled):focus + span {\n      box-shadow: ", ";\n    }\n\n    &:not(:disabled):focus:not(:focus-visible) + span {\n      box-shadow: ", ";\n    }\n\n    &:checked + span > svg:first-child {\n      opacity: 1;\n    }\n\n    &[data-read-only] + span {\n      background-color: ", ";\n      box-shadow: ", ";\n      color: ", ";\n    }\n\n    &:not([data-read-only]):disabled + span {\n      background-color: ", ";\n      box-shadow: ", ";\n      color: ", ";\n    }\n\n    &:indeterminate + span > svg:last-child {\n      opacity: 1;\n    }\n  "])), rem(input.checkbox.size), rem(input.checkbox.size), focusRingBorderStyle({ color: color2.default.enabled.border, width: input.border.width }), rem(radius[2]), color2.default.enabled.bg, focusRingStyle({ border: { width: input.border.width, color: color2.default.enabled.border }, focusRing }), focusRingBorderStyle({ color: color2.default.enabled.border, width: input.border.width }), color2.default.readOnly.bg, focusRingBorderStyle({ width: input.border.width, color: color2.default.readOnly.border }), color2.default.readOnly.fg, color2.default.disabled.bg, focusRingBorderStyle({ width: input.border.width, color: color2.default.disabled.border }), color2.default.disabled.fg);
    }
    var Root$t = styled.div(checkboxBaseStyles);
    var Input$5 = styled.input(inputElementStyles);
    React$2.forwardRef(function Checkbox2(props, forwardedRef) {
      const { checked, className, disabled, indeterminate, customValidity, readOnly, style: style2, ...restProps } = props;
      const ref = useForwardedRef(forwardedRef);
      useCustomValidity(ref, customValidity);
      React$2.useEffect(() => {
        if (ref.current) {
          ref.current.indeterminate = indeterminate || false;
        }
      }, [indeterminate, ref]);
      return /* @__PURE__ */ jsxRuntime.jsxs(Root$t, { className, "data-ui": "Checkbox", style: style2, children: [/* @__PURE__ */ jsxRuntime.jsx(Input$5, { "data-read-only": !disabled && readOnly ? "" : void 0, ...restProps, checked, disabled: disabled || readOnly, type: "checkbox", readOnly, ref }), /* @__PURE__ */ jsxRuntime.jsxs("span", { children: [/* @__PURE__ */ jsxRuntime.jsx(CheckmarkIcon, {}), /* @__PURE__ */ jsxRuntime.jsx(RemoveIcon, {})] })] });
    });
    function codeSyntaxHighlightingStyle(_ref20) {
      let { theme } = _ref20;
      const color2 = theme.sanity.color.syntax;
      return { "&.atrule": { color: color2.atrule }, "&.attr-name": { color: color2.attrName }, "&.attr-value": { color: color2.attrValue }, "&.attribute": { color: color2.attribute }, "&.boolean": { color: color2.boolean }, "&.builtin": { color: color2.builtin }, "&.cdata": { color: color2.cdata }, "&.char": { color: color2.char }, "&.class": { color: color2.class }, "&.class-name": { color: color2.className }, "&.comment": { color: color2.comment }, "&.constant": { color: color2.constant }, "&.deleted": { color: color2.deleted }, "&.doctype": { color: color2.doctype }, "&.entity": { color: color2.entity }, "&.function": { color: color2.function }, "&.hexcode": { color: color2.hexcode }, "&.id": { color: color2.id }, "&.important": { color: color2.important }, "&.inserted": { color: color2.inserted }, "&.keyword": { color: color2.keyword }, "&.number": { color: color2.number }, "&.operator": { color: color2.operator }, "&.prolog": { color: color2.prolog }, "&.property": { color: color2.property }, "&.pseudo-class": { color: color2.pseudoClass }, "&.pseudo-element": { color: color2.pseudoElement }, "&.punctuation": { color: color2.punctuation }, "&.regex": { color: color2.regex }, "&.selector": { color: color2.selector }, "&.string": { color: color2.string }, "&.symbol": { color: color2.symbol }, "&.tag": { color: color2.tag }, "&.unit": { color: color2.unit }, "&.url": { color: color2.url }, "&.variable": { color: color2.variable } };
    }
    function codeBaseStyle() {
      return Ae(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral(["\n    color: var(--card-code-fg-color);\n\n    & code {\n      font-family: inherit;\n\n      &.refractor .token {\n        ", "\n      }\n    }\n\n    & a {\n      color: inherit;\n      text-decoration: underline;\n      border-radius: 1px;\n    }\n\n    & svg {\n      /* Certain popular CSS libraries changes the defaults for SVG display */\n      /* Make sure SVGs are rendered as inline elements */\n      display: inline;\n    }\n\n    & [data-sanity-icon] {\n      vertical-align: baseline;\n    }\n  "])), codeSyntaxHighlightingStyle);
    }
    var Root$s = styled.pre(codeBaseStyle, responsiveCodeFontStyle);
    var Code = React$2.forwardRef(function Code2(props, ref) {
      const { children, language: languageProp, size: size2 = 2, weight, ...restProps } = props;
      const language = typeof languageProp === "string" ? languageProp : void 0;
      const registered2 = language ? Refractor$1.hasLanguage(language) : false;
      return /* @__PURE__ */ jsxRuntime.jsxs(Root$s, { "data-ui": "Code", ...restProps, $size: useArrayProp(size2), $weight: weight, ref, children: [!(language && registered2) && /* @__PURE__ */ jsxRuntime.jsx("code", { children }), language && registered2 && /* @__PURE__ */ jsxRuntime.jsx(Refractor$1, { inline: true, language, value: String(children) })] });
    });
    var BASE_STYLE$1 = { width: "100%", margin: "0 auto" };
    function containerBaseStyle() {
      return BASE_STYLE$1;
    }
    function responsiveContainerWidthStyle(props) {
      const { theme } = props;
      const { container, media } = theme.sanity;
      return _responsive(media, props.$width, (val) => ({ maxWidth: val === "auto" ? "none" : rem(container[val]) }));
    }
    var Root$r = styled(Box)(containerBaseStyle, responsiveContainerWidthStyle);
    var Container$5 = React$2.forwardRef(function Container2(props, ref) {
      const { as, width = 2, ...restProps } = props;
      return /* @__PURE__ */ jsxRuntime.jsx(Root$r, { "data-ui": "Container", ...restProps, $width: useArrayProp(width), forwardedAs: as, ref });
    });
    var Root$q = styled(Box)(responsiveGridStyle);
    React$2.forwardRef(function Grid2(props, ref) {
      const { as, autoRows, autoCols, autoFlow, columns, gap: gap2, gapX, gapY, rows, children, ...restProps } = props;
      return /* @__PURE__ */ jsxRuntime.jsx(Root$q, { "data-as": typeof as === "string" ? as : void 0, "data-ui": "Grid", ...restProps, $autoRows: useArrayProp(autoRows), $autoCols: useArrayProp(autoCols), $autoFlow: useArrayProp(autoFlow), $columns: useArrayProp(columns), $gap: useArrayProp(gap2), $gapX: useArrayProp(gapX), $gapY: useArrayProp(gapY), $rows: useArrayProp(rows), forwardedAs: as, ref, children });
    });
    function headingBaseStyle(props) {
      const { $accent, $muted, theme } = props;
      return Ae(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral(["\n    ", "\n\n    ", "\n\n    & code {\n      font-family: ", ";\n      border-radius: 1px;\n    }\n\n    & a {\n      text-decoration: none;\n      border-radius: 1px;\n      color: var(--card-link-color);\n      outline: none;\n\n      @media (hover: hover) {\n        &:hover {\n          text-decoration: underline;\n        }\n      }\n\n      &:focus {\n        box-shadow: 0 0 0 1px var(--card-bg-color), 0 0 0 3px var(--card-focus-ring-color);\n      }\n\n      &:focus:not(:focus-visible) {\n        box-shadow: none;\n      }\n    }\n\n    & svg {\n      /* Certain popular CSS libraries changes the defaults for SVG display */\n      /* Make sure SVGs are rendered as inline elements */\n      display: inline;\n    }\n\n    & [data-sanity-icon] {\n      vertical-align: baseline;\n    }\n  "])), $accent && Ae(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral(["\n      color: var(--card-accent-fg-color);\n    "]))), $muted && Ae(_templateObject26 || (_templateObject26 = _taggedTemplateLiteral(["\n      color: var(--card-muted-fg-color);\n    "]))), theme.sanity.fonts.code.family);
    }
    var Root$p = styled.div(headingBaseStyle, responsiveTextAlignStyle, responsiveHeadingFont);
    var SpanWithTextOverflow = styled.span(_templateObject27 || (_templateObject27 = _taggedTemplateLiteral(["\n  display: block;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  overflow: clip;\n"])));
    React$2.forwardRef(function Heading2(props, ref) {
      const { accent = false, align, children: childrenProp, muted = false, size: size2 = 2, textOverflow, weight, ...restProps } = props;
      let children = childrenProp;
      if (textOverflow === "ellipsis") {
        children = /* @__PURE__ */ jsxRuntime.jsx(SpanWithTextOverflow, { children });
      }
      return /* @__PURE__ */ jsxRuntime.jsx(Root$p, { "data-ui": "Heading", ...restProps, $accent: accent, $align: useArrayProp(align), $muted: muted, $size: useArrayProp(size2), $weight: weight, ref, children: /* @__PURE__ */ jsxRuntime.jsx("span", { children }) });
    });
    function inlineBaseStyle() {
      return { lineHeight: 0, "&&:not([hidden])": { display: "block" }, "& > div": { display: "inline-block", verticalAlign: "middle" } };
    }
    function inlineSpaceStyle(props) {
      const { theme } = props;
      return _responsive(theme.sanity.media, props.$space, (spaceIndex) => {
        const space2 = rem(theme.sanity.space[spaceIndex]);
        return { margin: "-".concat(space2, " 0 0 -").concat(space2), "& > div": { padding: "".concat(space2, " 0 0 ").concat(space2) } };
      });
    }
    var Root$o = styled(Box)(inlineBaseStyle, inlineSpaceStyle);
    var Inline = React$2.forwardRef(function Inline2(props, ref) {
      const { as, children: childrenProp, space: space2, ...restProps } = props;
      const children = React$2.useMemo(() => childrenToElementArray(childrenProp).filter(Boolean).map((child, idx) => /* @__PURE__ */ jsxRuntime.jsx("div", { children: child }, idx)), [childrenProp]);
      return /* @__PURE__ */ jsxRuntime.jsx(Root$o, { "data-ui": "Inline", ...restProps, $space: useArrayProp(space2), forwardedAs: as, ref, children });
    });
    function kbdStyle() {
      return Ae(_templateObject28 || (_templateObject28 = _taggedTemplateLiteral(["\n    background: var(--card-bg-color);\n    font: inherit;\n    box-shadow: inset 0 0 0 1px var(--card-hairline-hard-color);\n\n    &:not([hidden]) {\n      display: inline-block;\n    }\n  "])));
    }
    var Root$n = styled.kbd(responsiveRadiusStyle, kbdStyle);
    var KBD = React$2.forwardRef(function KBD2(props, ref) {
      const { children, fontSize: fontSize2 = 1, padding = 1, radius = 2, ...restProps } = props;
      return /* @__PURE__ */ jsxRuntime.jsx(Root$n, { "data-ui": "KBD", ...restProps, $radius: useArrayProp(radius), ref, children: /* @__PURE__ */ jsxRuntime.jsx(Box, { as: "span", padding, children: /* @__PURE__ */ jsxRuntime.jsx(Code, { as: "span", muted: true, size: fontSize2, children }) }) });
    });
    var key$6 = Symbol.for("@sanity/ui/context/boundaryElement");
    globalScope[key$6] = globalScope[key$6] || React$2.createContext(null);
    var BoundaryElementContext = globalScope[key$6];
    var DEFAULT_VALUE = { version: 0, element: null };
    function useBoundaryElement() {
      const value = React$2.useContext(BoundaryElementContext);
      if (value && (!isRecord(value) || value.version !== 0)) {
        throw new Error("useBoundaryElement(): the context value is not compatible");
      }
      return value || DEFAULT_VALUE;
    }
    function findMaxBreakpoints(media, width) {
      const ret = [];
      for (let i = 0; i < media.length; i += 1) {
        const bp = media[i];
        if (bp > width) {
          ret.push(i);
        }
      }
      return ret;
    }
    function findMinBreakpoints(media, width) {
      const ret = [];
      for (let i = 0; i < media.length; i += 1) {
        const bp = media[i];
        if (bp <= width) {
          ret.push(i);
        }
      }
      return ret;
    }
    React$2.forwardRef(function ElementQuery2(props, ref) {
      const theme = useTheme();
      const { children, media = theme.sanity.media, ...restProps } = props;
      const forwardedRef = useForwardedRef(ref);
      const [element, setElement] = React$2.useState(null);
      const elementSize = useElementSize(element);
      const width = React$2.useMemo(() => {
        var _a2;
        return (_a2 = elementSize == null ? void 0 : elementSize.border.width) != null ? _a2 : window.innerWidth;
      }, [elementSize]);
      const max2 = React$2.useMemo(() => findMaxBreakpoints(media, width), [media, width]);
      const min2 = React$2.useMemo(() => findMinBreakpoints(media, width), [media, width]);
      const setRef = React$2.useCallback((el2) => {
        forwardedRef.current = el2;
        setElement(el2);
      }, [forwardedRef]);
      return /* @__PURE__ */ jsxRuntime.jsx("div", { "data-ui": "ElementQuery", ...restProps, "data-eq-max": max2.length ? max2.join(" ") : void 0, "data-eq-min": min2.length ? min2.join(" ") : void 0, ref: setRef, children });
    });
    function getLayerContext(contextValue) {
      if (!isRecord(contextValue) || contextValue.version !== 0) {
        throw new Error("the context value is not compatible");
      }
      if (!contextValue) {
        throw new Error("components using `useLayer()` should be wrapped in a <LayerProvider>.");
      }
      if (contextValue.version === 0) {
        return contextValue;
      }
      throw new Error("could not get layer context");
    }
    var key$5 = Symbol.for("@sanity/ui/context/layer");
    globalScope[key$5] = globalScope[key$5] || React$2.createContext(null);
    var LayerContext = globalScope[key$5];
    function useLayer() {
      const value = React$2.useContext(LayerContext);
      if (!value) {
        throw new Error("useLayer(): missing context value");
      }
      try {
        return getLayerContext(value);
      } catch (err) {
        if (err instanceof Error) {
          throw new Error("useLayer(): ".concat(err.message));
        } else {
          throw new Error("useLayer(): ".concat(err));
        }
      }
    }
    function _raf(fn) {
      const frameId = requestAnimationFrame(fn);
      return () => {
        cancelAnimationFrame(frameId);
      };
    }
    function _isEnterToClickElement(element) {
      return isHTMLAnchorElement(element) || isHTMLButtonElement(element);
    }
    function isHTMLElement(node) {
      return node instanceof Node && node.nodeType === Node.ELEMENT_NODE;
    }
    function isHTMLAnchorElement(element) {
      return isHTMLElement(element) && element.nodeName === "A";
    }
    function isHTMLInputElement(element) {
      return isHTMLElement(element) && element.nodeName === "INPUT";
    }
    function isHTMLButtonElement(element) {
      return isHTMLElement(element) && element.nodeName === "BUTTON";
    }
    function isHTMLSelectElement(element) {
      return isHTMLElement(element) && element.nodeName === "SELECT";
    }
    function isHTMLTextAreaElement(element) {
      return isHTMLElement(element) && element.nodeName === "TEXTAREA";
    }
    function containsOrEqualsElement(element, node) {
      return element.contains(node) || element === node;
    }
    function _hasFocus(element) {
      return Boolean(document.activeElement) && element.contains(document.activeElement);
    }
    function isFocusable(element) {
      if (element.tabIndex > 0 || element.tabIndex === 0 && element.getAttribute("tabIndex") !== null) {
        return true;
      }
      if (isHTMLAnchorElement(element)) {
        return Boolean(element.href) && element.rel !== "ignore";
      }
      if (isHTMLInputElement(element)) {
        return element.type !== "hidden" && element.type !== "file" && !element.disabled;
      }
      if (isHTMLButtonElement(element) || isHTMLSelectElement(element) || isHTMLTextAreaElement(element)) {
        return !element.disabled;
      }
      return false;
    }
    function attemptFocus(element) {
      if (!isFocusable(element)) {
        return false;
      }
      try {
        element.focus();
      } catch (_2) {
      }
      return document.activeElement === element;
    }
    function focusFirstDescendant(element) {
      for (let i = 0; i < element.childNodes.length; i++) {
        const child = element.childNodes[i];
        if (isHTMLElement(child) && (attemptFocus(child) || focusFirstDescendant(child))) {
          return true;
        }
      }
      return false;
    }
    function focusLastDescendant(element) {
      for (let i = element.childNodes.length - 1; i >= 0; i--) {
        const child = element.childNodes[i];
        if (isHTMLElement(child) && (attemptFocus(child) || focusLastDescendant(child))) {
          return true;
        }
      }
      return false;
    }
    function _isScrollable(el2) {
      if (!(el2 instanceof Element))
        return false;
      const style2 = window.getComputedStyle(el2);
      return style2.overflowX.includes("auto") || style2.overflowX.includes("scroll") || style2.overflowY.includes("auto") || style2.overflowY.includes("scroll");
    }
    function LayerProvider(props) {
      var _a2;
      const { children, zOffset: zOffsetProp = 0 } = props;
      const parentContextValue = React$2.useContext(LayerContext);
      const parent = parentContextValue && getLayerContext(parentContextValue);
      const parentRegisterChild = parent == null ? void 0 : parent.registerChild;
      const parentLevel = (_a2 = parent == null ? void 0 : parent.level) != null ? _a2 : 0;
      const level = parentLevel + 1;
      const zOffset = useArrayProp(zOffsetProp);
      const maxMediaIndex = zOffset.length - 1;
      const mediaIndex = Math.min(useMediaIndex(), maxMediaIndex);
      const zIndex = parent ? parent.zIndex + zOffset[mediaIndex] : zOffset[mediaIndex];
      const [, setChildLayers] = React$2.useState({});
      const [size2, setSize] = React$2.useState(0);
      const isTopLayer = size2 === 0;
      const registerChild = React$2.useCallback((childLevel) => {
        const parentDispose = parentRegisterChild == null ? void 0 : parentRegisterChild(childLevel);
        if (childLevel !== void 0) {
          setChildLayers((state) => {
            var _a22;
            const prevLen = (_a22 = state[childLevel]) != null ? _a22 : 0;
            const nextState = { ...state, [childLevel]: prevLen + 1 };
            setSize(Object.keys(nextState).length);
            return nextState;
          });
        } else {
          setSize((v2) => v2 + 1);
        }
        return () => {
          if (childLevel !== void 0) {
            setChildLayers((state) => {
              const nextState = { ...state };
              if (nextState[childLevel] === 1) {
                delete nextState[childLevel];
                setSize(Object.keys(nextState).length);
              } else {
                nextState[childLevel] -= 1;
              }
              return nextState;
            });
          } else {
            setSize((v2) => v2 - 1);
          }
          parentDispose == null ? void 0 : parentDispose();
        };
      }, [parentRegisterChild]);
      React$2.useEffect(() => parentRegisterChild == null ? void 0 : parentRegisterChild(level), [level, parentRegisterChild]);
      const value = React$2.useMemo(() => ({ version: 0, isTopLayer, level, registerChild, size: size2, zIndex }), [isTopLayer, level, registerChild, size2, zIndex]);
      return /* @__PURE__ */ jsxRuntime.jsx(LayerContext.Provider, { value, children });
    }
    var Root$m = styled.div({ position: "relative" });
    var LayerChildren = React$2.forwardRef(function LayerChildren2(props, ref) {
      const { children, onActivate, onFocus, style: style2 = EMPTY_RECORD, ...restProps } = props;
      const { zIndex, isTopLayer } = useLayer();
      const lastFocusedRef = React$2.useRef(null);
      const forwardedRef = useForwardedRef(ref);
      const isTopLayerRef = React$2.useRef(isTopLayer);
      React$2.useEffect(() => {
        const becameTopLayer = isTopLayerRef.current !== isTopLayer && isTopLayer;
        if (becameTopLayer) {
          onActivate == null ? void 0 : onActivate({ activeElement: lastFocusedRef.current });
        }
        isTopLayerRef.current = isTopLayer;
      }, [isTopLayer, onActivate]);
      const handleFocus = React$2.useCallback((event) => {
        onFocus == null ? void 0 : onFocus(event);
        const rootElement = forwardedRef.current;
        const target2 = document.activeElement;
        if (!isTopLayer || !rootElement || !target2)
          return;
        if (isHTMLElement(target2) && containsOrEqualsElement(rootElement, target2)) {
          lastFocusedRef.current = target2;
        }
      }, [forwardedRef, isTopLayer, onFocus]);
      return /* @__PURE__ */ jsxRuntime.jsx(Root$m, { ...restProps, "data-ui": "Layer", onFocus: handleFocus, ref: forwardedRef, style: { ...style2, zIndex }, children });
    });
    var Layer = React$2.forwardRef(function Layer2(props, ref) {
      const { children, zOffset = 1, ...restProps } = props;
      return /* @__PURE__ */ jsxRuntime.jsx(LayerProvider, { zOffset, children: /* @__PURE__ */ jsxRuntime.jsx(LayerChildren, { ...restProps, ref, children }) });
    });
    var key$4 = Symbol.for("@sanity/ui/context/portal");
    var elementKey = Symbol.for("@sanity/ui/context/portal/element");
    globalScope[elementKey] = null;
    var defaultContextValue = { version: 0, boundaryElement: null, get element() {
      if (typeof document === "undefined") {
        return null;
      }
      if (globalScope[elementKey]) {
        return globalScope[elementKey];
      }
      globalScope[elementKey] = document.createElement("div");
      globalScope[elementKey].setAttribute("data-portal", "");
      document.body.appendChild(globalScope[elementKey]);
      return globalScope[elementKey];
    } };
    globalScope[key$4] = globalScope[key$4] || React$2.createContext(defaultContextValue);
    var PortalContext = globalScope[key$4];
    function usePortal() {
      const value = React$2.useContext(PortalContext);
      if (!value) {
        throw new Error("usePortal(): missing context value");
      }
      if (!isRecord(value) || value.version !== 0) {
        throw new Error("usePortal(): the context value is not compatible");
      }
      return value;
    }
    function Portal(props) {
      var _a2;
      const { children, __unstable_name: name2 } = props;
      const portal = usePortal();
      const portalElement = (name2 ? portal.elements && portal.elements[name2] : portal.element) || ((_a2 = portal.elements) == null ? void 0 : _a2.default);
      if (!portalElement) {
        return null;
      }
      return reactDomExports.createPortal(children, portalElement);
    }
    var Root$l = styled.div(_templateObject29 || (_templateObject29 = _taggedTemplateLiteral(["\n  display: block;\n  width: 0;\n  height: 0;\n  position: absolute;\n  overflow: hidden;\n  overflow: clip;\n"])));
    React$2.forwardRef(function SrOnly2(props, ref) {
      const { as, children } = props;
      return /* @__PURE__ */ jsxRuntime.jsx(Root$l, { "aria-hidden": true, as, "data-ui": "SrOnly", ref, children });
    });
    var Root$k = styled.div(_templateObject30 || (_templateObject30 = _taggedTemplateLiteral(["\n  position: relative;\n"])));
    var ItemWrapper = styled.div(_templateObject31 || (_templateObject31 = _taggedTemplateLiteral(["\n  position: absolute;\n  left: 0;\n  right: 0;\n"])));
    React$2.forwardRef(function VirtualList2(props, ref) {
      const { as = "div", gap: gap2 = 0, getItemKey, items = [], onChange, renderItem, ...restProps } = props;
      const { space: space2 } = useTheme().sanity;
      const forwardedRef = useForwardedRef(ref);
      const wrapperRef = React$2.useRef(null);
      const [scrollTop, setScrollTop] = React$2.useState(0);
      const [scrollHeight, setScrollHeight] = React$2.useState(0);
      const [itemHeight, setItemHeight] = React$2.useState(-1);
      React$2.useEffect(() => {
        if (!wrapperRef.current)
          return;
        const firstElement = wrapperRef.current.firstChild;
        if (firstElement instanceof HTMLElement) {
          setItemHeight(firstElement.offsetHeight);
        }
      }, [renderItem]);
      React$2.useEffect(() => {
        if (!forwardedRef.current)
          return;
        let _scrollEl = forwardedRef.current.parentNode;
        while (_scrollEl && !_isScrollable(_scrollEl)) {
          _scrollEl = _scrollEl.parentNode;
        }
        if (_scrollEl) {
          const scrollEl = _scrollEl;
          if (!(scrollEl instanceof HTMLElement))
            return;
          const handleScroll2 = () => {
            setScrollTop(scrollEl.scrollTop);
          };
          scrollEl.addEventListener("scroll", handleScroll2, { passive: true });
          const ro = new _ResizeObserver((entries) => {
            setScrollHeight(entries[0].contentRect.height);
          });
          ro.observe(scrollEl);
          handleScroll2();
          return () => {
            scrollEl.removeEventListener("scroll", handleScroll2);
            ro.unobserve(scrollEl);
            ro.disconnect();
          };
        }
        const handleScroll = () => {
          setScrollTop(window.scrollY);
        };
        const handleResize = () => {
          setScrollHeight(window.innerHeight);
        };
        window.addEventListener("scroll", handleScroll, { passive: true });
        window.addEventListener("resize", handleResize);
        setScrollHeight(window.innerHeight);
        handleScroll();
        return () => {
          window.removeEventListener("scroll", handleScroll);
          window.removeEventListener("resize", handleResize);
        };
      }, [forwardedRef]);
      const len = items.length;
      const height = itemHeight ? len * (itemHeight + space2[gap2]) - space2[gap2] : 0;
      const fromIndex = height ? Math.max(Math.floor(scrollTop / height * len) - 2, 0) : 0;
      const toIndex = height ? Math.ceil((scrollTop + scrollHeight) / height * len) + 1 : 0;
      React$2.useEffect(() => {
        if (!onChange)
          return;
        onChange({ fromIndex, gap: space2[gap2], itemHeight, scrollHeight, scrollTop, toIndex });
      }, [fromIndex, gap2, itemHeight, onChange, scrollHeight, scrollTop, space2, toIndex]);
      const children = React$2.useMemo(() => {
        if (!renderItem || items.length === 0)
          return null;
        if (itemHeight === -1) {
          return [/* @__PURE__ */ jsxRuntime.jsx(ItemWrapper, { children: renderItem(items[0]) }, 0)];
        }
        return items.slice(fromIndex, toIndex).map((item, _itemIndex) => {
          const itemIndex = fromIndex + _itemIndex;
          const node = renderItem(item);
          const key2 = getItemKey ? getItemKey(item, itemIndex) : itemIndex;
          return /* @__PURE__ */ jsxRuntime.jsx(ItemWrapper, { style: { top: itemIndex * (itemHeight + space2[gap2]) }, children: node }, key2);
        });
      }, [fromIndex, gap2, getItemKey, itemHeight, items, renderItem, space2, toIndex]);
      const wrapperStyle = React$2.useMemo(() => ({ height }), [height]);
      return /* @__PURE__ */ jsxRuntime.jsx(Root$k, { as, "data-ui": "VirtualList", ...restProps, ref: forwardedRef, children: /* @__PURE__ */ jsxRuntime.jsx("div", { ref: wrapperRef, style: wrapperStyle, children }) });
    });
    var DEFAULT_POPOVER_DISTANCE = 4;
    var DEFAULT_POPOVER_PADDING = 4;
    var DEFAULT_POPOVER_ARROW_WIDTH = 27;
    var DEFAULT_POPOVER_ARROW_HEIGHT = 11;
    var DEFAULT_POPOVER_MARGINS = [0, 0, 0, 0];
    function size(options) {
      const { apply, margins, padding = 0 } = options;
      return { name: "@sanity/ui/size", async fn(args) {
        const { elements, placement, platform: platform2, rects } = args;
        const { floating, reference } = rects;
        const overflow = await detectOverflow(args, { altBoundary: true, boundary: options.boundaryElement || void 0, elementContext: "floating", padding, rootBoundary: "viewport" });
        let maxWidth = Infinity;
        let maxHeight = Infinity;
        const floatingW = floating.width;
        const floatingH = floating.height;
        if (placement.includes("top")) {
          maxWidth = floatingW - (overflow.left + overflow.right);
          maxHeight = floatingH - overflow.top;
        }
        if (placement.includes("right")) {
          maxWidth = floatingW - overflow.right;
          maxHeight = floatingH - (overflow.top + overflow.bottom);
        }
        if (placement.includes("bottom")) {
          maxWidth = floatingW - (overflow.left + overflow.right);
          maxHeight = floatingH - overflow.bottom;
        }
        if (placement.includes("left")) {
          maxWidth = floatingW - overflow.left;
          maxHeight = floatingH - (overflow.top + overflow.bottom);
        }
        apply({ availableWidth: maxWidth - margins[1] - margins[3], availableHeight: maxHeight - margins[0] - margins[2], elements, referenceWidth: reference.width - margins[1] - margins[3] });
        const nextDimensions = await platform2.getDimensions(elements.floating);
        const targetH = nextDimensions.height;
        const targetW = nextDimensions.width;
        if (floatingW !== targetW || floatingH !== targetH) {
          return { reset: { rects: true } };
        }
        return {};
      } };
    }
    var Root$j = styled.div(_templateObject32 || (_templateObject32 = _taggedTemplateLiteral(["\n  position: absolute;\n  pointer-events: none;\n  width: ", "px;\n  height: ", "px;\n  fill: none;\n\n  :empty + & {\n    display: none;\n  }\n\n  & > svg {\n    display: block;\n    transform-origin: ", "px ", "px;\n  }\n\n  [data-placement^='top'] > & {\n    bottom: -", "px;\n  }\n\n  [data-placement^='right'] > & {\n    left: -", "px;\n\n    & > svg {\n      transform: rotate(90deg);\n    }\n  }\n\n  [data-placement^='left'] > & {\n    right: -", "px;\n\n    & > svg {\n      transform: rotate(-90deg);\n    }\n  }\n\n  [data-placement^='bottom'] > & {\n    top: -", "px;\n\n    & > svg {\n      transform: rotate(180deg);\n    }\n  }\n"])), DEFAULT_POPOVER_ARROW_WIDTH, DEFAULT_POPOVER_ARROW_WIDTH, DEFAULT_POPOVER_ARROW_WIDTH / 2, DEFAULT_POPOVER_ARROW_WIDTH / 2, DEFAULT_POPOVER_ARROW_WIDTH, DEFAULT_POPOVER_ARROW_WIDTH, DEFAULT_POPOVER_ARROW_WIDTH, DEFAULT_POPOVER_ARROW_WIDTH);
    var BorderPath = styled.path(_templateObject33 || (_templateObject33 = _taggedTemplateLiteral(["\n  fill: var(--card-shadow-outline-color);\n"])));
    var ShapePath = styled.path(_templateObject34 || (_templateObject34 = _taggedTemplateLiteral(["\n  fill: var(--card-bg-color);\n"])));
    var PopoverArrow = React$2.forwardRef(function PopoverArrow2(props, ref) {
      return /* @__PURE__ */ jsxRuntime.jsx(Root$j, { "data-ui": "Popover__arrow", ...props, ref, children: /* @__PURE__ */ jsxRuntime.jsxs("svg", { width: DEFAULT_POPOVER_ARROW_WIDTH, height: DEFAULT_POPOVER_ARROW_HEIGHT, viewBox: "0 0 27 11", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [/* @__PURE__ */ jsxRuntime.jsx(BorderPath, { d: "M1.18708 1C3.29803 1.0011 5.29585 1.95479 6.62414 3.59561L11.1683 9.20895C12.369 10.6922 14.631 10.6922 15.8317 9.20894L20.3759 3.59561C21.7042 1.95478 23.702 1.0011 25.8129 1H21.9436C21.0533 1.49255 20.2545 2.15618 19.5986 2.96641L15.0545 8.57975C14.254 9.56855 12.746 9.56855 11.9455 8.57975L7.40139 2.96642C6.74548 2.15618 5.94673 1.49255 5.05643 1H1.18708Z" }), /* @__PURE__ */ jsxRuntime.jsx(ShapePath, { d: "M1.18342 0C3.59749 0 5.88246 1.0901 7.40138 2.96642L11.9455 8.57975C12.746 9.56855 14.254 9.56855 15.0545 8.57975L19.5986 2.96641C21.1175 1.0901 23.4025 0 25.8166 0H27H0H1.18342Z" })] }) });
    });
    function popoverCardStyle(props) {
      const { $boundaryWidth } = props;
      return { "&:not([hidden])": { display: "flex" }, flexDirection: "column", width: "max-content", minWidth: "min-content", maxWidth: typeof $boundaryWidth === "number" ? "".concat($boundaryWidth - DEFAULT_POPOVER_PADDING * 2, "px") : void 0 };
    }
    var Root$i = React$2.memo(styled(Card)(popoverCardStyle));
    var PopoverContainer = React$2.memo(styled(Container$5)(_templateObject35 || (_templateObject35 = _taggedTemplateLiteral(["\n  max-height: inherit;\n  max-width: inherit;\n"]))));
    var PopoverCard = React$2.memo(React$2.forwardRef(function PopoverCard2(props, ref) {
      const { __unstable_margins: marginsProp, arrow: arrow2, arrowRef, arrowX, arrowY, boundaryWidth, children, padding, placement, overflow, radius, scheme, shadow, strategy, style: style2, tone, width = "auto", x: xProp, y: yProp, ...restProps } = props;
      const { zIndex } = useLayer();
      const margins = React$2.useMemo(() => marginsProp || DEFAULT_POPOVER_MARGINS, [marginsProp]);
      const x2 = (xProp != null ? xProp : 0) + margins[3];
      const y2 = (yProp != null ? yProp : 0) + margins[0];
      const rootStyle2 = React$2.useMemo(() => ({ position: strategy, top: y2, left: x2, zIndex, ...style2 }), [strategy, style2, x2, y2, zIndex]);
      const staticSide = placement && FLOATING_STATIC_SIDES[placement.split("-")[0]];
      const arrowStyle = React$2.useMemo(() => {
        const style22 = { left: arrowX !== null ? arrowX : void 0, top: arrowY !== null ? arrowY : void 0, right: void 0, bottom: void 0 };
        if (staticSide)
          style22[staticSide] = 0 - DEFAULT_POPOVER_ARROW_WIDTH;
        return style22;
      }, [arrowX, arrowY, staticSide]);
      return /* @__PURE__ */ jsxRuntime.jsxs(Root$i, { ...restProps, $boundaryWidth: boundaryWidth, "data-placement": placement, "data-ui": "Popover", radius, ref, scheme, shadow, sizing: "border", style: rootStyle2, tone, children: [/* @__PURE__ */ jsxRuntime.jsx(PopoverContainer, { "data-ui": "Popover__wrapper", flex: 1, overflow, padding, sizing: "border", width, children }), arrow2 && /* @__PURE__ */ jsxRuntime.jsx(PopoverArrow, { ref: arrowRef, style: arrowStyle })] });
    }));
    PopoverCard.displayName = "PopoverCard";
    var Popover = React$2.memo(React$2.forwardRef(function Popover2(props, ref) {
      var _a2, _b, _c, _d, _e2;
      const theme = useTheme();
      const boundaryElementContext = useBoundaryElement();
      const { __unstable_margins: margins = DEFAULT_POPOVER_MARGINS, arrow: arrowProp = true, boundaryElement = boundaryElementContext.element, children: childProp, constrainSize = false, content, disabled, fallbackPlacements, matchReferenceWidth: matchReferenceWidthProp, open, overflow = "hidden", padding: paddingProp, placement: placementProp = "bottom", portal, preventOverflow = true, radius: radiusProp = 3, referenceElement, scheme, shadow: shadowProp = 3, tone = "inherit", width: widthProp = "auto", zOffset: zOffsetProp = (_a2 = theme.sanity.layer) == null ? void 0 : _a2.popover.zOffset, ...restProps } = props;
      const boundarySize = (_b = useElementSize(boundaryElement)) == null ? void 0 : _b.border;
      const padding = useArrayProp(paddingProp);
      const radius = useArrayProp(radiusProp);
      const shadow = useArrayProp(shadowProp);
      const width = useArrayProp(widthProp);
      const zOffset = useArrayProp(zOffsetProp);
      const forwardedRef = useForwardedRef(ref);
      const arrowRef = React$2.useRef(null);
      const rootBoundary = "viewport";
      const middleware = React$2.useMemo(() => {
        const ret = [];
        if (constrainSize || preventOverflow) {
          ret.push(flip({ boundary: boundaryElement || void 0, fallbackPlacements, padding: DEFAULT_POPOVER_PADDING, rootBoundary }));
        }
        ret.push(offset({ mainAxis: arrowProp ? DEFAULT_POPOVER_DISTANCE : 0 }));
        if (constrainSize || matchReferenceWidthProp) {
          ret.push(size({ apply(_ref21) {
            let { availableWidth, availableHeight, elements, referenceWidth } = _ref21;
            if (matchReferenceWidthProp) {
              elements.floating.style.width = "".concat(referenceWidth, "px");
            }
            if (constrainSize) {
              elements.floating.style.maxWidth = "".concat(availableWidth, "px");
              elements.floating.style.maxHeight = "".concat(availableHeight, "px");
            }
          }, boundaryElement, constrainSize, margins, matchReferenceWidth: matchReferenceWidthProp, padding: DEFAULT_POPOVER_PADDING }));
        }
        if (preventOverflow) {
          ret.push(shift({ boundary: boundaryElement || void 0, rootBoundary, padding: DEFAULT_POPOVER_PADDING }));
        }
        if (arrowProp) {
          ret.push(arrow({ element: arrowRef, padding: DEFAULT_POPOVER_PADDING }));
        }
        ret.push(hide({ boundary: boundaryElement || void 0, padding: DEFAULT_POPOVER_PADDING, strategy: "referenceHidden" }));
        return ret;
      }, [arrowProp, boundaryElement, constrainSize, fallbackPlacements, margins, matchReferenceWidthProp, preventOverflow]);
      const floatingProps = React$2.useMemo(() => ({ middleware, placement: placementProp, whileElementsMounted: autoUpdate }), [middleware, placementProp]);
      const { x: x2, y: y2, placement, reference: referenceRef, floating: floatingRef, middlewareData, strategy } = useFloating(floatingProps);
      const referenceHidden = (_c = middlewareData.hide) == null ? void 0 : _c.referenceHidden;
      const arrowX = (_d = middlewareData.arrow) == null ? void 0 : _d.x;
      const arrowY = (_e2 = middlewareData.arrow) == null ? void 0 : _e2.y;
      const setArrow = React$2.useCallback((arrowEl) => {
        arrowRef.current = arrowEl;
      }, []);
      const setFloating = React$2.useCallback((node) => {
        forwardedRef.current = node;
        floatingRef(node);
      }, [floatingRef, forwardedRef]);
      const setReference = React$2.useCallback((node) => {
        referenceRef(node);
        const childRef = childProp == null ? void 0 : childProp.ref;
        if (typeof childRef === "function") {
          childRef(node);
        } else if (childRef) {
          childRef.current = node;
        }
      }, [childProp, referenceRef]);
      const child = React$2.useMemo(() => {
        if (!childProp || referenceElement)
          return null;
        return React$2.cloneElement(childProp, { ref: setReference });
      }, [childProp, referenceElement, setReference]);
      React$2.useEffect(() => {
        referenceRef(referenceElement || null);
      }, [referenceRef, referenceElement]);
      if (disabled) {
        return childProp || /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, {});
      }
      const popover = /* @__PURE__ */ jsxRuntime.jsx(LayerProvider, { zOffset, children: /* @__PURE__ */ jsxRuntime.jsx(PopoverCard, { ...restProps, __unstable_margins: margins, arrow: arrowProp, arrowRef: setArrow, arrowX, arrowY, boundaryWidth: preventOverflow ? boundarySize == null ? void 0 : boundarySize.width : void 0, hidden: referenceHidden, overflow, padding, placement, radius, ref: setFloating, scheme, shadow, strategy, tone, x: x2, y: y2, width, children: content }) });
      return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [open && /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: portal ? /* @__PURE__ */ jsxRuntime.jsx(Portal, { __unstable_name: typeof portal === "string" ? portal : void 0, children: popover }) : popover }), child] });
    }));
    Popover.displayName = "Popover";
    function radioBaseStyle() {
      return Ae(_templateObject36 || (_templateObject36 = _taggedTemplateLiteral(["\n    position: relative;\n\n    &:not([hidden]) {\n      display: inline-block;\n    }\n\n    &[data-read-only] {\n      outline: 1px solid red;\n    }\n  "])));
    }
    function inputElementStyle(props) {
      const { theme } = props;
      const { focusRing, input } = theme.sanity;
      const color2 = theme.sanity.color.input;
      const dist = (input.radio.size - input.radio.markSize) / 2;
      return Ae(_templateObject37 || (_templateObject37 = _taggedTemplateLiteral(["\n    appearance: none;\n    position: absolute;\n    top: 0;\n    left: 0;\n    opacity: 0;\n    height: 100%;\n    width: 100%;\n    outline: none;\n    z-index: 1;\n    padding: 0;\n    margin: 0;\n    border-radius: ", ";\n    border: none;\n\n    /* enabled */\n    & + span {\n      display: block;\n      position: relative;\n      height: ", ";\n      width: ", ";\n      border-radius: ", ";\n      background: ", ";\n      box-shadow: ", ";\n\n      &::after {\n        content: '';\n        position: absolute;\n        top: ", ";\n        left: ", ";\n        height: ", ";\n        width: ", ";\n        border-radius: ", ";\n        background: ", ";\n        opacity: 0;\n      }\n    }\n\n    /* focused */\n    &:not(:disabled):focus + span {\n      box-shadow: ", ";\n    }\n\n    &:not(:disabled):focus:not(:focus-visible) + span {\n      box-shadow: ", ";\n    }\n\n    &:checked + span::after {\n      opacity: 1;\n    }\n\n    /* read only */\n    &[data-read-only] + span {\n      box-shadow: 0 0 0 1px ", ";\n      background: ", ";\n\n      &::after {\n        background: ", ";\n      }\n    }\n\n    /* disabled */\n    &:not([data-read-only]):disabled + span {\n      box-shadow: 0 0 0 1px ", ";\n      background: ", ";\n\n      &::after {\n        background: ", ";\n      }\n    }\n  "])), rem(input.radio.size / 2), rem(input.radio.size), rem(input.radio.size), rem(input.radio.size / 2), color2.default.enabled.bg, focusRingBorderStyle({ color: color2.default.enabled.border, width: input.border.width }), rem(dist), rem(dist), rem(input.radio.markSize), rem(input.radio.markSize), rem(input.radio.markSize / 2), color2.default.enabled.fg, focusRingStyle({ border: { width: input.border.width, color: color2.default.enabled.border }, focusRing }), focusRingBorderStyle({ color: color2.default.enabled.border, width: input.border.width }), color2.default.readOnly.border, color2.default.readOnly.bg, color2.default.readOnly.fg, color2.default.disabled.border, color2.default.disabled.bg, color2.default.disabled.fg);
    }
    var Root$h = styled.div(radioBaseStyle);
    var Input$4 = styled.input(inputElementStyle);
    React$2.forwardRef(function Radio2(props, forwardedRef) {
      const { className, disabled, style: style2, customValidity, readOnly, ...restProps } = props;
      const ref = useForwardedRef(forwardedRef);
      useCustomValidity(ref, customValidity);
      return /* @__PURE__ */ jsxRuntime.jsxs(Root$h, { className, "data-ui": "Radio", style: style2, children: [/* @__PURE__ */ jsxRuntime.jsx(Input$4, { "data-read-only": !disabled && readOnly ? "" : void 0, ...restProps, disabled: disabled || readOnly, readOnly, ref, type: "radio" }), /* @__PURE__ */ jsxRuntime.jsx("span", {})] });
    });
    function rootStyle() {
      return Ae(_templateObject38 || (_templateObject38 = _taggedTemplateLiteral(["\n    position: relative;\n    width: stretch;\n\n    &:not([hidden]) {\n      display: inline-block;\n    }\n  "])));
    }
    function inputBaseStyle(props) {
      const { theme } = props;
      const font = theme.sanity.fonts.text;
      return Ae(_templateObject39 || (_templateObject39 = _taggedTemplateLiteral(["\n    -webkit-font-smoothing: antialiased;\n    appearance: none;\n    border: 0;\n    font-family: ", ";\n    color: inherit;\n    width: 100%;\n    outline: none;\n    margin: 0;\n\n    &:disabled {\n      opacity: 1;\n    }\n  "])), font.family);
    }
    function inputColorStyle(props) {
      const { theme } = props;
      const { focusRing, input } = theme.sanity;
      const color2 = theme.sanity.color.input;
      return Ae(_templateObject40 || (_templateObject40 = _taggedTemplateLiteral(["\n    /* enabled */\n    background-color: ", ";\n    color: ", ";\n    box-shadow: ", ";\n\n    /* hovered */\n    @media (hover: hover) {\n      &:not(:disabled):hover {\n        background-color: ", ";\n        color: ", ";\n        box-shadow: ", ";\n      }\n    }\n\n    /* focused */\n    &:not(:disabled):focus {\n      box-shadow: ", ";\n    }\n\n    /* read-only */\n    &[data-read-only] {\n      background-color: ", ";\n      color: ", ";\n      box-shadow: ", ";\n    }\n\n    /* disabled */\n    &:not([data-read-only]):disabled {\n      background-color: ", ";\n      color: ", ";\n      box-shadow: ", ";\n    }\n  "])), color2.default.enabled.bg, color2.default.enabled.fg, focusRingBorderStyle({ color: color2.default.enabled.border, width: input.border.width }), color2.default.hovered.bg, color2.default.hovered.fg, focusRingBorderStyle({ color: color2.default.hovered.border, width: input.border.width }), focusRingStyle({ border: { width: input.border.width, color: color2.default.enabled.border }, focusRing }), color2.default.readOnly.bg, color2.default.readOnly.fg, focusRingBorderStyle({ color: color2.default.readOnly.border, width: input.border.width }), color2.default.disabled.bg, color2.default.disabled.fg, focusRingBorderStyle({ color: color2.default.disabled.border, width: input.border.width }));
    }
    function textSize(size2) {
      return { fontSize: rem(size2.fontSize), lineHeight: rem(size2.lineHeight) };
    }
    function inputTextSizeStyle(props) {
      const { theme, $fontSize } = props;
      const { sizes } = theme.sanity.fonts.text;
      return _responsive(theme.sanity.media, $fontSize, (sizeIndex) => textSize(sizes[sizeIndex] || sizes[2]));
    }
    function inputStyle() {
      return [responsiveRadiusStyle, inputBaseStyle, inputColorStyle, inputTextSizeStyle, responsiveInputPaddingIconRightStyle];
    }
    function iconBoxStyle(props) {
      const { theme } = props;
      const color2 = theme.sanity.color.input;
      return Ae(_templateObject41 || (_templateObject41 = _taggedTemplateLiteral(["\n    pointer-events: none;\n    position: absolute;\n    top: 0;\n    right: 0;\n\n    /* enabled */\n    --card-fg-color: ", ";\n\n    /* hover */\n    @media (hover: hover) {\n      select:not(disabled):not(:read-only):hover + && {\n        --card-fg-color: ", ";\n      }\n    }\n\n    /* disabled */\n    select:disabled + && {\n      --card-fg-color: ", ";\n    }\n\n    /* read-only */\n    select[data-read-only] + && {\n      --card-fg-color: ", ";\n    }\n  "])), color2.default.enabled.fg, color2.default.hovered.fg, color2.default.disabled.fg, color2.default.readOnly.fg);
    }
    var selectStyle = { root: rootStyle, input: inputStyle, iconBox: iconBoxStyle };
    var Root$g = styled.div(selectStyle.root);
    var Input$3 = styled.select(selectStyle.input);
    var IconBox = styled(Box)(selectStyle.iconBox);
    React$2.forwardRef(function Select2(props, forwardedRef) {
      const { children, customValidity, disabled, fontSize: fontSize2 = 2, padding = 3, radius = 1, readOnly, space: space2 = 3, ...restProps } = props;
      const ref = useForwardedRef(forwardedRef);
      useCustomValidity(ref, customValidity);
      return /* @__PURE__ */ jsxRuntime.jsxs(Root$g, { "data-ui": "Select", children: [/* @__PURE__ */ jsxRuntime.jsx(Input$3, { "data-read-only": !disabled && readOnly ? "" : void 0, "data-ui": "Select", ...restProps, $fontSize: useArrayProp(fontSize2), $padding: useArrayProp(padding), $radius: useArrayProp(radius), $space: useArrayProp(space2), disabled: disabled || readOnly, ref, children }), /* @__PURE__ */ jsxRuntime.jsx(IconBox, { padding, children: /* @__PURE__ */ jsxRuntime.jsx(Text, { size: fontSize2, children: /* @__PURE__ */ jsxRuntime.jsx(SelectIcon, {}) }) })] });
    });
    var BASE_STYLE = { "&&:not([hidden])": { display: "grid" }, '&[data-as="ul"],&[data-as="ol"]': { listStyle: "none" }, gridTemplateColumns: "minmax(0, 1fr)", gridAutoRows: "min-content" };
    function stackBaseStyle() {
      return BASE_STYLE;
    }
    function responsiveStackSpaceStyle(props) {
      const { theme } = props;
      const { media, space: space2 } = theme.sanity;
      return _responsive(media, props.$space, (spaceIndex) => ({ gridGap: rem(space2[spaceIndex]) }));
    }
    var Root$f = styled(Box)(stackBaseStyle, responsiveStackSpaceStyle);
    var Stack = React$2.forwardRef(function Stack2(props, ref) {
      const { as, space: space2, ...restProps } = props;
      return /* @__PURE__ */ jsxRuntime.jsx(Root$f, { "data-as": typeof as === "string" ? as : void 0, "data-ui": "Stack", ...restProps, $space: useArrayProp(space2), forwardedAs: as, ref });
    });
    function switchBaseStyles() {
      return Ae(_templateObject42 || (_templateObject42 = _taggedTemplateLiteral(["\n    position: relative;\n    &:not([hidden]) {\n      display: inline-block;\n    }\n  "])));
    }
    function switchInputStyles() {
      return Ae(_templateObject43 || (_templateObject43 = _taggedTemplateLiteral(["\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    opacity: 0;\n    height: 100%;\n    width: 100%;\n    outline: none;\n    padding: 0;\n    margin: 0;\n\n    /* Place the input element above the representation element */\n    z-index: 1;\n  "])));
    }
    function switchRepresentationStyles(props) {
      const { theme } = props;
      const { focusRing, input } = theme.sanity;
      const color2 = theme.sanity.color.button.default;
      return Ae(_templateObject44 || (_templateObject44 = _taggedTemplateLiteral(["\n    --switch-bg-color: ", ";\n    --switch-fg-color: ", ";\n    --switch-box-shadow: none;\n\n    &:not([hidden]) {\n      display: block;\n    }\n    position: relative;\n    width: ", ";\n    height: ", ";\n    border-radius: ", ";\n\n    /* Make sure it\u2019s not possible to interact with the wrapper element */\n    pointer-events: none;\n\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      z-index: 1;\n      box-shadow: var(--switch-box-shadow);\n      border-radius: inherit;\n    }\n\n    /* Focus styles */\n    input:focus + && {\n      --switch-box-shadow: ", ";\n    }\n\n    input:focus:not(:focus-visible) + && {\n      --switch-box-shadow: none;\n    }\n\n    input:checked + && {\n      --switch-bg-color: ", ";\n      --switch-fg-color: ", ";\n    }\n\n    @media (hover: hover) {\n      input:not(:disabled):hover + && {\n        --switch-bg-color: ", ";\n        --switch-fg-color: ", ";\n      }\n\n      input:not(:disabled):checked:hover + && {\n        --switch-bg-color: ", ";\n        --switch-fg-color: ", ";\n      }\n    }\n\n    input:not([data-read-only]):disabled + && {\n      --switch-bg-color: ", ";\n      --switch-fg-color: ", ";\n    }\n  "])), color2.default.enabled.bg, color2.default.enabled.fg, rem(input.switch.width), rem(input.switch.height), rem(input.switch.height / 2), focusRingStyle({ focusRing }), color2.positive.enabled.bg, color2.positive.enabled.fg, color2.default.hovered.bg, color2.default.hovered.fg, color2.positive.hovered.bg, color2.positive.hovered.fg, color2.default.disabled.bg, color2.default.disabled.fg);
    }
    function switchTrackStyles(props) {
      const { theme } = props;
      const { input } = theme.sanity;
      return Ae(_templateObject45 || (_templateObject45 = _taggedTemplateLiteral(["\n    &:not([hidden]) {\n      display: block;\n    }\n    background-color: var(--switch-bg-color);\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: ", ";\n    height: ", ";\n    border-radius: ", ";\n  "])), rem(input.switch.width), rem(input.switch.height), rem(input.switch.height / 2));
    }
    function switchThumbStyles(props) {
      const { $indeterminate, theme } = props;
      const { input } = theme.sanity;
      const trackWidth = input.switch.width;
      const trackHeight = input.switch.height;
      const trackPadding = input.switch.padding;
      const size2 = trackHeight - input.switch.padding * 2;
      const checkedOffset = trackWidth - trackPadding * 2 - size2;
      const indeterminateOffset = trackWidth / 2 - size2 / 2 - trackPadding;
      const checked = $indeterminate !== true && props.$checked === true;
      return Ae(_templateObject46 || (_templateObject46 = _taggedTemplateLiteral(["\n    &:not([hidden]) {\n      display: block;\n    }\n    position: absolute;\n    left: ", ";\n    top: ", ";\n    height: ", ";\n    width: ", ";\n    border-radius: ", ";\n    transition-property: transform;\n    transition-duration: ", "ms;\n    transition-timing-function: ", ";\n    background: var(--switch-fg-color);\n    transform: translate3d(0, 0, 0);\n\n    ", "\n\n    ", "\n  "])), rem(trackPadding), rem(trackPadding), rem(size2), rem(size2), rem(size2 / 2), input.switch.transitionDurationMs, input.switch.transitionTimingFunction, checked && Ae(_templateObject47 || (_templateObject47 = _taggedTemplateLiteral(["\n      transform: translate3d(", "px, 0, 0);\n    "])), checkedOffset), $indeterminate && Ae(_templateObject48 || (_templateObject48 = _taggedTemplateLiteral(["\n      transform: translate3d(", "px, 0, 0);\n    "])), indeterminateOffset));
    }
    var Root$e = styled.span(switchBaseStyles);
    var Input$2 = styled.input(switchInputStyles);
    var Representation = styled.span(switchRepresentationStyles);
    var Track = styled.span(switchTrackStyles);
    var Thumb = styled.span(switchThumbStyles);
    React$2.forwardRef(function Switch2(props, forwardedRef) {
      const { checked, className, disabled, indeterminate, readOnly, style: style2, ...restProps } = props;
      const ref = useForwardedRef(forwardedRef);
      React$2.useEffect(() => {
        if (ref.current) {
          ref.current.indeterminate = indeterminate || false;
        }
      }, [indeterminate, ref]);
      return /* @__PURE__ */ jsxRuntime.jsxs(Root$e, { className, "data-ui": "Switch", style: style2, children: [/* @__PURE__ */ jsxRuntime.jsx(Input$2, { "data-read-only": !disabled && readOnly ? "" : void 0, ...restProps, checked: indeterminate !== true && checked, disabled: disabled || readOnly, type: "checkbox", ref }), /* @__PURE__ */ jsxRuntime.jsxs(Representation, { "aria-hidden": true, "data-name": "representation", children: [/* @__PURE__ */ jsxRuntime.jsx(Track, {}), /* @__PURE__ */ jsxRuntime.jsx(Thumb, { $checked: checked, $indeterminate: indeterminate })] })] });
    });
    var Root$d = styled.span(textInputRootStyle);
    var InputRoot$1 = styled.span(_templateObject49 || (_templateObject49 = _taggedTemplateLiteral(["\n  flex: 1;\n  min-width: 0;\n  display: block;\n  position: relative;\n"])));
    var Input$1 = styled.textarea(responsiveInputPaddingStyle, textInputBaseStyle, textInputFontSizeStyle);
    var Presentation$1 = styled.div(responsiveRadiusStyle, textInputRepresentationStyle);
    React$2.forwardRef(function TextArea2(props, forwardedRef) {
      const { border: border2 = true, customValidity, disabled = false, fontSize: fontSize2 = 2, padding = 3, radius = 1, weight, ...restProps } = props;
      const ref = useForwardedRef(forwardedRef);
      const rootTheme = useRootTheme();
      useCustomValidity(ref, customValidity);
      return /* @__PURE__ */ jsxRuntime.jsx(Root$d, { "data-ui": "TextArea", children: /* @__PURE__ */ jsxRuntime.jsxs(InputRoot$1, { children: [/* @__PURE__ */ jsxRuntime.jsx(Input$1, { "data-as": "textarea", "data-scheme": rootTheme.scheme, "data-tone": rootTheme.tone, ...restProps, $fontSize: useArrayProp(fontSize2), $padding: useArrayProp(padding), $scheme: rootTheme.scheme, $space: useArrayProp(0), $tone: rootTheme.tone, $weight: weight, disabled, ref }), /* @__PURE__ */ jsxRuntime.jsx(Presentation$1, { $radius: useArrayProp(radius), $scheme: rootTheme.scheme, $tone: rootTheme.tone, "data-border": border2 ? "" : void 0, "data-scheme": rootTheme.scheme, "data-tone": rootTheme.tone })] }) });
    });
    var CLEAR_BUTTON_BOX_STYLE = { zIndex: 2 };
    var Root$c = styled(Card).attrs({ forwardedAs: "span" })(textInputRootStyle);
    var InputRoot = styled.span(_templateObject50 || (_templateObject50 = _taggedTemplateLiteral(["\n  flex: 1;\n  min-width: 0;\n  display: block;\n  position: relative;\n"])));
    var Prefix = styled(Card).attrs({ forwardedAs: "span" })(_templateObject51 || (_templateObject51 = _taggedTemplateLiteral(["\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n\n  & > span {\n    display: block;\n    margin: -1px;\n  }\n"])));
    var Suffix = styled(Card).attrs({ forwardedAs: "span" })(_templateObject52 || (_templateObject52 = _taggedTemplateLiteral(["\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n\n  & > span {\n    display: block;\n    margin: -1px;\n  }\n"])));
    var Input = styled.input(responsiveInputPaddingStyle, textInputBaseStyle, textInputFontSizeStyle);
    var Presentation = styled.span(responsiveRadiusStyle, textInputRepresentationStyle);
    var LeftBox = styled(Box)(_templateObject53 || (_templateObject53 = _taggedTemplateLiteral(["\n  position: absolute;\n  top: 0;\n  left: 0;\n"])));
    var RightBox = styled(Box)(_templateObject54 || (_templateObject54 = _taggedTemplateLiteral(["\n  position: absolute;\n  top: 0;\n  right: 0;\n"])));
    var RightCard = styled(Card)(_templateObject55 || (_templateObject55 = _taggedTemplateLiteral(["\n  background-color: transparent;\n  position: absolute;\n  top: 0;\n  right: 0;\n"])));
    var TextInput = React$2.forwardRef(function TextInput2(props, forwardedRef) {
      const { border: border2 = true, clearButton, disabled = false, fontSize: fontSizeProp = 2, icon, iconRight, onClear, padding: paddingProp = 3, prefix, radius: radiusProp = 1, readOnly, space: spaceProp = 3, suffix, customValidity, type = "text", weight, ...restProps } = props;
      const ref = useForwardedRef(forwardedRef);
      const rootTheme = useRootTheme();
      const fontSize2 = useArrayProp(fontSizeProp);
      const padding = useArrayProp(paddingProp);
      const radius = useArrayProp(radiusProp);
      const space2 = useArrayProp(spaceProp);
      const $hasClearButton = Boolean(clearButton);
      const $hasIcon = Boolean(icon);
      const $hasIconRight = Boolean(iconRight);
      const $hasSuffix = Boolean(suffix);
      const $hasPrefix = Boolean(prefix);
      useCustomValidity(ref, customValidity);
      const handleClearMouseDown = React$2.useCallback((event) => {
        event.preventDefault();
        event.stopPropagation();
      }, []);
      const handleClearClick = React$2.useCallback((event) => {
        var _a2;
        event.preventDefault();
        event.stopPropagation();
        if (onClear)
          onClear();
        (_a2 = ref.current) == null ? void 0 : _a2.focus();
      }, [onClear, ref]);
      const prefixNode = React$2.useMemo(() => prefix && /* @__PURE__ */ jsxRuntime.jsx(Prefix, { borderTop: true, borderLeft: true, borderBottom: true, radius, sizing: "border", tone: "inherit", children: /* @__PURE__ */ jsxRuntime.jsx("span", { children: prefix }) }), [prefix, radius]);
      const presentationNode = React$2.useMemo(() => /* @__PURE__ */ jsxRuntime.jsxs(Presentation, { $hasPrefix, $hasSuffix, $radius: radius, $scheme: rootTheme.scheme, $tone: rootTheme.tone, "data-border": border2 ? "" : void 0, "data-scheme": rootTheme.scheme, "data-tone": rootTheme.tone, children: [icon && /* @__PURE__ */ jsxRuntime.jsx(LeftBox, { padding, children: /* @__PURE__ */ jsxRuntime.jsxs(Text, { size: fontSize2, children: [React$2.isValidElement(icon) && icon, reactIsExports$1.isValidElementType(icon) && React$2.createElement(icon)] }) }), !$hasClearButton && iconRight && /* @__PURE__ */ jsxRuntime.jsx(RightBox, { padding, children: /* @__PURE__ */ jsxRuntime.jsxs(Text, { size: fontSize2, children: [React$2.isValidElement(iconRight) && iconRight, reactIsExports$1.isValidElementType(iconRight) && React$2.createElement(iconRight)] }) })] }), [border2, fontSize2, icon, iconRight, padding, radius, rootTheme, $hasClearButton, $hasPrefix, $hasSuffix]);
      const clearButtonBoxPadding = React$2.useMemo(() => padding.map((v2) => {
        if (v2 === 0)
          return 0;
        if (v2 === 1)
          return 1;
        if (v2 === 2)
          return 1;
        return v2 - 2;
      }), [padding]);
      const clearButtonPadding = React$2.useMemo(() => padding.map((v2) => {
        if (v2 === 0)
          return 0;
        if (v2 === 1)
          return 0;
        if (v2 === 2)
          return 1;
        return v2 - 1;
      }), [padding]);
      const clearButtonProps = React$2.useMemo(() => typeof clearButton === "object" ? clearButton : EMPTY_RECORD, [clearButton]);
      const clearButtonNode = React$2.useMemo(() => !disabled && !readOnly && clearButton && /* @__PURE__ */ jsxRuntime.jsx(RightCard, { forwardedAs: "span", padding: clearButtonBoxPadding, style: CLEAR_BUTTON_BOX_STYLE, tone: customValidity ? "critical" : "inherit", children: /* @__PURE__ */ jsxRuntime.jsx(Button, { "aria-label": "Clear", "data-qa": "clear-button", fontSize: fontSize2, icon: CloseIcon, mode: "bleed", padding: clearButtonPadding, radius, ...clearButtonProps, onClick: handleClearClick, onMouseDown: handleClearMouseDown }) }), [clearButton, clearButtonBoxPadding, clearButtonPadding, clearButtonProps, customValidity, disabled, fontSize2, handleClearClick, handleClearMouseDown, radius, readOnly]);
      const suffixNode = React$2.useMemo(() => suffix && /* @__PURE__ */ jsxRuntime.jsx(Suffix, { borderTop: true, borderRight: true, borderBottom: true, radius, sizing: "border", tone: "inherit", children: /* @__PURE__ */ jsxRuntime.jsx("span", { children: suffix }) }), [radius, suffix]);
      return /* @__PURE__ */ jsxRuntime.jsxs(Root$c, { "data-ui": "TextInput", tone: rootTheme.tone, children: [prefixNode, /* @__PURE__ */ jsxRuntime.jsxs(InputRoot, { children: [/* @__PURE__ */ jsxRuntime.jsx(Input, { "data-as": "input", "data-scheme": rootTheme.scheme, "data-tone": rootTheme.tone, ...restProps, $fontSize: fontSize2, $iconLeft: $hasIcon, $iconRight: $hasIconRight || $hasClearButton, $padding: padding, $scheme: rootTheme.scheme, $space: space2, $tone: rootTheme.tone, $weight: weight, disabled, readOnly, ref, type }), presentationNode, clearButtonNode] }), suffixNode] });
    });
    var Root$b = styled.div(_templateObject56 || (_templateObject56 = _taggedTemplateLiteral(["\n  position: absolute;\n  pointer-events: none;\n  width: 15px;\n  height: 15px;\n  fill: none;\n\n  :empty + & {\n    display: none;\n  }\n\n  & > svg {\n    display: block;\n    transform-origin: 7.5px 7.5px;\n  }\n\n  /* position: absolute;\n  width: 15px;\n  height: 15px;\n  fill: none;\n\n  :empty + & {\n    display: none;\n  }\n\n  & > svg {\n    &:not([hidden]) {\n      display: block;\n    }\n    transform-origin: 7.5px 7.5px;\n  } */\n\n  [data-placement^='top'] > & {\n    bottom: -27px;\n  }\n\n  [data-placement^='right'] > & {\n    left: -27px;\n\n    & > svg {\n      transform: rotate(90deg);\n    }\n  }\n\n  [data-placement^='left'] > & {\n    right: -27px;\n\n    & > svg {\n      transform: rotate(-90deg);\n    }\n  }\n\n  [data-placement^='bottom'] > & {\n    top: -27px;\n\n    & > svg {\n      transform: rotate(180deg);\n    }\n  }\n"])));
    var Border = styled.path(_templateObject57 || (_templateObject57 = _taggedTemplateLiteral(["\n  fill: var(--card-shadow-outline-color);\n"])));
    var Shape = styled.path(_templateObject58 || (_templateObject58 = _taggedTemplateLiteral(["\n  fill: var(--card-bg-color);\n"])));
    var TooltipArrow = React$2.forwardRef(function TooltipArrow2(props, ref) {
      const { ...restProps } = props;
      return /* @__PURE__ */ jsxRuntime.jsx(Root$b, { "data-ui": "Tooltip__arrow", ...restProps, ref, children: /* @__PURE__ */ jsxRuntime.jsxs("svg", { width: "15", height: "15", viewBox: "0 0 15 15", children: [/* @__PURE__ */ jsxRuntime.jsx(Border, { d: "M11.5266 1C11.032 1.32802 10.5837 1.73105 10.1995 2.20057L9.04792 3.6081C8.24771 4.58614 6.7523 4.58614 5.95209 3.6081L4.80047 2.20057C4.41632 1.73105 3.96796 1.32802 3.47341 1H0.156727C1.65639 1 3.07687 1.67313 4.02651 2.83381L5.17813 4.24134C6.37844 5.70839 8.62156 5.70839 9.82187 4.24134L10.9735 2.83381C11.9231 1.67313 13.3436 1 14.8433 1H11.5266Z" }), /* @__PURE__ */ jsxRuntime.jsx(Shape, { d: "M0.156725 0C1.95632 0 3.66089 0.80776 4.80047 2.20057L5.95209 3.6081C6.75229 4.58614 8.24771 4.58614 9.04791 3.6081L10.1995 2.20057C11.3391 0.80776 13.0437 0 14.8433 0H15H0H0.156725Z" })] }) });
    });
    var Root$a = styled(Layer)(_templateObject59 || (_templateObject59 = _taggedTemplateLiteral(["\n  pointer-events: none;\n"])));
    React$2.forwardRef(function Tooltip2(props, ref) {
      var _a2, _b, _c;
      const boundaryElementContext = useBoundaryElement();
      const theme = useTheme();
      const { boundaryElement = boundaryElementContext == null ? void 0 : boundaryElementContext.element, children: childProp, content, disabled, fallbackPlacements: fallbackPlacementsProp, padding, placement: placementProp = "bottom", portal, scheme, shadow = 2, zOffset = (_a2 = theme.sanity.layer) == null ? void 0 : _a2.tooltip.zOffset, ...restProps } = props;
      const fallbackPlacements = useArrayProp(fallbackPlacementsProp);
      const forwardedRef = useForwardedRef(ref);
      const [referenceElement, setReferenceElement] = React$2.useState(null);
      const arrowRef = React$2.useRef(null);
      const rootBoundary = "viewport";
      const middleware = React$2.useMemo(() => {
        const ret = [];
        ret.push(flip({ boundary: boundaryElement || void 0, fallbackPlacements, padding: 4, rootBoundary }));
        ret.push(offset({ mainAxis: 3 }));
        ret.push(shift({ boundary: boundaryElement || void 0, rootBoundary, padding: 4 }));
        ret.push(arrow({ element: arrowRef, padding: 2 }));
        return ret;
      }, [boundaryElement, fallbackPlacements]);
      const { x: x2, y: y2, placement, reference, floating, middlewareData, update, strategy } = useFloating({ middleware, placement: placementProp, whileElementsMounted: autoUpdate });
      const rootStyle2 = React$2.useMemo(() => ({ position: strategy, top: y2 != null ? y2 : 0, left: x2 != null ? x2 : 0 }), [strategy, x2, y2]);
      const staticSide = placement && FLOATING_STATIC_SIDES[placement.split("-")[0]];
      const arrowX = (_b = middlewareData.arrow) == null ? void 0 : _b.x;
      const arrowY = (_c = middlewareData.arrow) == null ? void 0 : _c.y;
      const arrowStyle = React$2.useMemo(() => {
        const style2 = { left: arrowX !== null ? arrowX : void 0, top: arrowY !== null ? arrowY : void 0, right: void 0, bottom: void 0 };
        if (staticSide)
          style2[staticSide] = -15;
        return style2;
      }, [arrowX, arrowY, staticSide]);
      const [isOpen, setIsOpen] = React$2.useState(false);
      const handleBlur = React$2.useCallback(() => setIsOpen(false), []);
      const handleFocus = React$2.useCallback(() => setIsOpen(true), []);
      const handleMouseEnter = React$2.useCallback(() => setIsOpen(true), []);
      const handleMouseLeave = React$2.useCallback(() => setIsOpen(false), []);
      React$2.useEffect(() => {
        if (!isOpen)
          return;
        function handleWindowMouseMove(event) {
          if (!referenceElement)
            return;
          const isHoveringReference = referenceElement === event.target || event.target instanceof Node && referenceElement.contains(event.target);
          if (!isHoveringReference) {
            setIsOpen(false);
            window.removeEventListener("mousemove", handleWindowMouseMove);
          }
        }
        window.addEventListener("mousemove", handleWindowMouseMove);
        return () => {
          window.removeEventListener("mousemove", handleWindowMouseMove);
        };
      }, [isOpen, referenceElement]);
      React$2.useEffect(() => {
        if (disabled)
          setIsOpen(false);
      }, [disabled]);
      React$2.useEffect(() => {
        if (!content)
          setIsOpen(false);
      }, [content]);
      React$2.useEffect(() => reference(referenceElement), [reference, referenceElement]);
      const setArrow = React$2.useCallback((arrowEl) => {
        arrowRef.current = arrowEl;
        update();
      }, [update]);
      const setFloating = React$2.useCallback((node) => {
        forwardedRef.current = node;
        floating(node);
      }, [floating, forwardedRef]);
      const childRef = childProp == null ? void 0 : childProp.ref;
      const setReference = React$2.useCallback((node) => {
        if (typeof childRef === "function") {
          childRef(node);
        } else if (childRef) {
          childRef.current = node;
        }
        setReferenceElement(node);
      }, [childRef]);
      const child = React$2.useMemo(() => {
        if (!childProp)
          return null;
        return React$2.cloneElement(childProp, { onBlur: handleBlur, onFocus: handleFocus, onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave, ref: setReference });
      }, [childProp, handleBlur, handleFocus, handleMouseEnter, handleMouseLeave, setReference]);
      if (!child)
        return /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, {});
      if (disabled)
        return child;
      const root = /* @__PURE__ */ jsxRuntime.jsx(Root$a, { "data-ui": "Tooltip", ...restProps, ref: setFloating, style: rootStyle2, zOffset, children: /* @__PURE__ */ jsxRuntime.jsxs(Card, { "data-ui": "Tooltip__card", "data-placement": placement, padding, radius: 2, scheme, shadow, children: [content, /* @__PURE__ */ jsxRuntime.jsx(TooltipArrow, { ref: setArrow, style: arrowStyle })] }) });
      return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [child, isOpen && /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: portal ? /* @__PURE__ */ jsxRuntime.jsx(Portal, { __unstable_name: typeof portal === "string" ? portal : void 0, children: root }) : root })] });
    });
    var Root$9 = styled.div(_templateObject60 || (_templateObject60 = _taggedTemplateLiteral(["\n  line-height: 0;\n"])));
    var ListBox = styled(Box)(_templateObject61 || (_templateObject61 = _taggedTemplateLiteral(["\n  & > ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n  }\n"])));
    var rotate = We(_templateObject62 || (_templateObject62 = _taggedTemplateLiteral(["\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n"])));
    var AnimatedSpinnerIcon = styled(SpinnerIcon)(_templateObject63 || (_templateObject63 = _taggedTemplateLiteral(["\n  animation: ", " 500ms linear infinite;\n"])), rotate);
    function AutocompleteOption(props) {
      const { children, id, onSelect, selected, value } = props;
      const handleClick = React$2.useCallback(() => {
        setTimeout(() => {
          onSelect(value);
        }, 0);
      }, [onSelect, value]);
      const handleKeyDown = React$2.useCallback((event) => {
        if (event.key === "Enter" && !_isEnterToClickElement(event.currentTarget)) {
          handleClick();
        }
      }, [handleClick]);
      return /* @__PURE__ */ jsxRuntime.jsx("li", { "aria-selected": selected, "data-ui": "AutocompleteOption", id, role: "option", onClick: handleClick, onKeyDown: handleKeyDown, children });
    }
    function autocompleteReducer(state, msg2) {
      if (msg2.type === "input/change") {
        return { ...state, activeValue: null, focused: true, query: msg2.query };
      }
      if (msg2.type === "input/focus") {
        return { ...state, focused: true };
      }
      if (msg2.type === "root/blur") {
        return { ...state, focused: false, query: null };
      }
      if (msg2.type === "root/clear") {
        return { ...state, activeValue: null, query: null, value: null };
      }
      if (msg2.type === "root/escape") {
        return { ...state, focused: false, query: null };
      }
      if (msg2.type === "root/open") {
        return { ...state, query: state.query || msg2.query };
      }
      if (msg2.type === "root/setActiveValue") {
        return { ...state, activeValue: msg2.value, listFocused: msg2.listFocused || state.listFocused };
      }
      if (msg2.type === "root/setListFocused") {
        return { ...state, listFocused: msg2.listFocused };
      }
      if (msg2.type === "value/change") {
        return { ...state, activeValue: msg2.value, query: null, value: msg2.value };
      }
      return state;
    }
    var AUTOCOMPLETE_LISTBOX_IGNORE_KEYS = ["Control", "Shift", "Alt", "Enter", "Home", "End", "PageUp", "PageDown", "Meta", "Tab", "CapsLock"];
    var AUTOCOMPLETE_POPOVER_PLACEMENT = "bottom-start";
    var AUTOCOMPLETE_POPOVER_FALLBACK_PLACEMENTS = ["bottom-start", "top-start"];
    var DEFAULT_RENDER_VALUE = (value, option) => option ? option.value : value;
    var DEFAULT_FILTER_OPTION = (query, option) => option.value.toLowerCase().indexOf(query.toLowerCase()) > -1;
    React$2.forwardRef(function InnerAutocomplete2(props, ref) {
      const { border: border2 = true, customValidity, disabled, filterOption: filterOptionProp, fontSize: fontSize2 = 2, icon, id, listBox = EMPTY_RECORD, loading, onBlur, onChange, onFocus, onQueryChange, onSelect, openButton, options: optionsProp, padding: paddingProp = 3, popover = EMPTY_RECORD, prefix, radius = 3, readOnly, relatedElements, renderOption: renderOptionProp, renderPopover, renderValue = DEFAULT_RENDER_VALUE, suffix, value: valueProp, ...restProps } = props;
      const [state, dispatch] = React$2.useReducer(autocompleteReducer, { activeValue: valueProp || null, focused: false, listFocused: false, query: null, value: valueProp || null });
      const { activeValue, focused, listFocused, query, value } = state;
      const defaultRenderOption = React$2.useCallback((_ref22) => {
        let { value: value2 } = _ref22;
        return /* @__PURE__ */ jsxRuntime.jsx(Card, { "data-as": "button", padding: paddingProp, radius: 2, tone: "inherit", children: /* @__PURE__ */ jsxRuntime.jsx(Text, { size: fontSize2, textOverflow: "ellipsis", children: value2 }) });
      }, [fontSize2, paddingProp]);
      const renderOption = typeof renderOptionProp === "function" ? renderOptionProp : defaultRenderOption;
      const filterOption = typeof filterOptionProp === "function" ? filterOptionProp : DEFAULT_FILTER_OPTION;
      const rootElementRef = React$2.useRef(null);
      const resultsPopoverElementRef = React$2.useRef(null);
      const inputElementRef = React$2.useRef(null);
      const listBoxElementRef = React$2.useRef(null);
      const listFocusedRef = React$2.useRef(false);
      const valueRef = React$2.useRef(value);
      const valuePropRef = React$2.useRef(valueProp);
      const popoverMouseWithinRef = React$2.useRef(false);
      const forwardedRef = useForwardedRef(ref);
      const listBoxId = "".concat(id, "-listbox");
      const options = Array.isArray(optionsProp) ? optionsProp : EMPTY_ARRAY;
      const padding = useArrayProp(paddingProp);
      const currentOption = React$2.useMemo(() => value !== null ? options.find((o) => o.value === value) : void 0, [options, value]);
      const filteredOptions = React$2.useMemo(() => options.filter((option) => query ? filterOption(query, option) : true), [filterOption, options, query]);
      const filteredOptionsLen = filteredOptions.length;
      const activeItemId = activeValue ? "".concat(id, "-option-").concat(activeValue) : void 0;
      const expanded = query !== null && loading || focused && query !== null;
      const handleRootBlur = React$2.useCallback((event) => {
        setTimeout(() => {
          if (popoverMouseWithinRef.current) {
            return;
          }
          const elements = (relatedElements || []).concat(rootElementRef.current ? [rootElementRef.current] : [], resultsPopoverElementRef.current ? [resultsPopoverElementRef.current] : []);
          let focusInside = false;
          if (document.activeElement) {
            for (const e of elements) {
              if (e === document.activeElement || e.contains(document.activeElement)) {
                focusInside = true;
                break;
              }
            }
          }
          if (focusInside === false) {
            dispatch({ type: "root/blur" });
            popoverMouseWithinRef.current = false;
            if (onQueryChange)
              onQueryChange(null);
            if (onBlur)
              onBlur(event);
          }
        }, 0);
      }, [onBlur, onQueryChange, relatedElements]);
      const handleRootFocus = React$2.useCallback((event) => {
        const listBoxElement = listBoxElementRef.current;
        const focusedElement = event.target instanceof HTMLElement ? event.target : null;
        const listFocused2 = (listBoxElement == null ? void 0 : listBoxElement.contains(focusedElement)) || false;
        if (listFocused2 !== listFocusedRef.current) {
          listFocusedRef.current = listFocused2;
          dispatch({ type: "root/setListFocused", listFocused: listFocused2 });
        }
      }, []);
      const handleOptionSelect = React$2.useCallback((v2) => {
        var _a2;
        dispatch({ type: "value/change", value: v2 });
        popoverMouseWithinRef.current = false;
        if (onSelect)
          onSelect(v2);
        valueRef.current = v2;
        if (onChange)
          onChange(v2);
        if (onQueryChange)
          onQueryChange(null);
        (_a2 = inputElementRef.current) == null ? void 0 : _a2.focus();
      }, [onChange, onSelect, onQueryChange]);
      const handleRootKeyDown = React$2.useCallback((event) => {
        var _a2, _b;
        if (event.key === "ArrowDown") {
          event.preventDefault();
          if (!filteredOptionsLen)
            return;
          const activeOption = filteredOptions.find((o) => o.value === activeValue);
          const activeIndex = activeOption ? filteredOptions.indexOf(activeOption) : -1;
          const nextActiveOption = filteredOptions[(activeIndex + 1) % filteredOptionsLen];
          if (nextActiveOption) {
            dispatch({ type: "root/setActiveValue", value: nextActiveOption.value, listFocused: true });
          }
          return;
        }
        if (event.key === "ArrowUp") {
          event.preventDefault();
          if (!filteredOptionsLen)
            return;
          const activeOption = filteredOptions.find((o) => o.value === activeValue);
          const activeIndex = activeOption ? filteredOptions.indexOf(activeOption) : -1;
          const nextActiveOption = filteredOptions[activeIndex === -1 ? filteredOptionsLen - 1 : (filteredOptionsLen + activeIndex - 1) % filteredOptionsLen];
          if (nextActiveOption) {
            dispatch({ type: "root/setActiveValue", value: nextActiveOption.value, listFocused: true });
          }
          return;
        }
        if (event.key === "Escape") {
          dispatch({ type: "root/escape" });
          popoverMouseWithinRef.current = false;
          if (onQueryChange)
            onQueryChange(null);
          (_a2 = inputElementRef.current) == null ? void 0 : _a2.focus();
          return;
        }
        const target2 = event.target;
        const listEl = listBoxElementRef.current;
        if ((listEl === target2 || (listEl == null ? void 0 : listEl.contains(target2))) && !AUTOCOMPLETE_LISTBOX_IGNORE_KEYS.includes(event.key)) {
          (_b = inputElementRef.current) == null ? void 0 : _b.focus();
          return;
        }
      }, [activeValue, filteredOptions, filteredOptionsLen, onQueryChange]);
      const handleInputChange = React$2.useCallback((event) => {
        const nextQuery = event.currentTarget.value;
        dispatch({ type: "input/change", query: nextQuery });
        if (onQueryChange)
          onQueryChange(nextQuery);
      }, [onQueryChange]);
      const handleInputFocus = React$2.useCallback((event) => {
        if (!focused) {
          dispatch({ type: "input/focus" });
          if (onFocus)
            onFocus(event);
        }
      }, [focused, onFocus]);
      const handlePopoverMouseEnter = React$2.useCallback(() => {
        popoverMouseWithinRef.current = true;
      }, []);
      const handlePopoverMouseLeave = React$2.useCallback(() => {
        popoverMouseWithinRef.current = false;
      }, []);
      const handleClearButtonClick = React$2.useCallback(() => {
        var _a2;
        dispatch({ type: "root/clear" });
        valueRef.current = "";
        if (onChange)
          onChange("");
        if (onQueryChange)
          onQueryChange(null);
        (_a2 = inputElementRef.current) == null ? void 0 : _a2.focus();
      }, [onChange, onQueryChange]);
      const handleClearButtonFocus = React$2.useCallback(() => {
        dispatch({ type: "input/focus" });
      }, []);
      React$2.useEffect(() => {
        if (valueProp !== valuePropRef.current) {
          valuePropRef.current = valueProp;
          if (valueProp !== void 0) {
            dispatch({ type: "value/change", value: valueProp });
            valueRef.current = valueProp;
          }
          return;
        }
        if (valueProp !== valueRef.current) {
          valueRef.current = valueProp || null;
          dispatch({ type: "value/change", value: valueProp || null });
        }
      }, [valueProp]);
      React$2.useEffect(() => {
        if (!focused && valueRef.current) {
          dispatch({ type: "root/setActiveValue", value: valueRef.current });
        }
      }, [focused]);
      React$2.useEffect(() => {
        const listElement = listBoxElementRef.current;
        if (!listElement)
          return;
        const activeOption = filteredOptions.find((o) => o.value === activeValue);
        if (activeOption) {
          const activeIndex = filteredOptions.indexOf(activeOption);
          const activeItemElement = listElement.childNodes[activeIndex];
          if (activeItemElement) {
            if (_hasFocus(activeItemElement)) {
              return;
            }
            focusFirstDescendant(activeItemElement);
          }
        }
      }, [activeValue, filteredOptions]);
      const setRef = React$2.useCallback((el2) => {
        inputElementRef.current = el2;
        forwardedRef.current = el2;
      }, [forwardedRef]);
      const clearButton = React$2.useMemo(() => {
        if (!loading && !disabled && value) {
          return { "aria-label": "Clear", onFocus: handleClearButtonFocus };
        }
        return void 0;
      }, [disabled, handleClearButtonFocus, loading, value]);
      const openButtonBoxPadding = React$2.useMemo(() => padding.map((v2) => {
        if (v2 === 0)
          return 0;
        if (v2 === 1)
          return 1;
        if (v2 === 2)
          return 1;
        return v2 - 2;
      }), [padding]);
      const openButtonPadding = React$2.useMemo(() => padding.map((v2) => Math.max(v2 - 1, 0)), [padding]);
      const openButtonProps = React$2.useMemo(() => typeof openButton === "object" ? openButton : EMPTY_RECORD, [openButton]);
      const handleOpenClick = React$2.useCallback((event) => {
        dispatch({ type: "root/open", query: value ? renderValue(value, currentOption) : "" });
        if (openButtonProps.onClick)
          openButtonProps.onClick(event);
        _raf(() => {
          var _a2;
          return (_a2 = inputElementRef.current) == null ? void 0 : _a2.focus();
        });
      }, [currentOption, openButtonProps, renderValue, value]);
      const openButtonNode = React$2.useMemo(() => !disabled && !readOnly && openButton ? /* @__PURE__ */ jsxRuntime.jsx(Box, { "aria-hidden": expanded, padding: openButtonBoxPadding, children: /* @__PURE__ */ jsxRuntime.jsx(Button, { "aria-label": "Open", disabled: expanded, fontSize: fontSize2, icon: ChevronDownIcon, mode: "bleed", padding: openButtonPadding, ...openButtonProps, onClick: handleOpenClick }) }) : void 0, [disabled, expanded, fontSize2, handleOpenClick, openButton, openButtonBoxPadding, openButtonPadding, openButtonProps, readOnly]);
      const inputValue = React$2.useMemo(() => {
        if (query === null) {
          if (value !== null) {
            return renderValue(value, currentOption);
          }
          return "";
        }
        return query;
      }, [currentOption, query, renderValue, value]);
      const input = /* @__PURE__ */ jsxRuntime.jsx(TextInput, { ...restProps, "aria-activedescendant": activeItemId, "aria-autocomplete": "list", "aria-expanded": expanded, "aria-owns": listBoxId, autoCapitalize: "off", autoComplete: "off", autoCorrect: "off", border: border2, clearButton, customValidity, disabled, fontSize: fontSize2, icon, iconRight: loading && AnimatedSpinnerIcon, id, inputMode: "search", onChange: handleInputChange, onClear: handleClearButtonClick, onFocus: handleInputFocus, padding, prefix, radius, readOnly, ref: setRef, role: "combobox", spellCheck: false, suffix: suffix || openButtonNode, value: inputValue });
      const handleListBoxKeyDown = React$2.useCallback((event) => {
        var _a2;
        if (event.key === "Tab") {
          if (listFocused)
            (_a2 = inputElementRef.current) == null ? void 0 : _a2.focus();
        }
      }, [listFocused]);
      const content = React$2.useMemo(() => {
        if (filteredOptions.length === 0)
          return null;
        return /* @__PURE__ */ jsxRuntime.jsx(ListBox, { "data-ui": "AutoComplete__results", onKeyDown: handleListBoxKeyDown, padding: 1, ...listBox, tabIndex: -1, children: /* @__PURE__ */ jsxRuntime.jsx(Stack, { as: "ul", "aria-multiselectable": false, "data-ui": "AutoComplete__resultsList", id: listBoxId, ref: listBoxElementRef, role: "listbox", space: 1, children: filteredOptions.map((option) => {
          const active = activeValue !== null ? option.value === activeValue : currentOption === option;
          return /* @__PURE__ */ jsxRuntime.jsx(AutocompleteOption, { id: "".concat(id, "-option-").concat(option.value), onSelect: handleOptionSelect, selected: active, value: option.value, children: React$2.cloneElement(renderOption(option), { disabled: loading, selected: active, tabIndex: listFocused && active ? 0 : -1 }) }, option.value);
        }) }) });
      }, [activeValue, currentOption, filteredOptions, handleOptionSelect, handleListBoxKeyDown, id, listBox, listBoxId, listFocused, loading, renderOption]);
      const results = React$2.useMemo(() => {
        if (renderPopover) {
          return renderPopover({ content, hidden: !expanded, inputElement: inputElementRef.current, onMouseEnter: handlePopoverMouseEnter, onMouseLeave: handlePopoverMouseLeave }, resultsPopoverElementRef);
        }
        if (filteredOptionsLen === 0) {
          return null;
        }
        return /* @__PURE__ */ jsxRuntime.jsx(Popover, { arrow: false, constrainSize: true, content, fallbackPlacements: AUTOCOMPLETE_POPOVER_FALLBACK_PLACEMENTS, matchReferenceWidth: true, onMouseEnter: handlePopoverMouseEnter, onMouseLeave: handlePopoverMouseLeave, open: expanded, overflow: "auto", placement: AUTOCOMPLETE_POPOVER_PLACEMENT, portal: true, radius, ref: resultsPopoverElementRef, referenceElement: inputElementRef.current, ...popover });
      }, [content, expanded, filteredOptionsLen, handlePopoverMouseEnter, handlePopoverMouseLeave, popover, radius, renderPopover]);
      return /* @__PURE__ */ jsxRuntime.jsxs(Root$9, { "data-ui": "Autocomplete", onBlur: handleRootBlur, onFocus: handleRootFocus, onKeyDown: handleRootKeyDown, ref: rootElementRef, children: [input, results] });
    });
    var Root$8 = styled.ol(_templateObject64 || (_templateObject64 = _taggedTemplateLiteral(["\n  margin: 0;\n  padding: 0;\n  display: flex;\n  list-style: none;\n  align-items: center;\n  white-space: nowrap;\n  line-height: 0;\n"])));
    var ExpandButton = styled(Button)(_templateObject65 || (_templateObject65 = _taggedTemplateLiteral(["\n  appearance: none;\n  margin: -4px;\n"])));
    React$2.forwardRef(function Breadcrumbs2(props, ref) {
      const { children, maxLength, separator, space: spaceRaw = 2, ...restProps } = props;
      const space2 = useArrayProp(spaceRaw);
      const [open, setOpen] = React$2.useState(false);
      const [expandElement, setExpandElement] = React$2.useState(null);
      const [popoverElement, setPopoverElement] = React$2.useState(null);
      const collapse = React$2.useCallback(() => setOpen(false), []);
      const expand = React$2.useCallback(() => setOpen(true), []);
      useClickOutside(collapse, [expandElement, popoverElement]);
      const rawItems = React$2.useMemo(() => React$2.Children.toArray(children).filter((child) => {
        return React$2.isValidElement(child);
      }), [children]);
      const items = React$2.useMemo(() => {
        const len = rawItems.length;
        if (maxLength && len > maxLength) {
          const beforeLength = Math.ceil(maxLength / 2);
          const afterLength = Math.floor(maxLength / 2);
          return [...rawItems.slice(0, beforeLength - 1), /* @__PURE__ */ jsxRuntime.jsx(Popover, { constrainSize: true, content: /* @__PURE__ */ jsxRuntime.jsx(Stack, { as: "ol", overflow: "auto", padding: space2, space: space2, children: rawItems.slice(beforeLength - 1, len - afterLength) }), open, placement: "top", portal: true, ref: setPopoverElement, children: /* @__PURE__ */ jsxRuntime.jsx(ExpandButton, { fontSize: 1, mode: "bleed", onClick: open ? collapse : expand, padding: 1, ref: setExpandElement, selected: open, text: "\u2026" }) }, "button"), ...rawItems.slice(len - afterLength)];
        }
        return rawItems;
      }, [collapse, expand, maxLength, open, rawItems, space2]);
      return /* @__PURE__ */ jsxRuntime.jsx(Root$8, { "data-ui": "Breadcrumbs", ...restProps, ref, children: items.map((item, itemIndex) => /* @__PURE__ */ jsxRuntime.jsxs(React$2.Fragment, { children: [itemIndex > 0 && /* @__PURE__ */ jsxRuntime.jsx(Box, { "aria-hidden": true, as: "li", paddingX: space2, children: separator || /* @__PURE__ */ jsxRuntime.jsx(Text, { muted: true, children: "/" }) }), /* @__PURE__ */ jsxRuntime.jsx(Box, { as: "li", children: item })] }, itemIndex)) });
    });
    function dialogStyle(_ref23) {
      let { theme } = _ref23;
      const color2 = theme.sanity.color.base;
      return { "&:not([hidden])": { display: "flex" }, top: 0, left: 0, right: 0, bottom: 0, alignItems: "center", justifyContent: "center", outline: "none", background: color2.shadow.umbra };
    }
    function responsiveDialogPositionStyle(props) {
      const { theme } = props;
      const { media } = theme.sanity;
      return _responsive(media, props.$position, (position) => ({ "&&": { position } }));
    }
    var key$3 = Symbol.for("@sanity/ui/context/dialog");
    globalScope[key$3] = globalScope[key$3] || React$2.createContext({ version: 0 });
    var DialogContext = globalScope[key$3];
    function useDialog() {
      return React$2.useContext(DialogContext);
    }
    function isTargetWithinScope(boundaryElement, portalElement, target2) {
      if (!boundaryElement || !portalElement)
        return true;
      return containsOrEqualsElement(boundaryElement, target2) || containsOrEqualsElement(portalElement, target2);
    }
    var Root$7 = styled(Layer)(responsivePaddingStyle, dialogStyle, responsiveDialogPositionStyle);
    var DialogContainer = styled(Container$5)(_templateObject66 || (_templateObject66 = _taggedTemplateLiteral(["\n  &:not([hidden]) {\n    display: flex;\n  }\n  width: 100%;\n  height: 100%;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n"])));
    var DialogCardRoot = styled(Card)(_templateObject67 || (_templateObject67 = _taggedTemplateLiteral(["\n  &:not([hidden]) {\n    display: flex;\n  }\n  width: 100%;\n  min-height: 0;\n  max-height: 100%;\n  overflow: hidden;\n  overflow: clip;\n"])));
    var DialogLayout = styled(Flex$1)(_templateObject68 || (_templateObject68 = _taggedTemplateLiteral(["\n  flex: 1;\n  min-height: 0;\n  width: 100%;\n"])));
    var DialogHeader = styled(Card)(_templateObject69 || (_templateObject69 = _taggedTemplateLiteral(["\n  position: relative;\n  z-index: 2;\n\n  &:after {\n    content: '';\n    display: block;\n    position: absolute;\n    left: 0;\n    right: 0;\n    bottom: -1px;\n    border-bottom: 1px solid var(--card-hairline-soft-color);\n  }\n"])));
    var DialogContent = styled(Box)(_templateObject70 || (_templateObject70 = _taggedTemplateLiteral(["\n  position: relative;\n  z-index: 1;\n  overflow: auto;\n  outline: none;\n"])));
    var DialogFooter = styled(Box)(_templateObject71 || (_templateObject71 = _taggedTemplateLiteral(["\n  position: relative;\n  z-index: 3;\n  border-top: 1px solid var(--card-hairline-soft-color);\n"])));
    var DialogCard = React$2.forwardRef(function DialogCard2(props, ref) {
      var _a2;
      const { __unstable_autoFocus: autoFocus, __unstable_hideCloseButton: hideCloseButton, children, contentRef, footer, header, id, onClickOutside, onClose, portal: portalProp, radius: radiusProp, scheme, shadow: shadowProp, width: widthProp } = props;
      const portal = usePortal();
      const portalElement = portalProp ? ((_a2 = portal.elements) == null ? void 0 : _a2[portalProp]) || null : portal.element;
      const boundaryElement = useBoundaryElement().element;
      const radius = useArrayProp(radiusProp);
      const shadow = useArrayProp(shadowProp);
      const width = useArrayProp(widthProp);
      const forwardedRef = useForwardedRef(ref);
      const [rootElement, setRootElement] = React$2.useState(null);
      const localContentRef = React$2.useRef(null);
      const layer = useLayer();
      const { isTopLayer } = layer;
      const labelId = "".concat(id, "_label");
      const showCloseButton = Boolean(onClose) && hideCloseButton === false;
      const showHeader = Boolean(header) || showCloseButton;
      React$2.useEffect(() => {
        if (!autoFocus)
          return;
        if (forwardedRef.current) {
          focusFirstDescendant(forwardedRef.current);
        }
      }, [autoFocus, forwardedRef]);
      useGlobalKeyDown(React$2.useCallback((event) => {
        if (!isTopLayer || !onClose)
          return;
        const target2 = document.activeElement;
        if (target2 && !isTargetWithinScope(boundaryElement, portalElement, target2)) {
          return;
        }
        if (event.key === "Escape") {
          event.preventDefault();
          event.stopPropagation();
          onClose();
        }
      }, [boundaryElement, isTopLayer, onClose, portalElement]));
      useClickOutside(React$2.useCallback((event) => {
        if (!isTopLayer || !onClickOutside)
          return;
        const target2 = event.target;
        if (target2 && !isTargetWithinScope(boundaryElement, portalElement, target2)) {
          return;
        }
        onClickOutside();
      }, [boundaryElement, isTopLayer, onClickOutside, portalElement]), [rootElement]);
      const setRef = React$2.useCallback((el2) => {
        setRootElement(el2);
        forwardedRef.current = el2;
      }, [forwardedRef]);
      const setContentRef = React$2.useCallback((el2) => {
        localContentRef.current = el2;
        if (typeof contentRef === "function")
          contentRef(el2);
        else if (contentRef)
          contentRef.current = el2;
      }, [contentRef]);
      return /* @__PURE__ */ jsxRuntime.jsx(DialogContainer, { "data-ui": "DialogCard", width, children: /* @__PURE__ */ jsxRuntime.jsx(DialogCardRoot, { radius, ref: setRef, scheme, shadow, children: /* @__PURE__ */ jsxRuntime.jsxs(DialogLayout, { direction: "column", children: [showHeader && /* @__PURE__ */ jsxRuntime.jsx(DialogHeader, { children: /* @__PURE__ */ jsxRuntime.jsxs(Flex$1, { children: [/* @__PURE__ */ jsxRuntime.jsx(Box, { flex: 1, padding: 4, children: header && /* @__PURE__ */ jsxRuntime.jsx(Text, { id: labelId, weight: "semibold", children: header }) }), showCloseButton && /* @__PURE__ */ jsxRuntime.jsx(Box, { padding: 2, children: /* @__PURE__ */ jsxRuntime.jsx(Button, { "aria-label": "Close dialog", disabled: !onClose, icon: CloseIcon, mode: "bleed", onClick: onClose, padding: 3 }) })] }) }), /* @__PURE__ */ jsxRuntime.jsx(DialogContent, { flex: 1, ref: setContentRef, tabIndex: -1, children }), footer && /* @__PURE__ */ jsxRuntime.jsx(DialogFooter, { children: footer })] }) }) });
    });
    React$2.forwardRef(function Dialog2(props, ref) {
      var _a2, _b;
      const dialog = useDialog();
      const theme = useTheme();
      const { __unstable_autoFocus: autoFocus = true, __unstable_hideCloseButton: hideCloseButton = false, cardRadius: cardRadiusProp = 3, cardShadow = 4, children, contentRef, footer, header, id, onActivate, onClickOutside, onClose, onFocus, padding: paddingProp = 4, portal: portalProp, position: positionProp = dialog.position || "fixed", scheme, width: widthProp = 0, zOffset: zOffsetProp = dialog.zOffset || ((_a2 = theme.sanity.layer) == null ? void 0 : _a2.dialog.zOffset), ...restProps } = props;
      const portal = usePortal();
      const portalElement = portalProp ? ((_b = portal.elements) == null ? void 0 : _b[portalProp]) || null : portal.element;
      const boundaryElement = useBoundaryElement().element;
      const cardRadius = useArrayProp(cardRadiusProp);
      const padding = useArrayProp(paddingProp);
      const position = useArrayProp(positionProp);
      const width = useArrayProp(widthProp);
      const zOffset = useArrayProp(zOffsetProp);
      const preDivRef = React$2.useRef(null);
      const postDivRef = React$2.useRef(null);
      const cardRef = React$2.useRef(null);
      const focusedElementRef = React$2.useRef(null);
      const handleFocus = React$2.useCallback((event) => {
        onFocus == null ? void 0 : onFocus(event);
        const target2 = event.target;
        const cardElement = cardRef.current;
        if (cardElement && target2 === preDivRef.current) {
          focusLastDescendant(cardElement);
          return;
        }
        if (cardElement && target2 === postDivRef.current) {
          focusFirstDescendant(cardElement);
          return;
        }
        if (isHTMLElement(event.target)) {
          focusedElementRef.current = event.target;
        }
      }, [onFocus]);
      const labelId = "".concat(id, "_label");
      const rootClickTimeoutRef = React$2.useRef();
      const handleRootClick = React$2.useCallback(() => {
        if (rootClickTimeoutRef.current) {
          clearTimeout(rootClickTimeoutRef.current);
        }
        rootClickTimeoutRef.current = setTimeout(() => {
          const activeElement = document.activeElement;
          if (activeElement && !isTargetWithinScope(boundaryElement, portalElement, activeElement)) {
            const target2 = focusedElementRef.current;
            if (!target2 || !document.body.contains(target2)) {
              const cardElement = cardRef.current;
              if (cardElement)
                focusFirstDescendant(cardElement);
              return;
            }
            target2.focus();
          }
        }, 0);
      }, [boundaryElement, portalElement]);
      return /* @__PURE__ */ jsxRuntime.jsx(Portal, { __unstable_name: portalProp, children: /* @__PURE__ */ jsxRuntime.jsxs(Root$7, { ...restProps, $padding: padding, $position: position, "aria-labelledby": labelId, "aria-modal": true, "data-ui": "Dialog", id, onActivate, onClick: handleRootClick, onFocus: handleFocus, ref, role: "dialog", zOffset, children: [/* @__PURE__ */ jsxRuntime.jsx("div", { ref: preDivRef, tabIndex: 0 }), /* @__PURE__ */ jsxRuntime.jsx(DialogCard, { __unstable_autoFocus: autoFocus, __unstable_hideCloseButton: hideCloseButton, contentRef, footer, header, id, onClickOutside, onClose, portal: portalProp, radius: cardRadius, ref: cardRef, scheme, shadow: cardShadow, width, children }), /* @__PURE__ */ jsxRuntime.jsx("div", { ref: postDivRef, tabIndex: 0 })] }) });
    });
    var Root$6 = styled.kbd(_templateObject72 || (_templateObject72 = _taggedTemplateLiteral(["\n  &:not([hidden]) {\n    display: block;\n  }\n  font: inherit;\n"])));
    var Key = styled(KBD)(_templateObject73 || (_templateObject73 = _taggedTemplateLiteral(["\n  &:not([hidden]) {\n    display: block;\n  }\n"])));
    var Hotkeys = React$2.forwardRef(function Hotkeys2(props, ref) {
      const { fontSize: fontSize2, keys, padding, radius, space: spaceProp = 1, ...restProps } = props;
      const space2 = useArrayProp(spaceProp);
      if (!keys || keys.length === 0) {
        return /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, {});
      }
      return /* @__PURE__ */ jsxRuntime.jsx(Root$6, { "data-ui": "Hotkeys", ...restProps, ref, children: /* @__PURE__ */ jsxRuntime.jsx(Inline, { as: "span", space: space2, children: keys.map((key2, i) => /* @__PURE__ */ jsxRuntime.jsx(Key, { fontSize: fontSize2, padding, radius, children: key2 }, i)) }) });
    });
    var key$2 = Symbol.for("@sanity/ui/context/menu");
    globalScope[key$2] = globalScope[key$2] || React$2.createContext(null);
    var MenuContext = globalScope[key$2];
    function _isFocusable(element) {
      return isHTMLAnchorElement(element) && element.getAttribute("data-disabled") !== "true" || isHTMLButtonElement(element) && !element.disabled;
    }
    function _getFocusableElements(elements) {
      return elements.filter(_isFocusable);
    }
    function _getDOMPath(rootElement, el2) {
      const path = [];
      let e = el2;
      while (e !== rootElement) {
        const parentElement = e.parentElement;
        if (!parentElement)
          return path;
        const children = Array.from(parentElement.childNodes);
        const index2 = children.indexOf(e);
        path.unshift(index2);
        if (parentElement === rootElement) {
          return path;
        }
        e = parentElement;
      }
      return path;
    }
    var EMPTY_PATH = [];
    function _sortElements(rootElement, elements) {
      if (!rootElement)
        return;
      const map2 = /* @__PURE__ */ new WeakMap();
      for (const el2 of elements) {
        map2.set(el2, _getDOMPath(rootElement, el2));
      }
      const _sort = (a, b2) => {
        const _a2 = map2.get(a) || EMPTY_PATH;
        const _b = map2.get(b2) || EMPTY_PATH;
        const len = Math.max(_a2.length, _b.length);
        for (let i = 0; i < len; i += 1) {
          const aIndex = _a2[i] || -1;
          const bIndex = _b[i] || -1;
          if (aIndex !== bIndex) {
            return aIndex - bIndex;
          }
        }
        return 0;
      };
      elements.sort(_sort);
    }
    function useMenuController(props) {
      const { onKeyDown, originElement, shouldFocus } = props;
      const elementsRef = React$2.useRef([]);
      const [rootElement, setRootElement] = React$2.useState(null);
      const [activeIndex, _setActiveIndex] = React$2.useState(-1);
      const activeIndexRef = React$2.useRef(activeIndex);
      const activeElement = elementsRef.current[activeIndex] || null;
      const mounted = Boolean(rootElement);
      const setActiveIndex = React$2.useCallback((nextActiveIndex) => {
        _setActiveIndex(nextActiveIndex);
        activeIndexRef.current = nextActiveIndex;
      }, []);
      const mount = React$2.useCallback((element, selected) => {
        if (!element)
          return () => void 0;
        if (elementsRef.current.indexOf(element) === -1) {
          elementsRef.current.push(element);
          _sortElements(rootElement, elementsRef.current);
        }
        if (selected) {
          const selectedIndex = elementsRef.current.indexOf(element);
          setActiveIndex(selectedIndex);
        }
        return () => {
          const idx = elementsRef.current.indexOf(element);
          if (idx > -1) {
            elementsRef.current.splice(idx, 1);
          }
        };
      }, [rootElement, setActiveIndex]);
      const handleKeyDown = React$2.useCallback((event) => {
        if (event.key === "Tab") {
          if (originElement) {
            originElement.focus();
          }
          return;
        }
        if (event.key === "Home") {
          event.preventDefault();
          event.stopPropagation();
          const focusableElements = _getFocusableElements(elementsRef.current);
          const el2 = focusableElements[0];
          if (!el2)
            return;
          const currentIndex = elementsRef.current.indexOf(el2);
          setActiveIndex(currentIndex);
          return;
        }
        if (event.key === "End") {
          event.preventDefault();
          event.stopPropagation();
          const focusableElements = _getFocusableElements(elementsRef.current);
          const el2 = focusableElements[focusableElements.length - 1];
          if (!el2)
            return;
          const currentIndex = elementsRef.current.indexOf(el2);
          setActiveIndex(currentIndex);
          return;
        }
        if (event.key === "ArrowUp") {
          event.preventDefault();
          event.stopPropagation();
          const focusableElements = _getFocusableElements(elementsRef.current);
          const focusableLen = focusableElements.length;
          if (focusableLen === 0)
            return;
          const focusedElement = elementsRef.current[activeIndexRef.current];
          let focusedIndex = focusableElements.indexOf(focusedElement);
          focusedIndex = (focusedIndex - 1 + focusableLen) % focusableLen;
          const el2 = focusableElements[focusedIndex];
          const currentIndex = elementsRef.current.indexOf(el2);
          setActiveIndex(currentIndex);
          return;
        }
        if (event.key === "ArrowDown") {
          event.preventDefault();
          event.stopPropagation();
          const focusableElements = _getFocusableElements(elementsRef.current);
          const focusableLen = focusableElements.length;
          if (focusableLen === 0)
            return;
          const focusedElement = elementsRef.current[activeIndexRef.current];
          let focusedIndex = focusableElements.indexOf(focusedElement);
          focusedIndex = (focusedIndex + 1) % focusableLen;
          const el2 = focusableElements[focusedIndex];
          const currentIndex = elementsRef.current.indexOf(el2);
          setActiveIndex(currentIndex);
          return;
        }
        if (onKeyDown) {
          onKeyDown(event);
        }
      }, [onKeyDown, originElement, setActiveIndex]);
      const handleItemMouseEnter = React$2.useCallback((event) => {
        const element = event.currentTarget;
        const currentIndex = elementsRef.current.indexOf(element);
        setActiveIndex(currentIndex);
      }, [setActiveIndex]);
      const handleItemMouseLeave = React$2.useCallback(() => {
        rootElement == null ? void 0 : rootElement.focus();
        setActiveIndex(-1);
      }, [rootElement, setActiveIndex]);
      React$2.useEffect(() => {
        if (!mounted)
          return;
        const rafId = window.requestAnimationFrame(() => {
          const _activeIndex = activeIndexRef.current;
          if (_activeIndex === -1) {
            if (shouldFocus === "first") {
              const focusableElements = _getFocusableElements(elementsRef.current);
              const el2 = focusableElements[0];
              if (el2) {
                const currentIndex = elementsRef.current.indexOf(el2);
                setActiveIndex(currentIndex);
                activeIndexRef.current = currentIndex;
              }
            }
            if (shouldFocus === "last") {
              const focusableElements = _getFocusableElements(elementsRef.current);
              const el2 = focusableElements[focusableElements.length - 1];
              if (el2) {
                const currentIndex = elementsRef.current.indexOf(el2);
                setActiveIndex(currentIndex);
                activeIndexRef.current = currentIndex;
              }
            }
            return;
          }
          const element = elementsRef.current[_activeIndex] || null;
          element == null ? void 0 : element.focus();
        });
        return () => {
          window.cancelAnimationFrame(rafId);
        };
      }, [activeIndex, mounted, setActiveIndex, shouldFocus]);
      return { activeElement, activeIndex, handleItemMouseEnter, handleItemMouseLeave, handleKeyDown, mount, rootElement, setRootElement };
    }
    var Root$5 = styled(Box)(_templateObject74 || (_templateObject74 = _taggedTemplateLiteral(["\n  outline: none;\n  overflow: auto;\n"])));
    React$2.forwardRef(function Menu2(props, ref) {
      const {
        children,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        focusFirst,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        focusLast,
        onClickOutside,
        onEscape,
        onItemClick,
        onItemSelect,
        onKeyDown,
        originElement,
        padding = 1,
        registerElement,
        shouldFocus = props.focusFirst && "first" || props.focusLast && "last" || null,
        space: space2 = 1,
        ...restProps
      } = props;
      const forwardedRef = useForwardedRef(ref);
      const { isTopLayer } = useLayer();
      const { activeElement, activeIndex, handleItemMouseEnter, handleItemMouseLeave, handleKeyDown, mount, rootElement, setRootElement } = useMenuController({ onKeyDown, originElement, shouldFocus });
      const handleRefChange = React$2.useCallback((el2) => {
        setRootElement(el2);
        forwardedRef.current = el2;
      }, [forwardedRef, setRootElement]);
      React$2.useEffect(() => {
        if (onItemSelect)
          onItemSelect(activeIndex);
      }, [activeIndex, onItemSelect]);
      useClickOutside(React$2.useCallback((event) => isTopLayer && onClickOutside && onClickOutside(event), [isTopLayer, onClickOutside]), [rootElement]);
      useGlobalKeyDown(React$2.useCallback((event) => {
        if (!isTopLayer)
          return;
        if (event.key === "Escape") {
          event.stopPropagation();
          if (onEscape)
            onEscape();
        }
      }, [isTopLayer, onEscape]));
      React$2.useEffect(() => {
        if (!rootElement || !registerElement)
          return;
        return registerElement(rootElement);
      }, [registerElement, rootElement]);
      const value = React$2.useMemo(() => ({
        version: 0,
        activeElement,
        activeIndex,
        mount,
        onClickOutside,
        onEscape,
        onItemClick,
        onItemMouseEnter: handleItemMouseEnter,
        onItemMouseLeave: handleItemMouseLeave,
        registerElement,
        // deprecated
        onMouseEnter: handleItemMouseEnter,
        onMouseLeave: handleItemMouseLeave
      }), [activeElement, activeIndex, mount, handleItemMouseEnter, handleItemMouseLeave, onClickOutside, onEscape, onItemClick, registerElement]);
      return /* @__PURE__ */ jsxRuntime.jsx(MenuContext.Provider, { value, children: /* @__PURE__ */ jsxRuntime.jsx(Root$5, { "data-ui": "Menu", ...restProps, onKeyDown: handleKeyDown, padding, ref: handleRefChange, role: "menu", tabIndex: -1, children: /* @__PURE__ */ jsxRuntime.jsx(Stack, { space: space2, children }) }) });
    });
    React$2.forwardRef(function MenuButton2(props, ref) {
      const { __unstable_disableRestoreFocusOnClose: disableRestoreFocusOnClose = false, boundaryElement: deprecated_boundaryElement, button: buttonProp, id, menu: menuProp, onClose, placement: deprecated_placement, popoverScheme: deprecated_popoverScheme, portal: deprecated_portal = true, popover, popoverRadius: deprecated_popoverRadius, preventOverflow: deprecated_preventOverflow } = props;
      const [open, setOpen] = React$2.useState(false);
      const [shouldFocus, setShouldFocus] = React$2.useState(null);
      const [buttonElement, setButtonElement] = React$2.useState(null);
      const [menuElements, setChildMenuElements] = React$2.useState([]);
      const openRef = React$2.useRef(open);
      React$2.useEffect(() => {
        if (onClose && !open && openRef.current) {
          onClose();
        }
      }, [onClose, open]);
      React$2.useEffect(() => {
        openRef.current = open;
      }, [open]);
      const handleButtonClick = React$2.useCallback(() => {
        setOpen((v2) => !v2);
        setShouldFocus(null);
      }, []);
      const handleButtonKeyDown = React$2.useCallback((event) => {
        if (event.key === "ArrowDown" || event.key === "Enter" || event.key === " ") {
          event.preventDefault();
          setOpen(true);
          setShouldFocus("first");
          return;
        }
        if (event.key === "ArrowUp") {
          event.preventDefault();
          setOpen(true);
          setShouldFocus("last");
          return;
        }
      }, []);
      const handleMenuClickOutside = React$2.useCallback((event) => {
        const target2 = event.target;
        if (!(target2 instanceof Node)) {
          return;
        }
        if (buttonElement && (target2 === buttonElement || buttonElement.contains(target2))) {
          return;
        }
        for (const el2 of menuElements) {
          if (target2 === el2 || el2.contains(target2)) {
            return;
          }
        }
        setOpen(false);
      }, [buttonElement, menuElements]);
      const handleMenuEscape = React$2.useCallback(() => {
        setOpen(false);
        if (disableRestoreFocusOnClose)
          return;
        if (buttonElement)
          buttonElement.focus();
      }, [buttonElement, disableRestoreFocusOnClose]);
      const handleBlur = React$2.useCallback((event) => {
        const target2 = event.relatedTarget;
        if (!(target2 instanceof Node)) {
          return;
        }
        for (const el2 of menuElements) {
          if (el2 === target2 || el2.contains(target2)) {
            return;
          }
        }
        setOpen(false);
      }, [menuElements]);
      const handleItemClick = React$2.useCallback(() => {
        setOpen(false);
        if (disableRestoreFocusOnClose)
          return;
        if (buttonElement)
          buttonElement.focus();
      }, [buttonElement, disableRestoreFocusOnClose]);
      const registerElement = React$2.useCallback((el2) => {
        setChildMenuElements((els2) => els2.concat([el2]));
        return () => {
          setChildMenuElements((els2) => {
            return els2.filter((_el) => _el !== el2);
          });
        };
      }, []);
      const menuProps = React$2.useMemo(() => ({ "aria-labelledby": id, onBlurCapture: handleBlur, onClickOutside: handleMenuClickOutside, onEscape: handleMenuEscape, onItemClick: handleItemClick, originElement: buttonElement, registerElement, shouldFocus }), [buttonElement, handleMenuClickOutside, handleMenuEscape, handleItemClick, id, handleBlur, registerElement, shouldFocus]);
      const menu = reactIsExports$1.isElement(menuProp) ? React$2.cloneElement(menuProp, menuProps) : null;
      const setButtonRef = React$2.useCallback((el2) => {
        if (typeof ref === "function") {
          ref(el2);
        } else if (ref) {
          ref.current = el2;
        }
        setButtonElement(el2);
      }, [ref]);
      const button = React$2.useMemo(() => reactIsExports$1.isElement(buttonProp) ? React$2.cloneElement(buttonProp, { "data-ui": "MenuButton", id, onClick: handleButtonClick, onKeyDown: handleButtonKeyDown, "aria-haspopup": true, "aria-expanded": open, ref: setButtonRef, selected: open }) : null, [buttonProp, handleButtonClick, handleButtonKeyDown, id, open, setButtonRef]);
      const popoverProps = React$2.useMemo(() => ({ boundaryElement: deprecated_boundaryElement, overflow: "auto", placement: deprecated_placement, portal: deprecated_portal, preventOverflow: deprecated_preventOverflow, radius: deprecated_popoverRadius, scheme: deprecated_popoverScheme, ...popover || {} }), [deprecated_boundaryElement, deprecated_placement, deprecated_popoverRadius, deprecated_popoverScheme, deprecated_portal, deprecated_preventOverflow, popover]);
      return /* @__PURE__ */ jsxRuntime.jsx(Popover, { "data-ui": "MenuButton__popover", ...popoverProps, content: menu, open, children: button || /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, {}) });
    });
    styled.hr(_templateObject75 || (_templateObject75 = _taggedTemplateLiteral(["\n  height: 1px;\n  border: 0;\n  background: var(--card-hairline-soft-color);\n  margin: 0;\n"])));
    function selectableBaseStyle() {
      return Ae(_templateObject76 || (_templateObject76 = _taggedTemplateLiteral(["\n    background-color: inherit;\n    color: inherit;\n\n    &[data-as='button'] {\n      -webkit-font-smoothing: inherit;\n      appearance: none;\n      outline: none;\n      font: inherit;\n      text-align: inherit;\n      border: 0;\n      width: stretch;\n    }\n\n    /* &:is(a) */\n    &[data-as='a'] {\n      text-decoration: none;\n    }\n  "])));
    }
    function selectableColorStyle(props) {
      var _a2, _b;
      const { $tone, theme } = props;
      const { base, muted, selectable } = theme.sanity.color;
      const tone = selectable ? selectable[$tone] || selectable.default : muted[$tone] || muted.default;
      return Ae(_templateObject77 || (_templateObject77 = _taggedTemplateLiteral(["\n    ", "\n\n    background-color: var(--card-bg-color);\n    color: var(--card-fg-color);\n    outline: none;\n\n    /* &:is(button) */\n    &[data-as='button'] {\n      &:disabled {\n        ", "\n      }\n\n      &:not(:disabled) {\n        &[aria-pressed='true'] {\n          ", "\n        }\n\n        &[data-selected],\n        &[aria-selected='true'] > & {\n          ", "\n        }\n\n        @media (hover: hover) {\n          &:not([data-selected]) {\n            &[data-hovered],\n            &:hover {\n              ", "\n            }\n\n            &:active {\n              ", "\n            }\n          }\n        }\n      }\n    }\n\n    /* &:is(a) */\n    &[data-as='a'] {\n      &[data-disabled] {\n        ", "\n      }\n\n      &:not([data-disabled]) {\n        &[data-pressed] {\n          ", "\n        }\n\n        &[data-selected] {\n          ", "\n        }\n\n        @media (hover: hover) {\n          &:not([data-selected]) {\n            &[data-hovered],\n            &:hover {\n              ", "\n            }\n\n            &:active {\n              ", "\n            }\n          }\n        }\n      }\n    }\n\n    ", "\n  "])), _colorVarsStyle(base, tone.enabled), _colorVarsStyle(base, tone.disabled), _colorVarsStyle(base, tone.pressed), _colorVarsStyle(base, tone.selected), _colorVarsStyle(base, tone.hovered), _colorVarsStyle(base, tone.pressed), _colorVarsStyle(base, tone.disabled), _colorVarsStyle(base, tone.pressed), _colorVarsStyle(base, tone.selected), _colorVarsStyle(base, tone.hovered), _colorVarsStyle(base, tone.pressed), (_b = (_a2 = theme.sanity.styles) == null ? void 0 : _a2.card) == null ? void 0 : _b.root);
    }
    var Selectable = styled(Box)(responsiveRadiusStyle, selectableBaseStyle, selectableColorStyle);
    function useMenu() {
      const value = React$2.useContext(MenuContext);
      if (!value) {
        throw new Error("useMenu(): missing context value");
      }
      if (!isRecord(value) || value.version !== 0) {
        throw new Error("useMenu(): the context value is not compatible");
      }
      return value;
    }
    React$2.forwardRef(function MenuItem2(props, forwardedRef) {
      const { as = "button", children, disabled, fontSize: fontSize2 = 2, hotkeys, icon, iconRight, onClick, padding = 3, paddingX, paddingY, paddingTop, paddingRight, paddingBottom, paddingLeft, pressed, radius = 2, selected: selectedProp, space: space2 = 3, text, tone = "default", ...restProps } = props;
      const menu = useMenu();
      const { activeElement, mount, onItemClick, onItemMouseEnter = menu.onMouseEnter, onItemMouseLeave = menu.onMouseLeave } = menu;
      const [rootElement, setRootElement] = React$2.useState(null);
      const active = Boolean(activeElement) && activeElement === rootElement;
      React$2.useEffect(() => mount(rootElement, selectedProp), [mount, rootElement, selectedProp]);
      const ref = useForwardedRef(forwardedRef);
      const handleClick = React$2.useCallback((event) => {
        if (disabled)
          return;
        if (onClick)
          onClick(event);
        if (onItemClick)
          onItemClick();
      }, [disabled, onClick, onItemClick]);
      const paddingProps = React$2.useMemo(() => ({ padding, paddingX, paddingY, paddingTop, paddingRight, paddingBottom, paddingLeft }), [padding, paddingX, paddingY, paddingTop, paddingRight, paddingBottom, paddingLeft]);
      const setRef = React$2.useCallback((el2) => {
        ref.current = el2;
        setRootElement(el2);
      }, [ref]);
      return /* @__PURE__ */ jsxRuntime.jsxs(Selectable, { "data-ui": "MenuItem", ...restProps, "aria-pressed": as === "button" && pressed, "data-pressed": as !== "button" && pressed ? "" : void 0, "data-selected": active ? "" : void 0, "data-disabled": disabled ? "" : void 0, forwardedAs: as, $radius: useArrayProp(radius), $padding: useArrayProp(0), $tone: tone, disabled, onClick: handleClick, onMouseEnter: onItemMouseEnter, onMouseLeave: onItemMouseLeave, ref: setRef, role: "menuitem", tabIndex: -1, type: as === "button" ? "button" : void 0, children: [(icon || text || iconRight) && /* @__PURE__ */ jsxRuntime.jsx(Box, { as: "span", ...paddingProps, children: /* @__PURE__ */ jsxRuntime.jsxs(Flex$1, { as: "span", children: [icon && /* @__PURE__ */ jsxRuntime.jsxs(Text, { size: fontSize2, children: [React$2.isValidElement(icon) && icon, reactIsExports$1.isValidElementType(icon) && React$2.createElement(icon)] }), text && /* @__PURE__ */ jsxRuntime.jsx(Box, { flex: 1, marginLeft: icon ? space2 : void 0, marginRight: iconRight ? space2 : void 0, children: /* @__PURE__ */ jsxRuntime.jsx(Text, { size: fontSize2, textOverflow: "ellipsis", children: text }) }), hotkeys && /* @__PURE__ */ jsxRuntime.jsx(Box, { marginLeft: space2, style: { marginTop: -4, marginBottom: -4 }, children: /* @__PURE__ */ jsxRuntime.jsx(Hotkeys, { fontSize: fontSize2, keys: hotkeys }) }), iconRight && /* @__PURE__ */ jsxRuntime.jsxs(Text, { size: fontSize2, children: [React$2.isValidElement(iconRight) && iconRight, reactIsExports$1.isValidElementType(iconRight) && React$2.createElement(iconRight)] })] }) }), children && /* @__PURE__ */ jsxRuntime.jsx(Box, { as: "span", ...paddingProps, children })] });
    });
    var keyframe = We(_templateObject78 || (_templateObject78 = _taggedTemplateLiteral(["\n  0% {\n    background-position: 100%;\n  }\n  100% {\n    background-position: -100%;\n  }\n"])));
    var animation = Ae(_templateObject79 || (_templateObject79 = _taggedTemplateLiteral(["\n  background-image: linear-gradient(\n    to right,\n    var(--card-skeleton-color-from),\n    var(--card-skeleton-color-to),\n    var(--card-skeleton-color-from),\n    var(--card-skeleton-color-from),\n    var(--card-skeleton-color-from)\n  );\n  background-position: 100%;\n  background-size: 200% 100%;\n  background-attachment: fixed;\n  animation-name: ", ";\n  animation-timing-function: ease-in-out;\n  animation-iteration-count: infinite;\n  animation-duration: 2000ms;\n"])), keyframe);
    var skeletonStyle = Ae(_templateObject80 || (_templateObject80 = _taggedTemplateLiteral(["\n  opacity: ", ";\n  transition: opacity 200ms ease-in;\n\n  @media screen and (prefers-reduced-motion: no-preference) {\n    ", "\n  }\n\n  @media screen and (prefers-reduced-motion: reduce) {\n    background-color: var(--card-skeleton-color-from);\n  }\n"])), (_ref24) => {
      let { $visible } = _ref24;
      return $visible ? 1 : 0;
    }, (_ref25) => {
      let { $animated } = _ref25;
      return $animated ? animation : Ae(_templateObject81 || (_templateObject81 = _taggedTemplateLiteral(["\n            background-color: var(--card-skeleton-color-from);\n          "])));
    });
    var Root$4 = styled(Box)(responsiveRadiusStyle, skeletonStyle);
    var Skeleton = React$2.forwardRef(function Skeleton2(props, ref) {
      const { animated = false, delay, radius, ...restProps } = props;
      const [visible, setVisible] = React$2.useState(delay ? false : true);
      React$2.useEffect(() => {
        if (!delay) {
          return setVisible(true);
        }
        const timeout = setTimeout(() => {
          setVisible(true);
        }, delay);
        return () => {
          clearTimeout(timeout);
        };
      }, [delay]);
      return /* @__PURE__ */ jsxRuntime.jsx(Root$4, { ...restProps, $animated: animated, $radius: useArrayProp(radius), $visible: visible, ref });
    });
    var Root$3 = styled(Skeleton)((_ref26) => {
      let { $size, $style, theme } = _ref26;
      const { media } = theme.sanity;
      const font = theme.sanity.fonts[$style];
      const styles = _responsive(media, $size, (sizeIndex) => {
        const fontSize2 = font.sizes[sizeIndex];
        const capHeight = fontSize2.lineHeight - fontSize2.ascenderHeight - fontSize2.descenderHeight;
        return { height: capHeight };
      });
      return styles;
    });
    React$2.forwardRef(function TextSkeleton2(props, ref) {
      const { size: size2 = 2, ...restProps } = props;
      const $size = useArrayProp(size2);
      return /* @__PURE__ */ jsxRuntime.jsx(Root$3, { ...restProps, $size, ref, $style: "text" });
    });
    React$2.forwardRef(function TextSkeleton3(props, ref) {
      const { size: size2 = 2, ...restProps } = props;
      const $size = useArrayProp(size2);
      return /* @__PURE__ */ jsxRuntime.jsx(Root$3, { ...restProps, $size, ref, $style: "label" });
    });
    React$2.forwardRef(function TextSkeleton4(props, ref) {
      const { size: size2 = 2, ...restProps } = props;
      const $size = useArrayProp(size2);
      return /* @__PURE__ */ jsxRuntime.jsx(Root$3, { ...restProps, $size, ref, $style: "heading" });
    });
    React$2.forwardRef(function TextSkeleton5(props, ref) {
      const { size: size2 = 2, ...restProps } = props;
      const $size = useArrayProp(size2);
      return /* @__PURE__ */ jsxRuntime.jsx(Root$3, { ...restProps, $size, ref, $style: "code" });
    });
    React$2.forwardRef(function Tab2(props, forwardedRef) {
      const { icon, id, focused, fontSize: fontSize2, label, onClick, onFocus, padding = 2, selected, ...restProps } = props;
      const elementRef = React$2.useRef(null);
      const focusedRef = React$2.useRef(false);
      const handleBlur = React$2.useCallback(() => {
        focusedRef.current = false;
      }, []);
      const handleFocus = React$2.useCallback((event) => {
        focusedRef.current = true;
        if (onFocus)
          onFocus(event);
      }, [onFocus]);
      const ref = useForwardedRef(forwardedRef);
      React$2.useEffect(() => {
        if (focused && !focusedRef.current) {
          if (elementRef.current)
            elementRef.current.focus();
          focusedRef.current = true;
        }
      }, [focused]);
      const setRef = (el2) => {
        elementRef.current = el2;
        ref.current = el2;
      };
      return /* @__PURE__ */ jsxRuntime.jsx(Button, { "data-ui": "Tab", ...restProps, "aria-selected": selected ? "true" : "false", fontSize: fontSize2, icon, id, mode: "bleed", onClick, onBlur: handleBlur, onFocus: handleFocus, padding, ref: setRef, role: "tab", selected, tabIndex: selected ? 0 : -1, text: label, type: "button" });
    });
    function _isReactElement(node) {
      return Boolean(node);
    }
    React$2.forwardRef(function TabList2(props, ref) {
      const { children: childrenProp, ...restProps } = props;
      const [focusedIndex, setFocusedIndex] = React$2.useState(-1);
      const children = React$2.useMemo(() => childrenProp.filter(_isReactElement), [childrenProp]);
      const tabs = children.map((child, childIndex) => React$2.cloneElement(child, { focused: focusedIndex === childIndex, key: childIndex, onFocus: () => handleTabFocus(childIndex) }));
      const numTabs = tabs.length;
      const handleTabFocus = React$2.useCallback((tabIdx) => {
        setFocusedIndex(tabIdx);
      }, []);
      const handleKeyDown = React$2.useCallback((event) => {
        if (event.key === "ArrowLeft") {
          setFocusedIndex((prevIndex) => (prevIndex + numTabs - 1) % numTabs);
        }
        if (event.key === "ArrowRight") {
          setFocusedIndex((prevIndex) => (prevIndex + 1) % numTabs);
        }
      }, [numTabs]);
      return /* @__PURE__ */ jsxRuntime.jsx(Inline, { "data-ui": "TabList", ...restProps, onKeyDown: handleKeyDown, ref, role: "tablist", children: tabs });
    });
    React$2.forwardRef(function TabPanel2(props, ref) {
      const { flex, ...restProps } = props;
      return /* @__PURE__ */ jsxRuntime.jsx(Box, { "data-ui": "TabPanel", ...restProps, flex, ref, role: "tabpanel", tabIndex: props.tabIndex === void 0 ? 0 : props.tabIndex, children: props.children });
    });
    styled(Card)(_templateObject82 || (_templateObject82 = _taggedTemplateLiteral(["\n  pointer-events: all;\n"])));
    styled(Flex$1)(_templateObject83 || (_templateObject83 = _taggedTemplateLiteral(["\n  overflow-x: auto;\n"])));
    var key$1 = Symbol.for("@sanity/ui/context/toast");
    globalScope[key$1] = globalScope[key$1] || React$2.createContext(null);
    styled(Layer)(_templateObject84 || (_templateObject84 = _taggedTemplateLiteral(["\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  pointer-events: none;\n"])));
    styled.div(_templateObject85 || (_templateObject85 = _taggedTemplateLiteral(["\n  box-sizing: border-box;\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  max-width: 420px;\n  width: 100%;\n"])));
    function _findPrevItemElement(state, itemElements, focusedElement) {
      var _a2;
      const idx = itemElements.indexOf(focusedElement);
      const els2 = itemElements.slice(0, idx);
      const len = els2.length;
      for (let i = len - 1; i >= 0; i -= 1) {
        const itemKey = els2[i].getAttribute("data-tree-key");
        if (!itemKey) {
          continue;
        }
        const segments = itemKey.split("/");
        segments.pop();
        const p = [];
        let expanded = true;
        for (let j2 = 0; j2 < segments.length; j2 += 1) {
          p.push(segments[j2]);
          const k2 = p.join("/");
          if (!((_a2 = state[k2]) == null ? void 0 : _a2.expanded)) {
            expanded = false;
            break;
          }
        }
        if (expanded) {
          return els2[i];
        }
      }
      return null;
    }
    function _findNextItemElement(state, itemElements, focusedElement) {
      var _a2;
      const idx = itemElements.indexOf(focusedElement);
      const els2 = itemElements.slice(idx);
      const len = itemElements.length;
      for (let i = 1; i < len; i += 1) {
        if (!els2[i]) {
          continue;
        }
        const itemKey = els2[i].getAttribute("data-tree-key");
        if (!itemKey) {
          continue;
        }
        const segments = itemKey.split("/");
        segments.pop();
        const p = [];
        let expanded = true;
        for (let j2 = 0; j2 < segments.length; j2 += 1) {
          p.push(segments[j2]);
          const k2 = p.join("/");
          if (!((_a2 = state[k2]) == null ? void 0 : _a2.expanded)) {
            expanded = false;
            break;
          }
        }
        if (expanded) {
          return els2[i];
        }
      }
      return null;
    }
    function _focusItemElement(el2) {
      if (el2.getAttribute("role") === "treeitem") {
        el2.focus();
      }
      if (el2.getAttribute("role") === "none") {
        const firstChild = el2.firstChild;
        if (firstChild && firstChild instanceof HTMLElement) {
          firstChild.focus();
        }
      }
    }
    var key$8 = Symbol.for("@sanity/ui/context/tree");
    globalScope[key$8] = globalScope[key$8] || React$2.createContext(null);
    var TreeContext = globalScope[key$8];
    var Tree = React$2.memo(React$2.forwardRef(function Tree2(props, ref) {
      const { children, space: space2 = 1, ...restProps } = props;
      const forwardedRef = useForwardedRef(ref);
      const [focusedElement, setFocusedElement] = React$2.useState(null);
      const focusedElementRef = React$2.useRef(focusedElement);
      const path = React$2.useMemo(() => [], []);
      const [itemElements, setItemElements] = React$2.useState([]);
      const [state, setState] = React$2.useState({});
      const stateRef = React$2.useRef(state);
      React$2.useEffect(() => {
        focusedElementRef.current = focusedElement;
      }, [focusedElement]);
      React$2.useEffect(() => {
        stateRef.current = state;
      }, [state]);
      const registerItem = React$2.useCallback((element, path2, expanded, selected) => {
        setState((s) => ({ ...s, [path2]: { element, expanded } }));
        if (selected) {
          setFocusedElement(element);
        }
        return () => {
          setState((s) => {
            const newState = { ...s };
            delete newState[path2];
            return newState;
          });
        };
      }, []);
      const setExpanded = React$2.useCallback((path2, expanded) => {
        setState((s) => {
          const itemState = s[path2];
          if (!itemState)
            return s;
          return { ...s, [path2]: { ...itemState, expanded } };
        });
      }, []);
      const contextValue = React$2.useMemo(() => ({ version: 0, focusedElement: focusedElement || itemElements[0] || null, level: 0, path, registerItem, setExpanded, setFocusedElement, space: space2, state }), [focusedElement, itemElements, path, registerItem, setExpanded, space2, state]);
      const handleKeyDown = React$2.useCallback((event) => {
        var _a2;
        if (!focusedElementRef.current)
          return;
        if (event.key === "ArrowDown") {
          event.preventDefault();
          const nextEl = _findNextItemElement(stateRef.current, itemElements, focusedElementRef.current);
          if (nextEl) {
            _focusItemElement(nextEl);
            setFocusedElement(nextEl);
          }
          return;
        }
        if (event.key === "ArrowUp") {
          event.preventDefault();
          const prevEl = _findPrevItemElement(stateRef.current, itemElements, focusedElementRef.current);
          if (prevEl) {
            _focusItemElement(prevEl);
            setFocusedElement(prevEl);
          }
          return;
        }
        if (event.key === "ArrowLeft") {
          event.preventDefault();
          const itemKey = focusedElementRef.current.getAttribute("data-tree-key");
          if (!itemKey)
            return;
          const itemState = stateRef.current[itemKey];
          if (!itemState)
            return;
          if (itemState.expanded) {
            setState((s) => {
              const itemState2 = s[itemKey];
              if (!itemState2)
                return s;
              return { ...s, [itemKey]: { ...itemState2, expanded: false } };
            });
          } else {
            const itemPath = itemKey.split("/");
            itemPath.pop();
            const parentKey = itemPath.join("/");
            const parentState = parentKey && stateRef.current[parentKey];
            if (parentState) {
              parentState.element.focus();
              setFocusedElement(parentState.element);
            }
          }
          return;
        }
        if (event.key === "ArrowRight") {
          event.preventDefault();
          const focusedKey = focusedElementRef.current.getAttribute("data-tree-key");
          if (!focusedKey)
            return;
          if (!((_a2 = stateRef.current[focusedKey]) == null ? void 0 : _a2.expanded)) {
            setState((s) => {
              const itemState = s[focusedKey];
              if (!itemState)
                return s;
              return { ...s, [focusedKey]: { ...itemState, expanded: true } };
            });
          }
          return;
        }
      }, [itemElements]);
      React$2.useEffect(() => {
        if (!forwardedRef.current)
          return;
        const _itemElements = Array.from(forwardedRef.current.querySelectorAll('[data-ui="TreeItem"]'));
        setItemElements(_itemElements);
      }, [children, forwardedRef]);
      return /* @__PURE__ */ jsxRuntime.jsx(TreeContext.Provider, { value: contextValue, children: /* @__PURE__ */ jsxRuntime.jsx(Stack, { as: "ul", "data-ui": "Tree", ...restProps, onKeyDown: handleKeyDown, ref: forwardedRef, role: "tree", space: space2, children }) });
    }));
    Tree.displayName = "Tree";
    function treeItemRootStyle() {
      return Ae(_templateObject86 || (_templateObject86 = _taggedTemplateLiteral(["\n    &[role='none'] > [role='treeitem'] {\n      outline: none;\n      cursor: default;\n      border-radius: 3px;\n\n      &:focus {\n        position: relative;\n      }\n    }\n\n    &[role='treeitem'] {\n      outline: none;\n\n      & > div {\n        cursor: default;\n        border-radius: 3px;\n      }\n\n      &:focus > div {\n        position: relative;\n      }\n    }\n  "])));
    }
    function treeItemRootColorStyle(props) {
      const { theme } = props;
      const $tone = "default";
      const { base, muted, selectable } = theme.sanity.color;
      const tone = selectable ? selectable[$tone] || selectable.default : muted[$tone] || muted.default;
      return Ae(_templateObject87 || (_templateObject87 = _taggedTemplateLiteral([`
    /* <div role="none"><a data-ui="TreeItem__box" role="treeitem" tabIndex="0"></div> */
    &[role='none'] {
      & > [role='treeitem'] {
        `, "\n\n        background-color: var(--card-bg-color);\n        color: var(--treeitem-fg-color);\n      }\n\n      &[data-selected] > [role='treeitem'] {\n        ", "\n      }\n\n      @media (hover: hover) {\n        &:not([data-selected]) > [role='treeitem']:not(:focus):hover {\n          ", "\n        }\n\n        & > [role='treeitem']:focus {\n          ", `
        }
      }
    }

    /* <div role="treeitem" tabIndex="0"><div data-ui="TreeItem__box"></div> */
    &[role='treeitem'] {
      & > [data-ui='TreeItem__box'] {
        `, "\n\n        background-color: var(--card-bg-color);\n        color: var(--card-fg-color);\n      }\n\n      &[data-selected] > [data-ui='TreeItem__box'] {\n        ", "\n      }\n\n      @media (hover: hover) {\n        &:not([data-selected]):not(:focus) > [data-ui='TreeItem__box']:hover {\n          ", "\n        }\n\n        &:focus > [data-ui='TreeItem__box'] {\n          ", "\n        }\n      }\n    }\n  "])), _colorVarsStyle(base, tone.enabled), _colorVarsStyle(base, tone.pressed), _colorVarsStyle(base, tone.hovered), _colorVarsStyle(base, tone.selected), _colorVarsStyle(base, tone.enabled), _colorVarsStyle(base, tone.pressed), _colorVarsStyle(base, tone.hovered), _colorVarsStyle(base, tone.selected));
    }
    function treeItemBoxStyle(props) {
      const { $level, theme } = props;
      const { space: space2 } = theme.sanity;
      return Ae(_templateObject88 || (_templateObject88 = _taggedTemplateLiteral(["\n    padding-left: ", ";\n\n    &[data-as='a'] {\n      text-decoration: none;\n    }\n  "])), rem(space2[2] * $level));
    }
    function useTree() {
      const tree = React$2.useContext(TreeContext);
      if (!tree) {
        throw new Error("Tree: missing context value");
      }
      return tree;
    }
    var TreeGroup = React$2.memo(function TreeGroup2(props) {
      const { children, expanded = false, ...restProps } = props;
      const tree = useTree();
      return /* @__PURE__ */ jsxRuntime.jsx(Stack, { as: "ul", "data-ui": "TreeGroup", ...restProps, hidden: !expanded, marginTop: tree.space, role: "group", space: tree.space, children });
    });
    var Root = React$2.memo(styled.li(treeItemRootStyle, treeItemRootColorStyle));
    var TreeItemBox = styled(Box).attrs({ forwardedAs: "a" })(treeItemBoxStyle);
    var ToggleArrowText = styled(Text)(_templateObject89 || (_templateObject89 = _taggedTemplateLiteral(["\n  & > svg {\n    transition: transform 100ms;\n  }\n"])));
    React$2.memo(function TreeItem2(props) {
      const { children, expanded: expandedProp = false, fontSize: fontSize2, href, icon, id: idProp, muted, onClick, padding = 3, selected = false, space: space2 = 2, text, weight, ...restProps } = props;
      const rootRef = React$2.useRef(null);
      const treeitemRef = React$2.useRef(null);
      const tree = useTree();
      const { path, registerItem, setExpanded, setFocusedElement } = tree;
      const _id = React$2.useId();
      const id = idProp || _id;
      const itemPath = React$2.useMemo(() => path.concat([id || ""]), [id, path]);
      const itemKey = itemPath.join("/");
      const itemState = tree.state[itemKey];
      const focused = tree.focusedElement === rootRef.current;
      const expanded = (itemState == null ? void 0 : itemState.expanded) === void 0 ? expandedProp : (itemState == null ? void 0 : itemState.expanded) || false;
      const tabIndex = tree.focusedElement && tree.focusedElement === rootRef.current ? 0 : -1;
      const contextValue = React$2.useMemo(() => ({ ...tree, level: tree.level + 1, path: itemPath }), [itemPath, tree]);
      const handleClick = React$2.useCallback((event) => {
        if (onClick)
          onClick(event);
        const target2 = event.target;
        if (target2 instanceof HTMLElement && (target2.getAttribute("data-ui") === "TreeItem__box" || target2.closest('[data-ui="TreeItem__box"]'))) {
          event.stopPropagation();
          setExpanded(itemKey, !expanded);
          setFocusedElement(rootRef.current);
        }
      }, [expanded, itemKey, onClick, setExpanded, setFocusedElement]);
      const handleKeyDown = React$2.useCallback((event) => {
        if (focused && event.key === "Enter") {
          const el2 = treeitemRef.current || rootRef.current;
          el2 == null ? void 0 : el2.click();
        }
      }, [focused]);
      React$2.useEffect(() => {
        if (!rootRef.current)
          return;
        return registerItem(rootRef.current, itemPath.join("/"), expanded, selected);
      }, [expanded, itemPath, registerItem, selected]);
      const content = /* @__PURE__ */ jsxRuntime.jsxs(Flex$1, { padding, children: [/* @__PURE__ */ jsxRuntime.jsxs(Box, { marginRight: space2, style: { visibility: icon || children ? "visible" : "hidden", pointerEvents: "none" }, children: [icon && /* @__PURE__ */ jsxRuntime.jsx(Text, { muted, size: fontSize2, weight, children: React$2.createElement(icon) }), !icon && /* @__PURE__ */ jsxRuntime.jsx(ToggleArrowText, { muted, size: fontSize2, weight, children: /* @__PURE__ */ jsxRuntime.jsx(ToggleArrowRightIcon, { style: { transform: expanded ? "rotate(90deg)" : void 0 } }) })] }), /* @__PURE__ */ jsxRuntime.jsx(Box, { flex: 1, children: /* @__PURE__ */ jsxRuntime.jsx(Text, { muted, size: fontSize2, textOverflow: "ellipsis", weight, children: text }) })] });
      if (href) {
        return /* @__PURE__ */ jsxRuntime.jsxs(Root, { "data-selected": selected ? "" : void 0, "data-tree-id": id, "data-tree-key": itemKey, "data-ui": "TreeItem", ...restProps, onClick: handleClick, ref: rootRef, role: "none", children: [/* @__PURE__ */ jsxRuntime.jsx(TreeItemBox, { $level: tree.level, "aria-expanded": expanded, "data-ui": "TreeItem__box", href, ref: treeitemRef, role: "treeitem", tabIndex, children: content }), /* @__PURE__ */ jsxRuntime.jsx(TreeContext.Provider, { value: contextValue, children: children && /* @__PURE__ */ jsxRuntime.jsx(TreeGroup, { hidden: !expanded, children }) })] });
      }
      return /* @__PURE__ */ jsxRuntime.jsxs(Root, { "data-selected": selected ? "" : void 0, "data-ui": "TreeItem", "data-tree-id": id, "data-tree-key": itemKey, ...restProps, "aria-expanded": expanded, onClick: handleClick, onKeyDown: handleKeyDown, ref: rootRef, role: "treeitem", tabIndex, children: [/* @__PURE__ */ jsxRuntime.jsx(TreeItemBox, { $level: tree.level, as: "div", "data-ui": "TreeItem__box", children: content }), /* @__PURE__ */ jsxRuntime.jsx(TreeContext.Provider, { value: contextValue, children: children && /* @__PURE__ */ jsxRuntime.jsx(TreeGroup, { expanded, children }) })] });
    });
    var STATE_TYPE = { idle: "idle", loading: "loading", success: "success", error: "error" };
    var CATEGORIES = ["PERFORMANCE", "PWA", "SEO", "BEST_PRACTICES", "ACCESSIBILITY"];
    var CATEGORIES_TITLE = ["Performance", "PWA", "SEO", "Best Practices", "Accessibility"];
    var LIST_DEVICES = { mobile: "mobile", desktop: "desktop" };
    var COLORS = ["#5CC971", "#F3AE4E", "#EB483F"];
    var BG_COLORS = ["rgba(92, 201, 113, 0.1)", "rgba(243, 174, 78, 0.1)", "rgba(235, 72, 63, 0.1)"];
    var TABS = [{ id: LIST_DEVICES.desktop, label: LIST_DEVICES.desktop }, { id: LIST_DEVICES.mobile, label: LIST_DEVICES.mobile }];
    var COLORS_BAR = ["#E1B53E", "#4190AF", "#D9632B", "#733EE4", "#73A132"];
    var Container$4 = styled.div(_templateObject90 || (_templateObject90 = _taggedTemplateLiteral2(["\n  display: grid;\n  grid-template-columns: 364px 1fr;\n  width: 100%;\n  max-width: 1440px;\n  margin: 0 auto;\n"])));
    var ButtonResetAll = styled.button(_templateObject91 || (_templateObject91 = _taggedTemplateLiteral2(["\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  padding: 11.5px 0;\n  gap: 9px;\n  background-color: ", ";\n\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 1.2;\n\n  color: ", ";\n\n  border: 1px solid ", ";\n  border-radius: 4px;\n  svg > path {\n    stroke: ", ";\n  }\n  &:hover,\n  :focus {\n    background: ", ";\n    border: 1px solid ", ";\n    border-radius: 4px;\n    color: ", ";\n    svg > path {\n      stroke: ", ";\n    }\n  }\n  &:active {\n    background: ", ";\n    border: 1px solid ", ";\n    border-radius: 4px;\n    color: ", ";\n    svg > path {\n      stroke: ", ";\n    }\n  }\n"])), (_ref3) => {
      let { disabled } = _ref3;
      return disabled ? "#DFDFE3" : "transparent";
    }, (_ref27) => {
      let { disabled } = _ref27;
      return disabled ? "#fff" : "#121212";
    }, (_ref28) => {
      let { disabled } = _ref28;
      return disabled ? "#dfdfe3" : "#c9c9c9";
    }, (_ref29) => {
      let { disabled } = _ref29;
      return disabled ? "#fff" : "#121212";
    }, (_ref30) => {
      let { disabled } = _ref30;
      return disabled ? "#DFDFE3" : "#efefff";
    }, (_ref31) => {
      let { disabled } = _ref31;
      return disabled ? "inherit" : "#3719ca";
    }, (_ref32) => {
      let { theme, disabled } = _ref32;
      return disabled ? "#fff" : "#3719CA";
    }, (_ref33) => {
      let { theme, disabled } = _ref33;
      return disabled ? "#fff" : "#3719CA";
    }, (_ref34) => {
      let { disabled } = _ref34;
      return disabled ? "#DFDFE3" : "#efefff";
    }, (_ref35) => {
      let { disabled } = _ref35;
      return disabled ? "inherit" : "#3719ca";
    }, (_ref36) => {
      let { theme, disabled } = _ref36;
      return disabled ? "#fff" : "#3719CA";
    }, (_ref37) => {
      let { theme, disabled } = _ref37;
      return disabled ? "#fff" : "#3719CA";
    });
    var ButtonAddPage = styled.button(_templateObject92 || (_templateObject92 = _taggedTemplateLiteral2(["\n  cursor: pointer;\n  width: 100%;\n  max-width: 92px;\n\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 1.2;\n\n  display: flex;\n  align-items: center;\n  text-align: center;\n  justify-content: center;\n\n  color: #ffffff;\n  background: ", ";\n  border: 1px solid transparent;\n  border-radius: 4px;\n  padding: 11.5px 0;\n\n  &:hover,\n  :focus {\n    background: ", ";\n  }\n  &:active {\n    background: ", ";\n  }\n"])), (_ref38) => {
      let { disabled } = _ref38;
      return disabled ? "#DFDFE3" : "#3719ca";
    }, (_ref39) => {
      let { disabled } = _ref39;
      return disabled ? "#DFDFE3" : "#5f44e6";
    }, (_ref40) => {
      let { disabled } = _ref40;
      return disabled ? "#DFDFE3" : "#250ba3";
    });
    var InputIcon = styled.div(_templateObject93 || (_templateObject93 = _taggedTemplateLiteral2(["\n  position: absolute;\n  top: 50%;\n  left: 5%;\n  transform: translate(0%, -50%);\n  margin: auto 0;\n  display: flex;\n  align-items: center;\n  svg > path {\n    stroke: ", ";\n  }\n"])), (_ref41) => {
      let { error } = _ref41;
      return error ? "#EF3340" : "#888";
    });
    var ErorrMessage = styled.span(_templateObject94 || (_templateObject94 = _taggedTemplateLiteral2(["\n  display: flex;\n  align-items: center;\n  text-align: center;\n  min-height: 24px;\n  font-weight: 600;\n  font-size: 12px;\n  line-height: 1.67;\n  color: #ef3340;\n"])));
    var CheckboxContainer = styled.div(_templateObject95 || (_templateObject95 = _taggedTemplateLiteral2(["\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding: 0px;\n  gap: 8px;\n"])));
    var CheckboxLabel = styled.label(_templateObject96 || (_templateObject96 = _taggedTemplateLiteral2(["\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 19px;\n  display: flex;\n  align-items: center;\n  text-transform: capitalize;\n  color: #3e3e3e;\n"])));
    var CheckboxIconContainer = styled.div(_templateObject97 || (_templateObject97 = _taggedTemplateLiteral2(["\n  position: relative;\n  width: 20px;\n  height: 20px;\n  margin: 0;\n\n  cursor: pointer;\n  border: 1px solid #c9c9c9;\n  border-radius: 2px;\n\n  svg {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n\n    transform: translate(-50%, -50%);\n  }\n  &:hover,\n  :focus {\n    border: 1px solid #3f3f3f;\n  }\n\n  background-color: ", ";\n  ", "\n"])), (props) => props.checked ? "#3719ca" : "#fff", (_ref42) => {
      let { checked } = _ref42;
      return checked && "\n  &:hover {\n    background-color: #5F44E5;\n  }\n  ";
    });
    var CustomInput = styled.input(_templateObject98 || (_templateObject98 = _taggedTemplateLiteral2(["\n  width: 100%;\n  border: 1px solid ", ";\n  border-radius: 4px;\n  padding: 12px 32px 12px 38px;\n  outline: unset;\n\n  font-family: 'Inter';\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 17px;\n\n  color: ", ";\n\n  &::placeholder {\n    font-weight: 500;\n    font-size: 14px;\n    line-height: 1.2;\n    color: #888888;\n  }\n  &:hover,\n  :focus,\n  :active {\n    border: 1px solid ", ";\n  }\n\n  &:disabled {\n    background: #f5f5f7;\n    color: #c9c9c9;\n    border: 1px solid #dadada;\n    border-radius: 4px;\n  }\n"])), (_ref43) => {
      let { error } = _ref43;
      return error ? "#EF3340" : "#c9c9c9";
    }, (_ref44) => {
      let { error } = _ref44;
      return error ? "#EF3340" : "#3f3f3f";
    }, (_ref45) => {
      let { error } = _ref45;
      return error ? "#EF3340" : "#3f3f3f";
    });
    var InputSpinner = styled.div(_templateObject99 || (_templateObject99 = _taggedTemplateLiteral2(["\n  position: absolute;\n  top: 50%;\n  left: 98%;\n  transform: translate(0%, -50%);\n  padding: auto 0;\n"])));
    var TickIcon = () => {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { xmlns: "http://www.w3.org/2000/svg", width: "11", height: "8", viewBox: "0 0 11 8", fill: "none", children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M3.6437 7.84288L0.157101 4.35628C-0.0523671 4.14681 -0.0523671 3.80718 0.157101 3.59769L0.915668 2.8391C1.12514 2.62961 1.46479 2.62961 1.67426 2.8391L4.023 5.18782L9.05374 0.157101C9.26321 -0.0523671 9.60286 -0.0523671 9.81233 0.157101L10.5709 0.915689C10.7804 1.12516 10.7804 1.46479 10.5709 1.67428L4.40229 7.8429C4.1928 8.05237 3.85317 8.05237 3.6437 7.84288Z", fill: "white" }) });
    };
    var LinkIcon = () => {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", width: "18", height: "18", viewBox: "0 0 18 18", fill: "none", children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.5508 9.58775C10.2715 9.95619 9.91515 10.261 9.50596 10.4816C9.09676 10.7022 8.64427 10.8334 8.17917 10.8663C7.71408 10.8992 7.24726 10.833 6.81038 10.6721C6.3735 10.5113 5.97678 10.2597 5.64713 9.93428L3.69607 8.00908C3.10374 7.40391 2.77598 6.59339 2.78339 5.75209C2.7908 4.91078 3.13278 4.106 3.73568 3.51109C4.33859 2.91617 5.15417 2.57872 6.00677 2.57141C6.85937 2.5641 7.68077 2.88752 8.29406 3.472L9.41267 4.56937", stroke: "#888888", strokeLinecap: "round" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M7.87701 8.41175C8.15631 8.04331 8.51264 7.73845 8.92184 7.51785C9.33103 7.29725 9.78353 7.16607 10.2486 7.1332C10.7137 7.10033 11.1805 7.16655 11.6174 7.32736C12.0543 7.48817 12.451 7.73981 12.7807 8.06521L14.7317 9.99042C15.3241 10.5956 15.6518 11.4061 15.6444 12.2474C15.637 13.0887 15.295 13.8935 14.6921 14.4884C14.0892 15.0833 13.2736 15.4208 12.421 15.4281C11.5684 15.4354 10.747 15.112 10.1337 14.5275L9.02163 13.4301", stroke: "#888888", strokeLinecap: "round" })] });
    };
    var CustomSpinner = (_ref46) => {
      let { text = "Loading some content\u2026" } = _ref46;
      return /* @__PURE__ */ jsxRuntime.jsx(Card, { padding: 4, height: "fill", children: /* @__PURE__ */ jsxRuntime.jsxs(Flex$1, { align: "center", direction: "row", gap: 3, height: "fill", justify: "center", children: [/* @__PURE__ */ jsxRuntime.jsx(Spinner, { muted: true }), /* @__PURE__ */ jsxRuntime.jsx(Text, { muted: true, size: 1, children: text })] }) });
    };
    var SpinnerComponent = () => /* @__PURE__ */ jsxRuntime.jsx(StyledSpinner, { viewBox: "0 0 50 50", children: /* @__PURE__ */ jsxRuntime.jsx("circle", { className: "path", cx: "25", cy: "25", r: "20", fill: "none", strokeWidth: "4" }) });
    var StyledSpinner = styled.svg(_templateObject100 || (_templateObject100 = _taggedTemplateLiteral2(["\n  animation: rotate 2s linear infinite;\n  margin: -25px 0 0 -25px;\n  width: 16px;\n  height: 16px;\n\n  & .path {\n    stroke: #c9c9c9;\n    stroke-linecap: round;\n    animation: dash 1.5s ease-in-out infinite;\n  }\n\n  @keyframes rotate {\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n  @keyframes dash {\n    0% {\n      stroke-dasharray: 1, 150;\n      stroke-dashoffset: 0;\n    }\n    50% {\n      stroke-dasharray: 90, 150;\n      stroke-dashoffset: -35;\n    }\n    100% {\n      stroke-dasharray: 90, 150;\n      stroke-dashoffset: -124;\n    }\n  }\n"])));
    var InputComponent = (_ref47) => {
      let { setUrl, device, setDevice, state, url, data: data2, handelRequest } = _ref47;
      const [errorMessage, setErrorMessage] = React$2.useState("");
      const handleChange = React$2.useCallback((event) => {
        if (event.currentTarget.dataset.disabled === "true")
          return;
        const check2 = event.currentTarget.id;
        if (device.includes(check2)) {
          setDevice([...device.filter((dev) => dev !== check2)]);
        } else {
          setDevice([...device, check2]);
        }
      }, [device, setDevice]);
      const validate = (value) => {
        if (validator__default.default.isURL(value)) {
          setErrorMessage("");
        } else {
          setErrorMessage("Is not valid URL.");
        }
        if (data2.length) {
          data2.map((item) => {
            return item.mainInfo.linkReq == value ? setErrorMessage("This link already exist") : null;
          });
        }
        setUrl(value);
      };
      const isDisable = state === STATE_TYPE.loading;
      return /* @__PURE__ */ jsxRuntime.jsx(Box, { children: /* @__PURE__ */ jsxRuntime.jsxs(Flex$1, { justify: "space-between", direction: "column", children: [/* @__PURE__ */ jsxRuntime.jsxs(Flex$1, { direction: "column", children: [/* @__PURE__ */ jsxRuntime.jsxs(Flex$1, { gap: 2, children: [/* @__PURE__ */ jsxRuntime.jsxs(Flex$1, { style: { position: "relative" }, children: [/* @__PURE__ */ jsxRuntime.jsx(InputIcon, { error: Boolean(errorMessage), children: /* @__PURE__ */ jsxRuntime.jsx(LinkIcon, {}) }), /* @__PURE__ */ jsxRuntime.jsx(CustomInput, { onChange: (_ref48) => {
        let { target: target2 } = _ref48;
        return validate(target2.value);
      }, onBlur: (_ref49) => {
        let { target: target2 } = _ref49;
        return target2.value === "" ? setErrorMessage("") : validate(target2.value);
      }, value: url, placeholder: "Specify page URL", disabled: isDisable, error: Boolean(errorMessage) }), state === STATE_TYPE.loading && /* @__PURE__ */ jsxRuntime.jsx(InputSpinner, { children: /* @__PURE__ */ jsxRuntime.jsx(SpinnerComponent, {}) })] }), /* @__PURE__ */ jsxRuntime.jsx(ButtonAddPage, { type: "button", onClick: handelRequest, disabled: isDisable || !Boolean(device.length), children: "Add page" })] }), /* @__PURE__ */ jsxRuntime.jsx(ErorrMessage, { children: url !== "" && errorMessage })] }), /* @__PURE__ */ jsxRuntime.jsxs(Flex$1, { style: { gap: "16px" }, children: [/* @__PURE__ */ jsxRuntime.jsxs(CheckboxContainer, { children: [/* @__PURE__ */ jsxRuntime.jsx(CheckboxIconContainer, { checked: device.includes(LIST_DEVICES.desktop), id: "desktop", "data-disabled": isDisable, onClick: handleChange, children: /* @__PURE__ */ jsxRuntime.jsx(TickIcon, {}) }), /* @__PURE__ */ jsxRuntime.jsx(CheckboxLabel, { children: LIST_DEVICES.desktop })] }), /* @__PURE__ */ jsxRuntime.jsxs(CheckboxContainer, { children: [/* @__PURE__ */ jsxRuntime.jsx(CheckboxIconContainer, { checked: device.includes(LIST_DEVICES.mobile), id: "mobile", "data-disabled": isDisable, onClick: handleChange, children: /* @__PURE__ */ jsxRuntime.jsx(TickIcon, {}) }), /* @__PURE__ */ jsxRuntime.jsx(CheckboxLabel, { children: LIST_DEVICES.mobile })] })] })] }) });
    };
    var Container$3 = styled.div(_templateObject101 || (_templateObject101 = _taggedTemplateLiteral2(["\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  gap: 20px;\n  margin: 32px 0 16px;\n  overflow-y: scroll;\n  /* Scrollbar Styling */\n  ::-webkit-scrollbar {\n    width: 5px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background-color: transparent;\n    -webkit-border-radius: 5px;\n    border-radius: 5px;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    -webkit-border-radius: 5px;\n    border-radius: 5px;\n    background: #ebebeb;\n  }\n"])));
    var CustomButton = styled.button(_templateObject102 || (_templateObject102 = _taggedTemplateLiteral2(["\n  display: flex;\n  width: 24px;\n  height: 24px;\n\n  align-items: center;\n\n  border: 1px solid ", ";\n  border-radius: 3px;\n  background-color: transparent;\n  cursor: pointer;\n\n  svg > path {\n    stroke: ", ";\n  }\n\n  &:hover,\n  :focus {\n    border: 1px solid ", ";\n    svg > path {\n      stroke: ", ";\n    }\n  }\n  &:active {\n    border: 1px solid ", ";\n    svg > path {\n      stroke: ", ";\n    }\n  }\n"])), (_ref50) => {
      let { disabled } = _ref50;
      return disabled ? "#DFDFE3" : "#c1c1c1";
    }, (_ref51) => {
      let { disabled } = _ref51;
      return disabled && "#DFDFE3";
    }, (_ref52) => {
      let { disabled } = _ref52;
      return disabled ? "#DFDFE3" : "#EB483F";
    }, (_ref53) => {
      let { disabled } = _ref53;
      return disabled ? "#DFDFE3" : "#EB483F";
    }, (_ref54) => {
      let { disabled } = _ref54;
      return disabled ? "#DFDFE3" : "#d23229";
    }, (_ref55) => {
      let { disabled } = _ref55;
      return disabled ? "#DFDFE3" : "#d23229";
    });
    var Item = styled.div(_templateObject103 || (_templateObject103 = _taggedTemplateLiteral2(["\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  gap: 8px;\n  padding: 16px;\n  border: 1px solid\n    ", ";\n  border-radius: 8px;\n  cursor: pointer;\n  background-color: #fff;\n"])), (_ref56) => {
      let { active } = _ref56;
      return active ? "#3719CA" : "#e4e6e8";
    });
    var Flex = styled.div(_templateObject104 || (_templateObject104 = _taggedTemplateLiteral2(["\n  display: flex;\n  gap: 8px;\n  justify-content: space-between;\n  align-items: center;\n"])));
    var DateText = styled.p(_templateObject105 || (_templateObject105 = _taggedTemplateLiteral2(["\n  font-style: normal;\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 1.2;\n\n  color: #2b2b2b;\n  margin: 0;\n"])));
    var LinkText = styled.h3(_templateObject106 || (_templateObject106 = _taggedTemplateLiteral2(["\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 1.5;\n\n  color: #2b2b2b;\n  margin: 0;\n"])));
    var BadgeComponent = styled.div(_templateObject107 || (_templateObject107 = _taggedTemplateLiteral2(["\n  display: flex;\n  align-items: center;\n  border: 1px solid ", ";\n  color: ", ";\n  border-radius: 58px;\n  padding: 3px 12px;\n\n  font-family: 'Poppins';\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 1.4;\n\n  text-align: center;\n  text-transform: capitalize;\n"])), (_ref57) => {
      let { tone } = _ref57;
      return tone;
    }, (_ref58) => {
      let { tone } = _ref58;
      return tone;
    });
    var TrashIcon = () => {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", width: "12", height: "12", viewBox: "0 0 12 12", fill: "none", children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9.66245 4.73413C9.66245 4.73413 9.39095 8.10163 9.23345 9.52013C9.15845 10.1976 8.73996 10.5946 8.05446 10.6071C6.74996 10.6306 5.44396 10.6321 4.13996 10.6046C3.48046 10.5911 3.06896 10.1891 2.99546 9.52363C2.83696 8.09263 2.56696 4.73413 2.56696 4.73413", stroke: "#02021E", strokeWidth: "0.947368", strokeLinecap: "round", strokeLinejoin: "round" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.3541 3.11987H1.87506", stroke: "#02021E", strokeWidth: "0.947368", strokeLinecap: "round", strokeLinejoin: "round" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8.72023 3.11987C8.32773 3.11987 7.98973 2.84237 7.91273 2.45787L7.79123 1.84987C7.71623 1.56937 7.46223 1.37537 7.17273 1.37537H5.05623C4.76673 1.37537 4.51273 1.56937 4.43773 1.84987L4.31623 2.45787C4.23923 2.84237 3.90123 3.11987 3.50873 3.11987", stroke: "#02021E", strokeWidth: "0.947368", strokeLinecap: "round", strokeLinejoin: "round" })] });
    };
    var HistoryMenu = (_ref59) => {
      let { data: data2, activeItem, setActiveItem, state, deleteCardByID } = _ref59;
      const isDisable = state === STATE_TYPE.loading;
      const handelItem = (_ref60, i) => {
        let { target: target2 } = _ref60;
        if (target2.id === "deleteButton" && state !== STATE_TYPE.loading) {
          return;
        }
        setActiveItem(i);
      };
      const renderItems = (items) => items.map((_ref61, i) => {
        let { mainInfo, categoryList } = _ref61;
        var _a2, _b, _c, _d;
        const showSecondTag = Boolean((_b = (_a2 = categoryList[0]) == null ? void 0 : _a2.mobile) == null ? void 0 : _b.length) && Boolean((_d = (_c = categoryList[0]) == null ? void 0 : _c.desktop) == null ? void 0 : _d.length);
        return /* @__PURE__ */ jsxRuntime.jsxs(Item, { onClick: (e) => handelItem(e, i), active: i === activeItem && true, children: [/* @__PURE__ */ jsxRuntime.jsxs(Flex, { children: [/* @__PURE__ */ jsxRuntime.jsx(Flex, { children: /* @__PURE__ */ jsxRuntime.jsxs(LinkText, { children: [mainInfo.linkReq.slice(0, 22), mainInfo.linkReq.length > 22 && "..."] }) }), /* @__PURE__ */ jsxRuntime.jsx(CustomButton, { disabled: isDisable, id: "deleteButton", type: "button", onClick: (e) => deleteCardByID(mainInfo.linkReq, i), children: /* @__PURE__ */ jsxRuntime.jsx(TrashIcon, {}) })] }), /* @__PURE__ */ jsxRuntime.jsxs(Flex, { children: [/* @__PURE__ */ jsxRuntime.jsxs(Flex, { children: [/* @__PURE__ */ jsxRuntime.jsx(BadgeComponent, { tone: mainInfo.device === LIST_DEVICES.desktop ? "#4BBD7E" : "#F4BE5E", children: mainInfo.device }), showSecondTag && /* @__PURE__ */ jsxRuntime.jsx(BadgeComponent, { tone: mainInfo.device === LIST_DEVICES.desktop ? "#F4BE5E" : "#4BBD7E", children: mainInfo.device === LIST_DEVICES.desktop ? LIST_DEVICES.mobile : LIST_DEVICES.desktop })] }), /* @__PURE__ */ jsxRuntime.jsx(DateText, { children: mainInfo.date.split(",")[0] })] })] }, "".concat(mainInfo.linkReq.slice(0, 10), "-").concat(Math.random()));
      });
      return /* @__PURE__ */ jsxRuntime.jsx(Container$3, { children: renderItems(data2) });
    };
    var _a;
    var endpoint = "https://pagespeedonline.googleapis.com/pagespeedonline/v5/runPagespeed";
    var key = (_a = (void 0).SANITY_STUDIO_PAGE_SPEED_INSIGHTS_API_KEY) != null ? _a : "";
    var apiRequestByDeviceAllCategories = async function(url) {
      let device = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "desktop";
      let API_KEY = arguments.length > 2 ? arguments[2] : void 0;
      const req = CATEGORIES.map((category) => {
        return axios__default.default("".concat(endpoint, "?url=").concat(url, "&strategy=").concat(device, "&key=").concat(API_KEY ? API_KEY : key, "&category=").concat(category));
      });
      return Promise.all(req);
    };
    var apiReqByAllDevice = async (url, forDesktop, forMobile, API_KEY) => {
      let reqDesktop = [], reqMobile = [];
      if (forMobile) {
        reqMobile = await apiRequestByDeviceAllCategories(url, LIST_DEVICES.mobile, API_KEY);
      }
      if (forDesktop) {
        reqDesktop = await apiRequestByDeviceAllCategories(url, LIST_DEVICES.desktop, API_KEY);
      }
      return [...reqDesktop, ...reqMobile];
    };
    var month = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    var getMonthByIdx = (idx) => month[idx];
    var filterDates = (dates, startDate, endDate) => {
      const filteredDates = [];
      for (const date of dates) {
        const dateObj = new Date(date);
        if (startDate <= dateObj && dateObj <= endDate) {
          filteredDates.push(date);
        }
      }
      return filteredDates;
    };
    var formatData = (data2) => {
      const { id, lighthouseResult: { configSettings: { formFactor } }, analysisUTCTimestamp } = data2;
      const mainInfo = { linkReq: id, date: formatDate(analysisUTCTimestamp), device: formFactor };
      return { mainInfo };
    };
    var formatDate = (data2) => {
      const options = { year: "numeric", month: "numeric", day: "numeric", hour: "numeric", minute: "numeric" };
      const newDate = new Date(data2).toLocaleDateString("en-EN", options);
      return newDate;
    };
    var formatDataList = (dataList) => {
      var _a2, _b;
      const mainInfo = formatData(dataList[0].data).mainInfo;
      const result = dataList.map((value) => formatMetrics(value.data));
      let mob = [];
      let desk = [];
      if ((_b = (_a2 = result[0]) == null ? void 0 : _a2.mobile) == null ? void 0 : _b.length) {
        mob.push([mainInfo.date, ...result.map((it2) => it2.mobile[0].score), getMonthByIdx(new Date(mainInfo.date).getMonth())]);
      } else {
        desk.push([mainInfo.date, ...result.map((it2) => it2.desktop[0].score), getMonthByIdx(new Date(mainInfo.date).getMonth())]);
      }
      const history = { mobile: mob, desktop: desk };
      return { mainInfo, categoryList: result, history };
    };
    var formatMetrics = (data2) => {
      var _a2;
      const { lighthouseResult: { categories, audits, configSettings: { formFactor } } } = data2;
      let mobile = [], desktop = [];
      const typeCategory = Object.keys(categories)[0];
      const performanceMetricsId = categories["".concat(typeCategory)].auditRefs.reduce((acc, _ref62) => {
        let { id, weight } = _ref62;
        if (weight > 0) {
          acc.push(id);
        }
        return acc;
      }, []);
      const performance2 = { title: (_a2 = categories["".concat(typeCategory)].title) != null ? _a2 : "", score: categories["".concat(typeCategory)].score * 100, categories: Object.entries(audits).reduce((acc, item) => {
        if (performanceMetricsId.includes(item[0])) {
          acc.push({ name: item[1].title, value: item[1].displayValue ? item[1].displayValue : item[1].score, description: item[1].description });
        }
        return acc;
      }, []) };
      if (formFactor === "mobile") {
        mobile.unshift({ ...performance2 });
      } else {
        desktop.unshift({ ...performance2 });
      }
      return { desktop, mobile };
    };
    var fadeIn = We(_templateObject108 || (_templateObject108 = _taggedTemplateLiteral2(["\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n"])));
    var TitleContainer = styled.div(_templateObject109 || (_templateObject109 = _taggedTemplateLiteral2(["\n  display: flex;\n  align-items: center;\n  gap: 6px;\n\n  font-size: 24px;\n  line-height: 1.21;\n  color: #121212;\n"])));
    var Container$2 = styled.div(_templateObject110 || (_templateObject110 = _taggedTemplateLiteral2(["\n  display: flex;\n  flex-direction: column;\n  padding: 40px 0 24px;\n  overflow: scroll;\n  /* Scrollbar Styling */\n  ::-webkit-scrollbar {\n    width: 5px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background-color: transparent;\n    -webkit-border-radius: 5px;\n    border-radius: 5px;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    -webkit-border-radius: 5px;\n    border-radius: 5px;\n    background: #ebebeb;\n  }\n"])));
    var TabContainer = styled.div(_templateObject111 || (_templateObject111 = _taggedTemplateLiteral2(["\n  display: flex;\n  flex-direction: column;\n  gap: 32px;\n  padding: 0 40px;\n  animation: ", " 0.5s ease-in-out;\n  border-bottom: 1px solid #E4E6E8;\n"])), fadeIn);
    var TabButton = styled.button(_templateObject112 || (_templateObject112 = _taggedTemplateLiteral2(["\n  display: flex;\n  align-items: center;\n  gap: 0.25rem;\n  color: ", ";\n  background-color: unset;\n  border: unset;\n\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 1.19;\n  text-align: center;\n  text-transform: capitalize;\n\n  padding: 0px 9px 16px;\n  cursor: pointer;\n\n  transition: all 0.3s ease-in-out;\n  svg > path {\n    stroke: ", ";\n    transition: stroke 0.3s ease-in-out;\n  }\n"])), (_ref63) => {
      let { active, theme } = _ref63;
      return active ? "#3719CA" : "rgba(18, 18, 18, 0.4)";
    }, (_ref64) => {
      let { active, theme } = _ref64;
      return active ? "#3719CA" : "rgba(18, 18, 18, 0.4)";
    });
    var TabLine = styled.span(_templateObject113 || (_templateObject113 = _taggedTemplateLiteral2(["\n  height: 3px;\n  background-color: ", ";\n  border-radius: 5px 5px 0 0;\n  width: 100%;\n"])), (_ref65) => {
      let { theme } = _ref65;
      return "#3719CA";
    });
    var TabContent = styled.div(_templateObject114 || (_templateObject114 = _taggedTemplateLiteral2(["\n  display: ", ";\n  animation: ", " 0.5s ease-in-out;\n  flex-direction: column;\n  padding: 32px 40px 24px;\n"])), (_ref66) => {
      let { active } = _ref66;
      return active ? "flex" : "none";
    }, fadeIn);
    var FirstSectionContainer = styled.div(_templateObject115 || (_templateObject115 = _taggedTemplateLiteral2(["\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n  border: 1px solid #e4e6e8;\n  border-radius: 4px;\n  padding: 32px;\n  overflow: hidden;\n"])));
    var RenderContainer = styled.div(_templateObject116 || (_templateObject116 = _taggedTemplateLiteral2(["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 3%;\n"])));
    var RetestButton = styled(ButtonResetAll)(_templateObject117 || (_templateObject117 = _taggedTemplateLiteral2(["\n  padding: 12px 32px;\n"])));
    var Link = styled.a(_templateObject118 || (_templateObject118 = _taggedTemplateLiteral2(["\n  text-decoration: underline;\n  font-weight: 600;\n  font-size: 24px;\n  line-height: 1.21;\n  color: #121212;\n\n  :hover {\n    color: ", ";\n  }\n"])), (_ref67) => {
      let { theme } = _ref67;
      return "#3719CA";
    });
    var LinkDetails = styled(Link)(_templateObject119 || (_templateObject119 = _taggedTemplateLiteral2(["\n  font-size: 14px;\n  line-height: 1.21;\n  text-decoration: unset;\n  display: flex;\n  align-items: center;\n  white-space: nowrap;\n  :hover {\n    svg > path {\n      stroke: ", ";\n    }\n  }\n"])), (_ref68) => {
      let { theme } = _ref68;
      return "#3719CA";
    });
    var DescriptContainer = styled.div(_templateObject120 || (_templateObject120 = _taggedTemplateLiteral2(["\n  display: flex;\n  gap: 1.25rem;\n  justify-content: center;\n  align-items: flex-start;\n"])));
    var DescriptItem = styled.span(_templateObject121 || (_templateObject121 = _taggedTemplateLiteral2(["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  white-space: nowrap;\n  gap: 8px;\n\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 1.5;\n\n  color: #121212;\n"])));
    var PieChartComponent = (_ref69) => {
      let { title, score } = _ref69;
      const colorChart = score <= 100 ? score < 90 ? score >= 50 ? COLORS[1] : COLORS[2] : COLORS[0] : COLORS[0];
      const colorChartBg = score <= 100 ? score < 90 ? score >= 50 ? BG_COLORS[1] : BG_COLORS[2] : BG_COLORS[0] : BG_COLORS[0];
      return /* @__PURE__ */ jsxRuntime.jsx("div", { style: { width: "140px" }, children: /* @__PURE__ */ jsxRuntime.jsx(reactMinimalPieChart.PieChart, { data: [{ title, value: score, color: "".concat(colorChart) }], lineWidth: 10, totalValue: 100, labelPosition: 0, label: (_ref70) => {
        let { dataEntry } = _ref70;
        return "".concat(Math.round(dataEntry.percentage));
      }, labelStyle: { fontSize: "25px", fontWeight: "bold", fontFamily: "sans-serif", fill: "".concat(colorChart) }, rounded: true, style: { borderRadius: "50%", backgroundColor: "".concat(colorChartBg) } }) });
    };
    var PieContainer = styled.div(_templateObject122 || (_templateObject122 = _taggedTemplateLiteral2(["\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n  align-items: center;\n"])));
    var Title = styled.h3(_templateObject123 || (_templateObject123 = _taggedTemplateLiteral2(["\n  font-weight: 500;\n  font-size: 18px;\n  line-height: 1.4;\n\n  color: #3e3e3e;\n\n  display: flex;\n  align-items: center;\n  margin: 0;\n"])));
    var RenderCategories = (_ref71) => {
      let { item } = _ref71;
      const { categories, score, title } = item;
      return /* @__PURE__ */ jsxRuntime.jsxs(PieContainer, { children: [/* @__PURE__ */ jsxRuntime.jsx(PieChartComponent, { title, score }), /* @__PURE__ */ jsxRuntime.jsx(Title, { children: title })] });
    };
    var CalendarIcon = () => {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", width: "18", height: "18", viewBox: "0 0 18 18", fill: "none", children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M14.25 3H3.75C2.92157 3 2.25 3.67157 2.25 4.5V15C2.25 15.8284 2.92157 16.5 3.75 16.5H14.25C15.0784 16.5 15.75 15.8284 15.75 15V4.5C15.75 3.67157 15.0784 3 14.25 3Z", stroke: "#8181A5", strokeLinecap: "round", strokeLinejoin: "round" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12 1.5V4.5", stroke: "#8181A5", strokeLinecap: "round", strokeLinejoin: "round" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M6 1.5V4.5", stroke: "#8181A5", strokeLinecap: "round", strokeLinejoin: "round" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M2.25 7.5H15.75", stroke: "#8181A5", strokeLinecap: "round", strokeLinejoin: "round" })] });
    };
    var Container$1 = styled.div(_templateObject124 || (_templateObject124 = _taggedTemplateLiteral2(["\n  display: flex;\n  margin: 0px 0px auto;\n"])));
    var DatePickerComponent = (_ref72) => {
      let { value, onChange, markDateList } = _ref72;
      return /* @__PURE__ */ jsxRuntime.jsx(Container$1, { children: /* @__PURE__ */ jsxRuntime.jsx(DateRangePicker__default.default, { onChange, value, tileClassName: (_ref73) => {
        let { date, view } = _ref73;
        const classesList = [];
        if (markDateList.find((x2) => x2 === formatDate(date).split(",")[0])) {
          classesList.push("doted");
        }
        classesList.push("titleStyle");
        return classesList;
      }, calendarClassName: "calendar", clearIcon: value ? void 0 : null, calendarIcon: CalendarIcon, className: "calendarContainer" }) });
    };
    var DatePickerComponentMemo = React$2.memo(DatePickerComponent);
    var CustomCheckBox = (_ref74) => {
      let { checked, isDisable = false, handleChange, label = "", id } = _ref74;
      return /* @__PURE__ */ jsxRuntime.jsxs(CheckboxContainer, { children: [/* @__PURE__ */ jsxRuntime.jsx(CheckboxIconContainer, { checked, id, "data-disabled": isDisable, onClick: handleChange, children: /* @__PURE__ */ jsxRuntime.jsx(TickIcon, {}) }), /* @__PURE__ */ jsxRuntime.jsx(CheckboxLabel, { children: label })] });
    };
    var TitleSection = styled.h2(_templateObject125 || (_templateObject125 = _taggedTemplateLiteral2(["\n  font-weight: 600;\n  font-size: 24px;\n  line-height: 1.21;\n  color: #121212;\n  margin: 0;\n"])));
    var ContainerChartLine = styled.div(_templateObject126 || (_templateObject126 = _taggedTemplateLiteral2(["\n  display: flex;\n  flex-direction: column;\n  gap: 32px;\n\n  mix-blend-mode: normal;\n  border: 1px solid #e4e6e8;\n  border-radius: 4px;\n  padding: 32px;\n"])));
    chart_js.Chart.register(chart_js.CategoryScale, chart_js.LinearScale, chart_js.BarElement, chart_js.Title, chart_js.Tooltip, chart_js.Legend, chart_js.LineElement, chart_js.PointElement);
    var ChartComponent = (_ref75) => {
      let { history, markDatesList = [] } = _ref75;
      const chartRef = React$2.useRef(null);
      const [value, onChange] = React$2.useState(null);
      const [isCheckedList, setIsCheckedList] = React$2.useState([]);
      const labelList = Boolean(history == null ? void 0 : history.length) ? history.length > 1 ? [...history.map((dateReq) => dateReq[0])] : ["", ...history.map((dataReq) => dataReq[0]), ""] : [];
      const dataSetList = Boolean(history == null ? void 0 : history.length) ? history.length > 1 ? [...CATEGORIES.map((category, idx) => {
        return { type: "line", label: category, data: [...history.map((it2) => it2[idx + 1])], borderWidth: 3, backgroundColor: COLORS_BAR[idx], borderColor: COLORS_BAR[idx], tension: 0.1 };
      })] : [...CATEGORIES.map((category, idx) => {
        return { type: "line", label: category, data: [null, ...history.map((it2) => it2[idx + 1]), null], borderWidth: 6, backgroundColor: COLORS_BAR[idx] };
      })] : [];
      const options = { responsive: true, plugins: { legend: { position: "top", display: false }, title: { display: false, text: "Request History" }, tooltip: { backgroundColor: "#FFFFFF", titleColor: "#02021E", bodyColor: "#02021E", borderColor: "rgba(228, 230, 232, 0.4)", borderWidth: 1 } }, scales: { y: {
        // beginAtZero: true,
        border: { dash: [8, 4] }
      }, x: { grid: { display: false, borderDash: [8, 4] }, ticks: { callback: function(value2, index2, values) {
        if (labelList.length === 3) {
          return Boolean(index2 === 0 || index2 === values.length - 1) ? labelList[1].split(",")[0] : "";
        }
        if (index2 === 0 || index2 === values.length - 1) {
          const valueText = labelList[index2].split(",")[0];
          return valueText;
        }
        return "";
      } } } } };
      const renderDatePickerComponent = React$2.useCallback(() => {
        return /* @__PURE__ */ jsxRuntime.jsx(DatePickerComponentMemo, { value, onChange, markDateList: markDatesList });
      }, [markDatesList, value]);
      const renderCustomCheckBox = React$2.useCallback(() => {
        const updateChart = (target2, chart, name2) => {
          const isDataShow = chart.isDatasetVisible(target2);
          if (isDataShow === false) {
            chart.show(target2);
            setIsCheckedList((prev) => prev.filter((it2) => it2 !== name2));
          }
          if (isDataShow === true) {
            chart.hide(target2);
            setIsCheckedList([...isCheckedList, name2]);
          }
        };
        return CATEGORIES_TITLE.map((item, idx) => {
          return /* @__PURE__ */ jsxRuntime.jsx(Flex$1, { align: "center", children: /* @__PURE__ */ jsxRuntime.jsx(CustomCheckBox, { label: item, checked: !Boolean(isCheckedList == null ? void 0 : isCheckedList.includes(item)), handleChange: (_ref76) => {
            let { currentTarget } = _ref76;
            return updateChart(currentTarget.id, chartRef.current, item);
          }, id: idx }) }, "".concat(item, "-").concat(idx));
        });
      }, [isCheckedList]);
      const hoverLine = { id: "hoverLine", afterDatasetsDraw(chart, args, plugins) {
        const { ctx: ctx2, tooltip, chartArea: { top: top2, left, right, bottom: bottom2, width, height }, scales: { x: x2, y: y2 } } = chart;
        if (tooltip._active.length > 0) {
          const xCoor = x2.getPixelForValue(tooltip.dataPoints[0].dataIndex);
          const yCoor = y2.getPixelForValue(tooltip.dataPoints[0].parsed.y);
          ctx2.save();
          ctx2.beginPath();
          const gradientLine = ctx2.createLinearGradient(0, top2, 0, bottom2);
          gradientLine.addColorStop(0, "rgba(129, 129, 165, 1)");
          gradientLine.addColorStop(1, "rgba(130, 130, 166, 0)");
          ctx2.lineWidth = 3;
          ctx2.strokeStyle = gradientLine;
          ctx2.setLineDash([6, 6]);
          ctx2.moveTo(xCoor, yCoor);
          ctx2.lineTo(xCoor, bottom2);
          ctx2.stroke();
          ctx2.closePath();
        }
      } };
      return /* @__PURE__ */ jsxRuntime.jsxs("div", { style: { display: "flex", flexDirection: "column" }, children: [/* @__PURE__ */ jsxRuntime.jsxs(Flex$1, { align: "center", gap: 2, justify: "space-between", style: { padding: "24px 0" }, children: [/* @__PURE__ */ jsxRuntime.jsx(TitleSection, { children: "Request History" }), renderDatePickerComponent()] }), /* @__PURE__ */ jsxRuntime.jsxs(ContainerChartLine, { children: [/* @__PURE__ */ jsxRuntime.jsx(Flex$1, { align: "center", gap: 3, justify: "flex-end", children: renderCustomCheckBox() }), /* @__PURE__ */ jsxRuntime.jsx(reactChartjs2.Line, { options, data: { labels: value ? filterDates(labelList, value[0], value[1]) : labelList, datasets: dataSetList }, ref: chartRef, plugins: hoverLine })] })] });
    };
    var ChartComponentMemo = React$2.memo(ChartComponent);
    var DesktopIcon = () => {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", width: "20", height: "20", viewBox: "0 0 20 20", fill: "none", children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M3.75 15L16.25 15C16.9404 15 17.5 14.4404 17.5 13.75V5C17.5 4.30964 16.9404 3.75 16.25 3.75L3.75 3.75C3.05964 3.75 2.5 4.30964 2.5 5L2.5 13.75C2.5 14.4404 3.05964 15 3.75 15Z", stroke: "#121212", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12.5 17.5H7.5", stroke: "#121212", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M2.5 11.875H17.5", stroke: "#121212", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10 15V17.5", stroke: "#121212", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" })] });
    };
    var MobileIcon = () => {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", width: "20", height: "20", viewBox: "0 0 20 20", fill: "none", children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M13.75 1.875H6.25C5.55964 1.875 5 2.43464 5 3.125V16.875C5 17.5654 5.55964 18.125 6.25 18.125H13.75C14.4404 18.125 15 17.5654 15 16.875V3.125C15 2.43464 14.4404 1.875 13.75 1.875Z", stroke: "#121212", strokeLinecap: "round", strokeLinejoin: "round" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5 4.375H15", stroke: "#121212", strokeLinecap: "round", strokeLinejoin: "round" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5 15.625H15", stroke: "#121212", strokeLinecap: "round", strokeLinejoin: "round" })] });
    };
    var ArrowUpRightIcon = () => {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { xmlns: "http://www.w3.org/2000/svg", width: "18", height: "18", viewBox: "0 0 18 18", fill: "none", children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M5.7151 12.9434L12.3906 5.20424M12.3906 5.20424L12.9012 12.1233M12.3906 5.20424L5.47154 5.71482", stroke: "#121212", strokeLinecap: "round", strokeLinejoin: "round" }) });
    };
    var RefreshIcon = () => {
      return /* @__PURE__ */ jsxRuntime.jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 16 16", fill: "none", children: [/* @__PURE__ */ jsxRuntime.jsx("path", { d: "M0.664062 2.66699V6.66699H4.66406", stroke: "#02021E", strokeWidth: "1.25", strokeLinecap: "round", strokeLinejoin: "round" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M15.3359 13.333V9.33301H11.3359", stroke: "#02021E", strokeWidth: "1.25", strokeLinecap: "round", strokeLinejoin: "round" }), /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M13.6574 5.9994C13.3193 5.04392 12.7446 4.18967 11.9871 3.51634C11.2295 2.84302 10.3138 2.37258 9.32521 2.1489C8.33666 1.92523 7.30756 1.95563 6.33394 2.23725C5.36031 2.51887 4.47389 3.04254 3.7574 3.7594L0.664062 6.66607M15.3307 9.33273L12.2374 12.2394C11.5209 12.9563 10.6345 13.4799 9.66086 13.7616C8.68723 14.0432 7.65813 14.0736 6.66959 13.8499C5.68104 13.6262 4.76526 13.1558 4.00771 12.4825C3.25015 11.8091 2.67551 10.9549 2.3374 9.9994", stroke: "#02021E", strokeWidth: "0.9375", strokeLinecap: "round", strokeLinejoin: "round" })] });
    };
    var TriangleIcon = () => {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { xmlns: "http://www.w3.org/2000/svg", width: "18", height: "17", viewBox: "0 0 18 17", fill: "none", children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9.0001 0L18 17H0L9.0001 0Z", fill: "#EB483F" }) });
    };
    var SquareIcon = () => {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { xmlns: "http://www.w3.org/2000/svg", width: "17", height: "17", viewBox: "0 0 17 17", fill: "none", children: /* @__PURE__ */ jsxRuntime.jsx("rect", { width: "17", height: "17", fill: "#F3AE4E" }) });
    };
    var CircleIcon = () => {
      return /* @__PURE__ */ jsxRuntime.jsx("svg", { xmlns: "http://www.w3.org/2000/svg", width: "17", height: "17", viewBox: "0 0 17 17", fill: "none", children: /* @__PURE__ */ jsxRuntime.jsx("rect", { width: "17", height: "17", rx: "8.5", fill: "#5CC971" }) });
    };
    var Tab = (_ref77) => {
      let { data: data2, handleRefresh, setActiveTab, activeTab, state, activeRefreshID, activeRefreshDevice } = _ref77;
      const renderDataByDevice = React$2.useCallback((data22) => {
        var _a2;
        if (!Boolean((_a2 = data22.categoryList[0][activeTab]) == null ? void 0 : _a2.length)) {
          return /* @__PURE__ */ jsxRuntime.jsx("div", { style: { padding: "20px" }, children: /* @__PURE__ */ jsxRuntime.jsxs(RetestButton, { type: "button", onClick: (e) => handleRefresh(e), disabled: state === STATE_TYPE.loading, children: [/* @__PURE__ */ jsxRuntime.jsx(RefreshIcon, {}), "Request data"] }) });
        }
        return data22.categoryList.map((item, i) => {
          return /* @__PURE__ */ jsxRuntime.jsx("div", { children: /* @__PURE__ */ jsxRuntime.jsx(RenderCategories, { item: item[activeTab][0] }) }, "".concat(item[activeTab].score, "-").concat(Math.random()));
        });
      }, [activeTab, handleRefresh, state]);
      const renderHistoryComponent = React$2.useCallback(() => {
        var _a2, _b, _c;
        if (activeTab === LIST_DEVICES.desktop) {
          return Boolean((_a2 = data2 == null ? void 0 : data2.history) == null ? void 0 : _a2.desktop.length) && /* @__PURE__ */ jsxRuntime.jsx(ChartComponentMemo, { history: data2.history[activeTab], markDatesList: [...data2.history[activeTab].map((item) => item[0].split(",")[0])] });
        } else {
          return Boolean((_c = (_b = data2 == null ? void 0 : data2.history) == null ? void 0 : _b.mobile) == null ? void 0 : _c.length) && /* @__PURE__ */ jsxRuntime.jsx(ChartComponentMemo, { history: data2.history[activeTab], markDatesList: [...data2.history[activeTab].map((item) => item[0].split(",")[0])] });
        }
      }, [activeTab, data2.history]);
      return /* @__PURE__ */ jsxRuntime.jsxs(Container$2, { children: [/* @__PURE__ */ jsxRuntime.jsxs(TabContainer, { children: [/* @__PURE__ */ jsxRuntime.jsxs(TitleContainer, { children: ["Page tested:", /* @__PURE__ */ jsxRuntime.jsx(Link, { href: data2.mainInfo.linkReq, target: "_blank", rel: "noreferrer", children: data2.mainInfo.linkReq })] }), /* @__PURE__ */ jsxRuntime.jsxs(Flex$1, { justify: "space-between", children: [/* @__PURE__ */ jsxRuntime.jsx(Flex$1, { style: { margin: "auto 0 0 0" }, children: TABS.map((tab2) => /* @__PURE__ */ jsxRuntime.jsxs(Flex$1, { direction: "column", children: [/* @__PURE__ */ jsxRuntime.jsxs(TabButton, { active: activeTab === tab2.id, onClick: () => setActiveTab(tab2.id), children: [tab2.label === LIST_DEVICES.desktop ? /* @__PURE__ */ jsxRuntime.jsx(DesktopIcon, {}) : /* @__PURE__ */ jsxRuntime.jsx(MobileIcon, {}), " ", tab2.label] }), activeTab === tab2.id && /* @__PURE__ */ jsxRuntime.jsx(TabLine, {})] }, tab2.id)) }), /* @__PURE__ */ jsxRuntime.jsxs(Flex$1, { style: { paddingBottom: "16px", gap: "24px" }, children: [/* @__PURE__ */ jsxRuntime.jsxs(LinkDetails, { href: "https://developers.google.com/speed/pagespeed/insights/?url=".concat(data2.mainInfo.linkReq.replace(":", "%3A").replaceAll("/", "%2F")), target: "_blank", rel: "noreferrer", children: ["Open PageSpeed details ", /* @__PURE__ */ jsxRuntime.jsx(ArrowUpRightIcon, {})] }), /* @__PURE__ */ jsxRuntime.jsxs(RetestButton, { type: "button", onClick: handleRefresh, disabled: state === STATE_TYPE.loading, children: [/* @__PURE__ */ jsxRuntime.jsx(RefreshIcon, {}), "Retest"] })] })] })] }), activeRefreshID === data2.mainInfo.linkReq && state === STATE_TYPE.loading && activeRefreshDevice === activeTab ? /* @__PURE__ */ jsxRuntime.jsx(CustomSpinner, {}) : TABS.map((tab2) => {
        var _a2, _b;
        return /* @__PURE__ */ jsxRuntime.jsxs(TabContent, { active: activeTab === tab2.id, children: [Boolean((_a2 = data2 == null ? void 0 : data2.categoryList) == null ? void 0 : _a2.length) && /* @__PURE__ */ jsxRuntime.jsxs(FirstSectionContainer, { children: [/* @__PURE__ */ jsxRuntime.jsx(Flex$1, { align: "center", justify: "flex-end", gap: 5, children: Boolean((_b = data2 == null ? void 0 : data2.categoryList[0][activeTab]) == null ? void 0 : _b.length) && /* @__PURE__ */ jsxRuntime.jsxs(DescriptContainer, { children: [/* @__PURE__ */ jsxRuntime.jsxs(DescriptItem, { children: [/* @__PURE__ */ jsxRuntime.jsx(TriangleIcon, {}), "0\u201349"] }), " ", /* @__PURE__ */ jsxRuntime.jsxs(DescriptItem, { children: [/* @__PURE__ */ jsxRuntime.jsx(SquareIcon, {}), "50\u201389"] }), " ", /* @__PURE__ */ jsxRuntime.jsxs(DescriptItem, { children: [/* @__PURE__ */ jsxRuntime.jsx(CircleIcon, {}), "90\u2013100"] }), " "] }) }), /* @__PURE__ */ jsxRuntime.jsx(RenderContainer, { children: renderDataByDevice(data2) })] }), renderHistoryComponent()] }, tab2.id);
      })] });
    };
    var LoadingWrapper = styled.div(_templateObject127 || (_templateObject127 = _taggedTemplateLiteral2(["\n  display: flex;\n  align-items: flex-end;\n  justify-content: center;\n  height: ", ";\n  overflow: hidden;\n  animation: ", ";\n"])), (_ref78) => {
      let { active } = _ref78;
      return active ? "12px" : "0";
    }, (_ref79) => {
      let { active } = _ref79;
      return active ? "height 0.25s ease-in" : "height 0.15s ease-out";
    });
    var BounceAnimation = We(_templateObject128 || (_templateObject128 = _taggedTemplateLiteral2(["\n  0% { \n    margin-bottom: 0; \n  }\n\n  50% { \n    margin-bottom: 0.5rem;\n  }\n\n  100% { \n    margin-bottom: 0;\n  }\n"])));
    var Dot = styled.div(_templateObject129 || (_templateObject129 = _taggedTemplateLiteral2(["\n  background-color: black;\n  border-radius: 50%;\n  width: 0.2rem;\n  height: 0.2rem;\n  margin: 0 0.25rem;\n  /*Animation*/\n  animation: ", " 0.5s linear infinite;\n  animation-delay: ", ";\n"])), BounceAnimation, (_ref80) => {
      let { delay } = _ref80;
      return delay;
    });
    function Loading(_ref81) {
      let { active } = _ref81;
      return /* @__PURE__ */ jsxRuntime.jsxs(LoadingWrapper, { active, children: [/* @__PURE__ */ jsxRuntime.jsx(Dot, { delay: "0s" }), /* @__PURE__ */ jsxRuntime.jsx(Dot, { delay: "0.1s" }), /* @__PURE__ */ jsxRuntime.jsx(Dot, { delay: "0.2s" })] });
    }
    var errorMassageText = "Server error. Please try again later.";
    var PageSpeedInsightsGui = (props) => {
      const [state, setState] = React$2.useState(STATE_TYPE.idle);
      const [url, setUrl] = React$2.useState("");
      const [device, setDevice] = React$2.useState([]);
      const [data2, setData] = React$2.useState([]);
      const [activeItem, setActiveItem] = React$2.useState(0);
      const [activeTab, setActiveTab] = React$2.useState(LIST_DEVICES.desktop);
      const [activeRefreshID, setActiveRefreshID] = React$2.useState("");
      const [activeRefreshDevice, setActiveRefreshDevice] = React$2.useState("");
      const [errorMessage, setErrorMessage] = React$2.useState("");
      React$2.useEffect(() => {
        const getDocumentById = async () => {
          const doc = await props.client.getDocument("performance");
          if (Boolean(doc.data.length)) {
            setData(doc.data);
          }
        };
        getDocumentById();
      }, []);
      React$2.useEffect(() => {
        if (errorMessage) {
          setTimeout(() => {
            setErrorMessage("");
          }, 3e3);
        }
      }, [errorMessage]);
      const handelRequest = async () => {
        try {
          setState(STATE_TYPE.loading);
          let result, newData;
          if (device.length > 1) {
            result = await apiReqByAllDevice(url, true, true, props.tool.options.API_KEY);
            const newResult1 = [formatDataList(result.slice(0, 5))];
            const newResult2 = [formatDataList(result.slice(5))];
            newResult1[0].categoryList.map((category, idx) => {
              category.mobile = newResult2[0].categoryList[idx].mobile;
            });
            newResult1[0].history.mobile.push([newResult2[0].mainInfo.date, ...newResult2[0].categoryList.map((sc2) => sc2.mobile[0].score), getMonthByIdx(new Date(newResult2[0].mainInfo.date).getMonth())]);
            newData = [...newResult1, ...data2];
          } else {
            result = await apiRequestByDeviceAllCategories(url, device[0], props.tool.options.API_KEY);
            newData = [formatDataList(result), ...data2];
          }
          setData(newData);
          setActiveTab(device[0]);
          setActiveItem(0);
          patchSanityDocument(newData);
          setUrl("");
          setState(STATE_TYPE.success);
        } catch (error) {
          console.log(error);
          setErrorMessage(errorMassageText);
          setState(STATE_TYPE.error);
        }
      };
      const handleRefresh = async (e) => {
        var _a2, _b;
        try {
          setState(STATE_TYPE.loading);
          setActiveRefreshID(data2[activeItem].mainInfo.linkReq);
          setActiveRefreshDevice(activeTab);
          const result = await apiRequestByDeviceAllCategories((_b = (_a2 = data2[activeItem]) == null ? void 0 : _a2.mainInfo) == null ? void 0 : _b.linkReq, activeTab, props.tool.options.API_KEY);
          const newResult = [formatDataList(result)];
          const newData = [...data2].map((item, i) => {
            if (i === activeItem) {
              item.mainInfo.date = newResult[0].mainInfo.date;
              item.categoryList.map((category, idx) => {
                category[activeTab] = newResult[0].categoryList[idx][activeTab];
              });
              item.history[activeTab].push([newResult[0].mainInfo.date, ...newResult[0].categoryList.map((it2) => it2[activeTab][0].score), getMonthByIdx(new Date(newResult[0].mainInfo.date).getMonth())]);
            }
            return item;
          });
          setData(newData);
          patchSanityDocument(newData);
          setState(STATE_TYPE.success);
          setActiveRefreshID("");
          setActiveRefreshDevice("");
        } catch (error) {
          console.log(error);
          setErrorMessage(errorMassageText);
          setState(STATE_TYPE.error);
        }
      };
      const patchSanityDocument = (newData) => {
        if (!Boolean(newData.length))
          return;
        props.client.patch("performance").set({ data: newData }).commit().catch((err) => {
          console.error("Oh no, the update failed: ", err.message);
        });
      };
      const deleteCardByID = (link, idx) => {
        setState(STATE_TYPE.loading);
        props.client.patch("performance").unset(["data[".concat(idx, "]")]).commit();
        setData([...data2].filter((item) => item.mainInfo.linkReq !== link));
        setState(STATE_TYPE.success);
      };
      const handelRefreshAll = async () => {
        try {
          setState(STATE_TYPE.loading);
          let numberOfReq = 0;
          const newDataArr = [];
          while (numberOfReq < data2.length) {
            try {
              let newData = [...data2][numberOfReq];
              const reqFor = data2[numberOfReq].categoryList[0];
              const result = await apiReqByAllDevice(data2[numberOfReq].mainInfo.linkReq, Boolean(reqFor.desktop.length), Boolean(reqFor.mobile.length), props.tool.options.API_KEY);
              if (Boolean(result.length > 5)) {
                const newResult1 = [formatDataList(result.slice(0, 5))];
                const newResult2 = [formatDataList(result.slice(5))];
                newData.mainInfo.date = newResult1[0].mainInfo.date;
                newData.categoryList.map((category, idx) => {
                  category.mobile = newResult2[0].categoryList[idx].mobile;
                  category.desktop = newResult1[0].categoryList[idx].desktop;
                });
                newData.history.mobile.push([newResult2[0].mainInfo.date, ...newResult2[0].categoryList.map((sc2) => sc2.mobile[0].score), getMonthByIdx(new Date(newResult2[0].mainInfo.date).getMonth())]);
                newData.history.desktop.push([newResult1[0].mainInfo.date, ...newResult1[0].categoryList.map((sc2) => sc2.desktop[0].score), getMonthByIdx(new Date(newResult1[0].mainInfo.date).getMonth())]);
              } else {
                const newResult = [formatDataList(result)];
                const forDevice = newResult[0].mainInfo.device;
                newData.mainInfo.date = newResult[0].mainInfo.date;
                newData.categoryList.map((category, idx) => {
                  category[forDevice] = newResult[0].categoryList[idx][forDevice];
                });
                newData.history[forDevice].push([newResult[0].mainInfo.date, ...newResult[0].categoryList.map((sc2) => sc2[forDevice][0].score), getMonthByIdx(new Date(newResult[0].mainInfo.date))]);
              }
              newDataArr.push(newData);
              numberOfReq += 1;
            } catch (error) {
              console.error(error);
            }
          }
          setData(newDataArr);
          patchSanityDocument(newDataArr);
          setActiveRefreshID("");
          setActiveRefreshDevice("");
          setState(STATE_TYPE.success);
        } catch (error) {
          setErrorMessage(errorMassageText);
          setState(STATE_TYPE.error);
        }
      };
      return /* @__PURE__ */ jsxRuntime.jsxs(Container$4, { children: [/* @__PURE__ */ jsxRuntime.jsxs(Flex$1, { direction: "column", style: { borderRight: "1px solid #E4E6E8" }, children: [/* @__PURE__ */ jsxRuntime.jsxs(Flex$1, { direction: "column", style: { padding: "40px 24px 24px" }, children: [/* @__PURE__ */ jsxRuntime.jsx(InputComponent, { device, setDevice, state, url, setUrl, data: data2, handelRequest }), Boolean(data2.length) ? /* @__PURE__ */ jsxRuntime.jsx(HistoryMenu, { data: data2, setActiveItem, activeItem, state, deleteCardByID }) : state === STATE_TYPE.loading ? /* @__PURE__ */ jsxRuntime.jsx("div", { style: { minHeight: "16px", padding: "20px 0 0 0" }, children: /* @__PURE__ */ jsxRuntime.jsx(Loading, { active: state === STATE_TYPE.loading }) }) : /* @__PURE__ */ jsxRuntime.jsx(Flex$1, { justify: "center", padding: 4, children: /* @__PURE__ */ jsxRuntime.jsx(Text, { children: "Your history will show up here." }) })] }), Boolean(data2.length > 1) && /* @__PURE__ */ jsxRuntime.jsx(Flex$1, { justify: "center", style: { padding: "24px", margin: "auto 0 0 0", borderTop: "1px solid #E4E6E8" }, children: /* @__PURE__ */ jsxRuntime.jsxs(ButtonResetAll, { type: "button", onClick: handelRefreshAll, disabled: state === STATE_TYPE.loading, children: [/* @__PURE__ */ jsxRuntime.jsx(RefreshIcon, {}), "Retest all"] }) })] }), Boolean(data2.length) && /* @__PURE__ */ jsxRuntime.jsx(Tab, { data: data2[activeItem], activeTab, setActiveTab, handleRefresh, state, activeRefreshID, activeRefreshDevice }), state === STATE_TYPE.loading && !Boolean(data2.length) && /* @__PURE__ */ jsxRuntime.jsx(CustomSpinner, {})] });
    };
    var GlobalStyle = $e(_templateObject130 || (_templateObject130 = _taggedTemplateLiteral2(["  \n  body {\n    height: 100%;\n  }\n\n  .test{\n    border: 5px solid red;\n  \n  *{\n    font-family: 'Inter', sans-serif;\n    font-size: 14px;\n  }\n}\n\n.titleStyle{\n  font-weight: 400;\n  line-height: 1.25;\n  color: #232323;\n}  \n\n.doted {\n  width: inherit;\n  position: relative;\n  color: #232323 !important;\n\n    &:after{\n      content: '\u2022';\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%,0%);\n      color:#3719CA;\n      margin: 4px 0 0 0;\n    }\n}\n\n  .customInput{\n    display: flex;\n    justify-content:center;\n    align-items: center;\n    padding: 12px;\n  }\n\n  .react-calendar{\n    border : none;\n    font-family: inherit;\n  }\n\n  .calendar{\n    padding: 24px;\n    background: #FFFFFF;\n    box-shadow: 0px 2px 40px rgba(96, 93, 97, 0.15);\n    border-radius: 8px;\n  }\n\n.react-calendar__month-view__weekdays__weekday{\n  display: none;\n}\n\n.react-daterange-picker__wrapper{ \n  border-radius: 4px;\n  outline: unset;\n  border: 1px solid #C9C9C9;\n  color: #C9C9C9;\n\n  &:active,:hover,:focus{\n    border: 1px solid #3F3F3F;\n  }\n}\n  .react-calendar__tile--active{\n    background-color: #F5F5FA;\n    color: #232323 !important;\n  }\n\n  .react-calendar__tile--rangeEnd,\n  .react-calendar__tile--rangeStart{\n    background-color: #006edc;\n    color: white !important;\n  }\n\n  .react-calendar__tile--rangeStart{\n    border-top-left-radius: 8px;\n    border-bottom-left-radius: 8px;\n  }\n\n  .react-calendar__tile--rangeEnd{\n    border-top-right-radius: 8px;\n    border-bottom-right-radius: 8px;\n  }\n"])));
    var Container = styled.div(_templateObject131 || (_templateObject131 = _taggedTemplateLiteral2(["\n  width: 100%;\n  height: 100%;\n  display: flex;\n\n  * {\n    font-family: 'Inter', sans-serif;\n  }\n"])));
    var PageSpeedInsightsContainer = (props) => {
      return /* @__PURE__ */ jsxRuntime.jsxs(ThemeProvider, { theme: studioTheme, children: [/* @__PURE__ */ jsxRuntime.jsx(GlobalStyle, {}), /* @__PURE__ */ jsxRuntime.jsx(Container, { children: /* @__PURE__ */ jsxRuntime.jsx(PageSpeedInsightsGui, { ...props }) })] });
    };
    function PageSpeedPlugin(props) {
      const client = sanity.useClient({ apiVersion: "2023-01-24" });
      const doc = { _id: "performance", _type: "document", name: "Sanity Performance Data", data: [] };
      client.createIfNotExists(doc);
      return /* @__PURE__ */ jsxRuntime.jsx(PageSpeedInsightsContainer, { client, ...props });
    }
    var pageSpeedMonitoringPlugin = sanity.definePlugin((options) => {
      console.log("hello from sanity-plugin-page-speed-monitoring", options);
      return { name: "sanity-plugin-page-speed-monitoring", tools: [{ name: "sanity-plugin-page-speed-monitoring", title: "Sanity PageSpeed Monitoring", icon: ApiIcon$1, component: PageSpeedPlugin, route: router.route.create("/*"), options }] };
    });
    exports.pageSpeedMonitoringPlugin = pageSpeedMonitoringPlugin;
  }
});

// <stdin>
require_dist();
/**
* @license React
* react-is.production.min.js
*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*/
/**
* @license React
* react-is.development.js
*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*/
/** @license React v16.13.1
* react-is.production.min.js
*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*/
/** @license React v16.13.1
* react-is.development.js
*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*/
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/**
 * Prism: Lightweight, robust, elegant syntax highlighting
 *
 * @license MIT <https://opensource.org/licenses/MIT>
 * @author Lea Verou <https://lea.verou.me>
 * @namespace
 * @public
 */
/**
* @license React
* scheduler.production.min.js
*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*/
/**
* @license React
* scheduler.development.js
*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*/
/**
* @license React
* react-dom.production.min.js
*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*/
/**
* @license React
* react-dom.development.js
*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*/
/**
* Checks if an event is supported in the current execution environment.
*
* NOTE: This will not work correctly for non-generic events such as `change`,
* `reset`, `load`, `error`, and `select`.
*
* Borrows from Modernizr.
*
* @param {string} eventNameSuffix Event name, e.g. "click".
* @return {boolean} True if the event is supported.
* @internal
* @license Modernizr 3.0.0pre (Custom Build) | MIT
*/
